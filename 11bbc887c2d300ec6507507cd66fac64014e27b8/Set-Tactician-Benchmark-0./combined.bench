coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Conjunction.proj1	0	0.000333	0	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Conjunction.proj2	0	0.001285	2	2	0.0	synth with cache (only 1: destruct 1; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Equivalence.iff_refl	0	0.000605	2	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Equivalence.iff_trans	0	0.007337	59	19	2.2.0.0.1	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: split; only 1: auto; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Equivalence.iff_sym	0	0.001401	6	4	0.0.0.2	synth with cache (only 1: destruct 1; only 1: split; only 1: auto; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_iff_compat_l	0	0.035381	542	158	1.0.2.0.1.0.1.0.0.4	synth with cache (only 1: destruct 1; only 1: split; only 1: destruct 1; only 1: split; only 1: trivial; only 1: auto; only 1: destruct 1; only 1: split; only 1: trivial; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_iff_compat_r	0	0.028905	246	97	0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros ? ? ? [Hl Hr]; only 1: split; only 1: intros [? ?]; only 1: split; only 1: apply Hl; only 1: assumption; only 1: assumption; only 1: intros [? ?]; only 1: split; only 1: apply Hr; only 1: assumption; only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_iff_compat_l	0	0.063212	1101	131
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_iff_compat_r	0	0.156419	1334	353	0.1.0.0.1.0.0.1.0.0.1.0.0.0	synth with cache (only 1: intros ? ? ? [Hl Hr]; only 1: split; only 1: intros [?| ?]; only 1: left; only 1: apply Hl; only 1: assumption; only 1: right; only 1: assumption; only 1: intros [?| ?]; only 1: left; only 1: apply Hr; only 1: assumption; only 1: right; only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.imp_iff_compat_l	0	0.058699	922	104	9.9.2.0	synth with cache (only 1: intros ? ? ? [Hl Hr]; only 1: split; only 1: auto; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.imp_iff_compat_r	0	0.263308	2931	605	10.10.0.10	synth with cache (only 1: destruct 1; only 1: split; only 1: auto; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.not_iff_compat	0	0.002586	4	4	0.0.0.0	synth with cache (only 1: intros A B [H1 H2]; only 1: split; only 1: auto; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.neg_false	0	0.079142	809	143	1.1.11.0.1.0	synth with cache (only 1: split; only 1: split; only 1: auto; only 1: destruct 1; only 1: intros [? ?]; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_cancel_l	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_cancel_r	0	3.197492	15952	3790	0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros A B C Hl Hr; only 1: split; only 1: intros [HypL HypR]; only 1: split; only 1: intros; only 1: apply HypL; only 1: split; only 1: assumption; only 1: apply Hl; only 1: assumption; only 1: intros; only 1: apply HypR; only 1: split; only 1: assumption; only 1: apply Hr; only 1: assumption; only 1: intros [HypL HypR]; only 1: split; only 1: intros [? ?]; only 1: split; only 1: apply HypL; only 1: assumption; only 1: apply Hl; only 1: assumption; only 1: intros [? ?]; only 1: split; only 1: apply HypR; only 1: assumption; only 1: apply Hr; only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_comm	0	0.040333	72	48	0.0.0.0.0.0.0.0.2	synth with cache (only 1: split; only 1: intros [? ?]; only 1: split; only 1: trivial; only 1: trivial; only 1: intros [? ?]; only 1: split; only 1: trivial; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_assoc	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_cancel_l	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_cancel_r	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_comm	0	0.379092	337	133	0.0.0.1.0.0.0.0.1.0.0.0	synth with cache (only 1: intros; only 1: split; only 1: intros [?| ?]; only 1: right; only 1: trivial; only 1: left; only 1: trivial; only 1: intros [?| ?]; only 1: right; only 1: trivial; only 1: left; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_assoc	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.iff_and	0	0.010570	3	2	1.0	synth with cache (only 1: intros; only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.iff_to_and	0	0.159340	205	87	1.0.0.0.0.2.0.0	synth with cache (only 1: intros; only 1: split; only 1: intros [? ?]; only 1: split; only 1: trivial; only 1: trivial; only 1: intro H; only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.universal_quantification.inst	0	0.019147	26	7	5.2	synth with cache (only 1: intro H1; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.universal_quantification.gen	0	0.008571	2	2	0.0	synth with cache (only 1: unfold all; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.absurd	0	0.275838	468	134	0.7.2.1	synth with cache (only 1: intro A; only 1: intros H ?; only 1: destruct 1; only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.eq_sym	0	0.005659	6	2	1.3	synth with cache (only 1: destruct 1; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.eq_trans	0	0.005448	3	3	0.0.0	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.eq_trans_r	0	0.004810	2	2	0.0	synth with cache (only 1: destruct 2; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.f_equal	0	0.005584	2	2	0.0	synth with cache (only 1: destruct 1; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.not_eq_sym	0	0.478875	1431	111	28.1	synth with cache (only 1: destruct 2; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_sind_r	0	0.011516	5	3	0.0.2	synth with cache (only 1: intros A B C Hl Hr; only 1: destruct 1; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_ind_r	0	0.010888	3	3	0.0.0	synth with cache (only 1: intros A x P H y H0; only 1: elim eq_sym with (1 := H0); only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_rec_r	0	0.009999	3	3	0.0.0	synth with cache (only 1: intros A x P H y H0; only 1: elim eq_sym with (1 := H0); only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_rect_r	0	0.013675	3	3	0.0.0	synth with cache (only 1: intros A x P H y H0; only 1: elim eq_sym with (1 := H0); only 1: assumption).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.equality_dep.f_equal_dep	0	1.491163	9662	278
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.equality_dep2.f_equal_dep2	0	0.008846	5	3	0.1.1	synth with cache (only 1: destruct 1; only 1: destruct H; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_opp_r	0	0.005312	3	2	1.0	synth with cache (only 1: destruct H; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_opp_l	0	0.007360	3	3	0.0.0	synth with cache (only 1: intros; only 1: destruct H; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal2	0	0.013252	13	7	1.0.1.0.1	synth with cache (only 1: intros A B C Hl Hr; only 1: intros H ?; only 1: destruct 1; only 1: destruct 1; only 1: repeat split).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal3	0	0.007524	5	4	0.0.0.1	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal4	0	0.010933	5	5	0.0.0.0.0	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal5	0	0.016560	6	6	0.0.0.0.0.0	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal_compose	0	0.235442	465	84	0.6.4.3	synth with cache (only 1: intros A x P H y H0; only 1: intros h1 h2; only 1: destruct h2; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_refl_l	0	0.006198	5	2	0.3	synth with cache (only 1: destruct e; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_refl_r	0	0.006444	2	2	0.0	synth with cache (only 1: destruct e; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_sym_involutive	0	0.005821	2	2	0.0	synth with cache (only 1: destruct e; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_sym_inv_l	0	0.005802	2	2	0.0	synth with cache (only 1: destruct e; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_sym_inv_r	0	0.006003	2	2	0.0	synth with cache (only 1: destruct e; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_assoc	0	0.029814	41	13	0.2.3.0	synth with cache (only 1: destruct e; only 1: intros h1 h2; only 1: destruct h2; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_map	0	0.015248	19	7	0.1.5	synth with cache (only 1: intros A B C Hl Hr; only 1: destruct H; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_map	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.map_subst	0	0.005014	2	2	0.0	synth with cache (only 1: destruct H; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.map_subst_map	0	0.006213	3	2	0.1	synth with cache (only 1: destruct H; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_swap	0	0.005490	8	3	4.1.0	synth with cache (only 1: intros; only 1: destruct H; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_compose	0	0.004770	5	3	2.0.0	synth with cache (only 1: intros; only 1: destruct H2; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_id_comm_l	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_id_comm_r	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_refl_map_distr	0	0.021967	2	2	0.0	synth with cache (only 1: intros; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_map_distr	0	1.679902	3350	379	1.1.1.3.20.0	synth with cache (only 1: destruct e; only 1: intros; only 1: rewrite eq_trans_refl_l; only 1: simpl; only 1: rewrite eq_trans_refl_l; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_sym_map_distr	0	0.007770	2	2	0.0	synth with cache (only 1: destruct e; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_sym_distr	0	0.016101	18	6	0.4.1	synth with cache (only 1: destruct e'; only 1: rewrite eq_trans_refl_l; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_rew_distr	0	0.007450	12	3	0.4	synth with cache (only 1: destruct e'; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_const	0	0.107095	13	3	1.3	synth with cache (only 1: destruct e; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.unique_existence	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.forall_exists_unique_domain_coincide	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.forall_exists_coincide_unique_domain	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.exists_inhabited	0	0.215669	562	89	7.8.0	synth with cache (only 1: intros A P H; only 1: destruct H; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.inhabited_covariant	0	0.007569	15	4	0.0.5	synth with cache (only 1: intro; only 1: destruct 1; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_stepl	0	0.038750	53	17	0.0.7	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: trivial).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.iff_stepl	0	0.007249	4	4	0.0.0.0	synth with cache (only 1: intros A B C [H1 H2] [H3 H4]; only 1: split; only 1: auto; only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex.eq_ex_uncurried	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex.rew_ex	0
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex2.eq_ex2_uncurried	0	0.081236	97	30	0.0.5.0.0	synth with cache (only 1: destruct pq as [p q]; only 1: destruct q; only 1: destruct H; only 1: destruct p; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex2.rew_ex2	0	0.010578	2	2	0.0	synth with cache (only 1: destruct H, u; only 1: reflexivity).
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_more_than_1_digit	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.wB_pos	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_to_Z_1	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_to_Z_2	0	0.016908	4	4	0.0.0.0	synth with cache (only 1: unfold to_Z; only 1: intros; only 1: destruct (Z_mod_lt x wB wB_pos); only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_to_Z	0	0.021618	8	5	0.0.0.3.0	synth with cache (only 1: unfold to_Z; only 1: generalize digits_ne_1; only 1: intros; only 1: destruct (Z_mod_lt x wB wB_pos); only 1: auto).
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_of_pos	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_zdigits	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_0	0	0.025283	7	6	0.1.0.0.0.0	synth with cache (only 1: unfold to_Z, zdigits; only 1: apply Zmod_small; only 1: unfold wB, base; only 1: split; only 1: auto with zarith; only 1: auto with zarith).
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_1	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_Bm1	0	0.058680	22	10	0.2.0.0	synth with cache (only 1: unfold to_Z, one; only 1: apply Zmod_small; only 1: generalize wB_pos; only 1: lia).
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_compare	0	0.043592	27	6	6	synth with cache (only 1: auto with zarith).
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_eq0	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_opp_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_opp	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_opp_carry	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.Zmod_equal	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_succ_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_add_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_add_carry_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_succ	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_add	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_add_carry	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_pred_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_sub_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_sub_carry_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_pred	0	0.020575	8	4	1.3.0.0	synth with cache (only 1: intros; only 1: unfold succ, to_Z, Z.succ; only 1: symmetry; only 1: apply Zplus_mod_idemp_l).
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_sub	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_sub_carry	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_mul_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_mul	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_square_c	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_div	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_div_gt	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_modulo	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.spec_modulo_gt	0
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Cyclic.ZModulo.ZModulo.ZModulo.Zgcd_bound	0
