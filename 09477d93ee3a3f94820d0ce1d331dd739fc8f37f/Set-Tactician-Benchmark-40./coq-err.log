File "./theories/micromega/RMicromega.v", line 84, characters 2-9:
Error: Stack overflow.

File "./theories/Reals/SeqProp.v", line 90, characters 2-29:
Error:
Anomaly
"Incomplete witness for the following tactic:
synth with cache (only 1: intro HF; only 1: intros Acc_0; only 1: apply completeness; only 1: unfold Cauchy_crit, bound; only 1: unfold EUn; only 1: auto; only 1: unfold EUn; only 1: eauto using Rle_trans with rorders).
Unsolved evars:
?X2849" Please report at http://coq.inria.fr/bugs/.

File "./theories/Reals/Rtopology.v", line 240, characters 2-48:
Error:
Anomaly
"Incomplete witness for the following tactic:
synth with cache (only 1: intros y Ryx; only 1: repeat red; only 1: unfold included; only 1: eexists; only 1: intros; only 1: split).
Unsolved evars:
?X16395" Please report at http://coq.inria.fr/bugs/.

File "./theories/Reals/RIneq.v", line 691, characters 2-36:
Error:
Anomaly
"Incomplete witness for the following tactic:
synth with cache (only 1: intuition; only 1: edestruct Rle_lt_dec; only 1: rewrite H; only 1: auto with real; only 1: rewrite H; only 1: auto with real).
Unsolved evars:
?X427?X428" Please report at http://coq.inria.fr/bugs/.

File "./theories/Reals/Rtrigo1.v", line 740, characters 2-68:
Error: Stack overflow.

File "./theories/Reals/Rtrigo1.v", line 746, characters 2-68:
Error: Stack overflow.

File "./theories/Lists/Streams.v", line 95, characters 0-19:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intros H; only 1: inversion 1; only 1: coinduction ltac:(EqSt_reflex); only 1: destruct H; only 1: auto).
Typing error:
Recursive definition of EqSt_reflex is ill-formed.
In environment
A : Type
H : Stream
s2 : Stream
H0 : EqSt H s2
e : hd H = hd s2
e0 : EqSt (tl H) (tl s2)
H1 : hd H = hd s2
H2 : EqSt (tl H) (tl s2)
H3 : hd H = hd s2
H4 : EqSt (tl H) (tl s2)
EqSt_reflex : EqSt s2 H
Invalid recursive call in the argument of "match" in "match EqSt_reflex with
                                                 | eqst _ _ x x0 =>
                                                 (fun 
                                                 (_ : hd s2 = hd H)
                                                 (H : EqSt (tl s2) (tl H)) =>
                                                 H) x x0
                                                 end".
Recursive definition is: "eqst s2 H
                            (match
                               H as s
                               return
                                 (EqSt s s2 ->
                                  hd s = hd s2 ->
                                  EqSt (tl s) (tl s2) -> hd s2 = hd s)
                             with
                             | Cons a s =>
                                 (fun (a0 : A) (H : Stream)
                                    (_ : EqSt (Cons a0 H) s2)
                                    (H1 : hd (Cons a0 H) = hd s2)
                                    (_ : EqSt (tl (Cons a0 H)) (tl s2)) =>
                                  eq_sym H1) a s
                             end H0 H3 H4)
                            (let H3 : EqSt (tl s2) (tl H) :=
                               match EqSt_reflex with
                               | eqst _ _ x x0 =>
                                   (fun (_ : hd s2 = hd H)
                                      (H : EqSt (tl s2) (tl H)) => H) x x0
                               end in
                             H3)"."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Logic/ExtensionalityFacts.v", line 131, characters 2-17:
Error: Anomaly "in econstr: grounding a non evar-free term"
Please report at http://coq.inria.fr/bugs/.

File "./theories/Lists/Streams.v", line 167, characters 0-31:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intros r s; only 1: coinduction ltac:(Eq_sym); only 1: auto).
Typing error:
Recursive definition of Eq_sym is ill-formed.
In environment
A : Type
P, Inv : Stream -> Prop
InvThenP : forall x : Stream, Inv x -> P x
InvIsStable : forall x : Stream, Inv x -> Inv (tl x)
r : Stream
s : Inv r
Eq_sym : ForAll r
Invalid recursive call in the argument of "match" in "match Eq_sym with
                                                 | HereAndFurther x x0 =>
                                                 (fun 
                                                 (_ : P r)
                                                 (H : ForAll (tl r)) => H) x
                                                 x0
                                                 end".
Recursive definition is: "HereAndFurther (InvThenP s)
                            (let H : ForAll (tl r) :=
                               match Eq_sym with
                               | HereAndFurther x x0 =>
                                   (fun (_ : P r) (H : ForAll (tl r)) => H) x
                                     x0
                               end in
                             H)"."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Lists/Streams.v", line 200, characters 0-11:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: constructor; only 1: inversion 1; only 1: let rec coinduction proof := cofix proof; intros; constructor; [ clear proof | try (apply proof; clear proof) ] in coinduction ltac:(ForAll_coind); only 1: assumption; only 1: let rec coinduction proof := cofix proof; intros; constructor; [ clear proof | try (apply proof; clear proof) ] in coinduction ltac:(Equiv2); only 1: inversion_clear H; only 1: assumption; only 1: assumption).
Typing error:
Recursive definition of ForAll_coind is ill-formed.
In environment
A, B : Type
f : A -> B
P : Stream B -> Prop
S : Stream A
H : ForAll (fun s : Stream A => P (map s)) S
p : (fun s : Stream A => P (map s)) S
f0 : ForAll (fun s : Stream A => P (map s)) (tl S)
H0 : P (map S)
H1 : ForAll (fun s : Stream A => P (map s)) (tl S)
H2 : P (map S)
H3 : ForAll (fun s : Stream A => P (map s)) (tl S)
ForAll_coind : ForAll P (map S)
Invalid recursive call in the argument of "match" in "match ForAll_coind with
                                                 | HereAndFurther _ x x0 =>
                                                 (fun 
                                                 (_ : P (map S))
                                                 (H : ForAll P (tl (map S)))
                                                 => H) x x0
                                                 end".
Recursive definition is: "HereAndFurther (map S) H2
                            (let H2 : ForAll P (tl (map S)) :=
                               match ForAll_coind with
                               | HereAndFurther _ x x0 =>
                                   (fun (_ : P (map S))
                                      (H : ForAll P (tl (map S))) => H) x x0
                               end in
                             H2)"."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Numbers/Cyclic/Int63/Uint63.v", line 1484, characters 1-32:
Error: Stack overflow.

File "./theories/Numbers/Cyclic/Int31/Cyclic31.v", line 2252, characters 1-34:
Error: Stack overflow.

