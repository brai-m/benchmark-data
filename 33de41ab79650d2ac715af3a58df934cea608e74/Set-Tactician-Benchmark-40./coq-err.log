File "./theories/micromega/RMicromega.v", line 268, characters 2-25:
Error: Stack overflow.

File "./theories/Reals/Rtrigo1.v", line 740, characters 2-68:
Error: Stack overflow.

File "./theories/Reals/Rtrigo1.v", line 746, characters 2-68:
Error: Stack overflow.

File "./theories/MSets/MSetEqProperties.v", line 696, characters 0-19:
Error: Anomaly "in econstr: grounding a non evar-free term"
Please report at http://coq.inria.fr/bugs/.

File "./theories/Reals/Rtrigo1.v", line 1257, characters 2-334:
Error: Anomaly "in econstr: grounding a non evar-free term"
Please report at http://coq.inria.fr/bugs/.

File "./theories/Numbers/Cyclic/Int63/Uint63.v", line 1484, characters 1-32:
Error: Stack overflow.

File "./theories/Reals/RIneq.v", line 1749, characters 2-24:
Error:
Anomaly
"Constant Coq.Reals.RIneq.legacy_pe_subproof does not appear in the environment."
Please report at http://coq.inria.fr/bugs/.

File "./theories/FSets/FMapAVL.v", line 1946, characters 8-65:
Error: Anomaly "in econstr: grounding a non evar-free term"
Please report at http://coq.inria.fr/bugs/.

File "./theories/MSets/MSetList.v", line 893, characters 4-33:
Error: Anomaly "in retyping: variable b unbound."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Numbers/Cyclic/Int31/Cyclic31.v", line 2252, characters 1-34:
Error: Stack overflow.

File "./theories/Logic/ExtensionalityFacts.v", line 131, characters 2-17:
Error: Anomaly "in econstr: grounding a non evar-free term"
Please report at http://coq.inria.fr/bugs/.

File "./theories/Lists/Streams.v", line 167, characters 0-31:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intro p; only 1: intro; only 1: coinduction ltac:(Eq_sym); only 1: auto).
Typing error:
Recursive definition of Eq_sym is ill-formed.
In environment
A : Type
P, Inv : Stream -> Prop
InvThenP : forall x : Stream, Inv x -> P x
InvIsStable : forall x : Stream, Inv x -> Inv (tl x)
p : Stream
H : Inv p
Eq_sym : ForAll p
Invalid recursive call in the argument of "match" in "match Eq_sym with
                                                 | HereAndFurther x x0 =>
                                                 (fun 
                                                 (_ : P p)
                                                 (H : ForAll (tl p)) => H) x
                                                 x0
                                                 end".
Recursive definition is: "HereAndFurther (InvThenP H)
                            (let H0 : ForAll (tl p) :=
                               match Eq_sym with
                               | HereAndFurther x x0 =>
                                   (fun (_ : P p) (H : ForAll (tl p)) => H) x
                                     x0
                               end in
                             H0)"."
Please report at http://coq.inria.fr/bugs/.

