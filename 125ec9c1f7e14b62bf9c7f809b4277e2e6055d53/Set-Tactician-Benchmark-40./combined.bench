coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Conjunction.proj1	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Conjunction.proj2	40	0.0	synth with cache (only 1: destruct 1; only 1: trivial).	0.003934	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Equivalence.iff_refl	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Equivalence.iff_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Equivalence.iff_sym	40	2.0.1.1.0.0.0.0	synth with cache (only 1: intros B; only 1: intros C; only 1: intros _tmp_tactician2; only 1: destruct _tmp_tactician2 as [H3 H4]; only 1: split; only 1: auto; only 1: intros _tmp_tactician2; only 1: auto).	0.009830	18
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_iff_compat_l	40	2.0.2.2.2.0.2.0.1.0.0.0.0.1.0	synth with cache (only 1: intros A; only 1: intros C; only 1: intros B; only 1: intros _tmp_tactician2; only 1: destruct _tmp_tactician2 as [H3 H4]; only 1: split; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: split; only 1: trivial; only 1: auto; only 1: destruct 1; only 1: split; only 1: trivial; only 1: auto).	0.022068	59
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_iff_compat_r	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros ?; only 1: intros ?; only 1: intros ?; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [Hl Hr]; only 1: split; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [? ?]; only 1: split; only 1: apply Hl; only 1: assumption; only 1: assumption; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [? ?]; only 1: split; only 1: apply Hr; only 1: assumption; only 1: assumption).	0.026705	18
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic_Type.identity_is_a_congruence.identity_sym	40	1.0	synth with cache (only 1: destruct 1; only 1: trivial).	0.013611	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic_Type.identity_is_a_congruence.identity_trans	40	0.0	synth with cache (only 1: destruct 2; only 1: trivial).	0.014086	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic_Type.identity_is_a_congruence.identity_congr	40	0.0	synth with cache (only 1: destruct 1; only 1: trivial).	0.012424	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic_Type.identity_is_a_congruence.not_identity_sym	40	0.0.0.1.0.1	synth with cache (only 1: red; only 1: intros h1; only 1: intros h2; only 1: apply h1; only 1: destruct h2; only 1: trivial).	0.040416	105
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic_Type.identity_ind_r	40	1.28.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H0; only 1: destruct H0 in H; only 1: assumption).	0.034636	37
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic_Type.identity_rec_r	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H0; only 1: case identity_sym with (1 := H0); only 1: trivial).	0.034419	8
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic_Type.identity_rect_r	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H0; only 1: case identity_sym with (1 := H0); only 1: trivial).	0.036446	8
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Dependent_Equality.eq_dep_sym	40	1.0.1.0.0.1	synth with cache (only 1: intros _tmp_tactician0; only 1: intros x; only 1: intros H; only 1: intros y; only 1: destruct 1; only 1: reflexivity).	0.045247	9
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Dependent_Equality.eq_dep_trans	40	0.0.0	synth with cache (only 1: destruct 1; only 1: intros H2; only 1: auto).	0.037573	3
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Dependent_Equality.eq_dep1_dep	40	0.59.0	synth with cache (only 1: destruct 1; only 1: subst; only 1: auto).	0.083405	350
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Dependent_Equality.eq_dep_dep1	40	2.31.0	synth with cache (only 1: destruct 1; only 1: exists eq_refl; only 1: reflexivity).	0.045613	36
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_iff_compat_l	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.pred_Sn	40	2	synth with cache (only 1: reflexivity).	0.005688	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.imp_iff_compat_l	40	3.0.0.0.1.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros ?; only 1: intros ?; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [Hl Hr]; only 1: split; only 1: intros _tmp_tactician0; only 1: auto; only 1: intros _tmp_tactician0; only 1: auto).	0.018762	14
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig_eta	40	0.0	synth with cache (only 1: destruct p; only 1: reflexivity).	0.021122	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.O_S	40	57.25.2.3	synth with cache (only 1: red; only 1: intros h1; only 1: intros H; only 1: inversion_clear H).	0.084316	912
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT2_eta	40	0.1	synth with cache (only 1: destruct p; only 1: reflexivity).	0.021986	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig2_eta	40	0.0	synth with cache (only 1: destruct p; only 1: reflexivity).	0.023305	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.exists_to_inhabited_sig	40	0.0.6.7.0	synth with cache (only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as (x, _tmp_tactician4); only 1: split; only 1: exists x; only 1: trivial).	0.050814	237
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.inhabited_sig_to_exists	40	0.0.3.67.0	synth with cache (only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [_tmp_tactician2 ?]; only 1: destruct _tmp_tactician2 as (x, Hx); only 1: exists x; only 1: trivial).	0.068760	349
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_existT_uncurried	40	0.1.0.0	synth with cache (only 1: destruct pq as [p q]; only 1: destruct q; only 1: destruct p; only 1: reflexivity).	0.033293	5
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.leb_refl	40	0	synth with cache (only 1: destr_bool).	0.032555	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Sumbool.sumbool_of_bool	40	23.26.7.11	synth with cache (only 1: intros until b; only 1: destruct b; only 1: auto; only 1: auto).	0.050815	71
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrunder.Under_rel.Under_rel_from_rel	40	0.0	synth with cache (only 1: intros; only 1: trivial).	0.033766	2
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_sym	40	2.2.2.0.0.1	synth with cache (only 1: intros A; only 1: intros y; only 1: intros z; only 1: intros B; only 1: destruct 1; only 1: trivial).	0.049342	13
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.diff_true_false	40	2	synth with cache (only 1: discriminate).	0.030257	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.diff_false_true	40	0	synth with cache (only 1: discriminate).	0.032013	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.equal_f	40	0.0.0	synth with cache (only 1: intros; only 1: destruct H; only 1: trivial).	0.037578	3
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_True	40	10.0.0	synth with cache (only 1: unfold decidable; only 1: unfold not; only 1: auto).	0.035730	13
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_trans	40	1.0.4	synth with cache (only 1: intros; only 1: destruct H; only 1: trivial).	0.038370	8
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Transitive_Closure.Wf_Transitive_Closure.incl_clos_trans	40	0.37.1.1.9	synth with cache (only 1: intros x''; only 1: intros y; only 1: intros H0; only 1: constructor; only 1: trivial).	0.050369	53
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rstar_reflexive	40	3.0.0.1	synth with cache (only 1: intros U; only 1: intros R'; only 1: intros H'0; only 1: auto  10 with sets).	0.045385	8
coq-tactician-stdlib.8.11.dev	Coq.Program.Combinators.compose_id_left	40	3.0	synth with cache (only 1: intros A; only 1: auto).	0.034315	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.BoolEq.Bool_eq_dec.beq_eq_true	40	1.4.0	synth with cache (only 1: destr_bool; only 1: destruct H; only 1: auto).	0.045699	8
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.Rsym_imp_notRsym	40	16.6.0.2.6.1.1.0	synth with cache (only 1: intros ?; only 1: intros ?; only 1: intros x; only 1: intros p; only 1: intros y; only 1: intros H0; only 1: intros H'; only 1: auto).	0.065893	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.unfold_Stream	40	0.40.10	synth with cache (only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as (_tmp_tactician2, Huni); only 1: reflexivity).	0.103546	553
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrunder.Under_rel.Under_relE	40	0	synth with cache (only 1: trivial).	0.036879	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_dep_eq_sigT	40	4.1.2.8.9.0	synth with cache (only 1: intros; only 1: apply eq_existT_uncurried; only 1: rewrite H; only 1: exists eq_refl; only 1: simpl; only 1: trivial).	0.078896	30
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_False	40	0.0	synth with cache (only 1: unfold decidable; only 1: auto).	0.035398	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rplus_contains_R	40	0	synth with cache (only 1: auto with sets).	0.019786	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Sumbool.bool_eq_rec	40	0.0.2.2.1	synth with cache (only 1: intros H; only 1: intros P; only 1: destruct H; only 1: auto; only 1: auto).	0.053416	10
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.equal_f_dep	40	0.0.0	synth with cache (only 1: intros; only 1: rewrite H; only 1: auto).	0.044330	3
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Extension	40	1.5.0.0.0.45.0.0.39.0.1.1	synth with cache (only 1: intros A; only 1: intros y; only 1: intros H0; only 1: split; only 1: intros h2; only 1: intros H2; only 1: subst; only 1: trivial; only 1: intros h2; only 1: intros H2; only 1: elim eq_sym with (1 := H0); only 1: trivial).	0.119148	296
coq-tactician-stdlib.8.11.dev	Coq.micromega.ZifyClasses.mkapp2	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.incl_right	40	0.0.0.0.0.0.0	synth with cache (only 1: unfold incl; only 1: intros s1; only 1: intros s2; only 1: intros E; only 1: intros a; only 1: elim (E a); only 1: auto).	0.068198	7
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.not_true_is_false	40	0.11.0	synth with cache (only 1: destr_bool; only 1: destruct H; only 1: split).	0.045800	14
coq-tactician-stdlib.8.11.dev	Coq.Bool.IfProp.Iftrue_inv	40	0.50.0.0	synth with cache (only 1: intros; only 1: subst; only 1: inversion_clear H; only 1: assumption).	0.096905	230
coq-tactician-stdlib.8.11.dev	Coq.Program.Combinators.compose_id_right	40	0.0	synth with cache (only 1: intros; only 1: reflexivity).	0.036739	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrunder.Under_rel.over_rel	40	0	synth with cache (only 1: trivial).	0.020420	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_rec	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H'; only 1: case JMeq_eq with (1 := H'); only 1: trivial).	0.068295	8
coq-tactician-stdlib.8.11.dev	Coq.Program.Combinators.compose_assoc	40	0.4.4	synth with cache (only 1: intros A; only 1: intros; only 1: reflexivity).	0.031516	11
coq-tactician-stdlib.8.11.dev	Coq.Bool.Sumbool.bool_eq_ind	40	0.0.0.0	synth with cache (only 1: intros until b; only 1: destruct b; only 1: auto; only 1: auto).	0.047187	4
coq-tactician-stdlib.8.11.dev	Coq.micromega.ZifyClasses.mkapp	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.seq_refl	40	1.1.1	synth with cache (only 1: intros s2; only 1: intros E; only 1: auto).	0.038364	6
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.not_false_is_true	40	0.0	synth with cache (only 1: destr_bool; only 1: intuition).	0.043114	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrunder.Under_rel.over_rel_done	40	0	synth with cache (only 1: trivial).	0.036247	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.IfProp.Iffalse_inv	40	0.0.0.0.0.0	synth with cache (only 1: destruct 1; only 1: intros; only 1: case diff_true_false; only 1: auto with bool; only 1: intros; only 1: auto with bool).	0.061525	6
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sigT_iff_eq_dep	40	0.6.0.0.13.11.0	synth with cache (only 1: intros; only 1: split; only 1: intros; only 1: dependent rewrite H; only 1: apply eq_dep_intro; only 1: destruct 1; only 1: reflexivity).	0.105895	153
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_rect	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H'; only 1: case JMeq_eq with (1 := H'); only 1: trivial).	0.070779	8
coq-tactician-stdlib.8.11.dev	Coq.Program.Combinators.flip_flip	40	0.0	synth with cache (only 1: intros; only 1: reflexivity).	0.036211	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Noone_in_empty	40	70.7.3.2	synth with cache (only 1: intros C; only 1: unfold not; only 1: intros; only 1: inversion_clear H).	0.108319	491
coq-tactician-stdlib.8.11.dev	Coq.micromega.ZifyClasses.mkapp0	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrunder.Under_rel.under_rel_done	40	0	synth with cache (only 1: easy).	0.033541	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.not_true_iff_false	40	0.0.0.2.3.0.0.1.0	synth with cache (only 1: destr_bool; only 1: split; only 1: intros _tmp_tactician0; only 1: intuition; only 1: destr_bool; only 1: split; only 1: intros h1; only 1: intuition; only 1: destr_bool).	0.079720	15
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Included_Empty	40	0	synth with cache (only 1: destruct 1).	0.028964	1
coq-tactician-stdlib.8.11.dev	Coq.Program.Combinators.prod_uncurry_curry	40	0.0	synth with cache (only 1: intros; only 1: reflexivity).	0.039915	2
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sig_eq_dep	40	0.0.0	synth with cache (only 1: intros; only 1: dependent rewrite H; only 1: apply eq_dep_intro).	0.046834	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.not_false_iff_true	40	0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition).	0.053620	3
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_dep_eq_sig	40	3.1.2.9.7.0	synth with cache (only 1: intros; only 1: apply eq_exist_uncurried; only 1: rewrite H; only 1: exists eq_refl; only 1: simpl; only 1: auto using eq_sigT_eq_dep, eq_dep_eq_sigT).	0.063874	28
coq-tactician-stdlib.8.11.dev	Coq.micromega.ZifyClasses.mkrel	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sig_iff_eq_dep	40	0.12.0.0.16.0	synth with cache (only 1: split; only 1: intros; only 1: dependent rewrite H; only 1: apply eq_dep_intro; only 1: destruct 1; only 1: reflexivity).	0.108982	151
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sigT_sig_eq	40	0.0.6.8.1.6.4.2.1.0.0	synth with cache (only 1: split; only 1: intros ?; only 1: dependent rewrite H; only 1: exists eq_refl; only 1: reflexivity; only 1: intros ?; only 1: apply eq_existT_uncurried; only 1: destruct H; only 1: subst; only 1: exists eq_refl; only 1: reflexivity).	0.191517	39
coq-tactician-stdlib.8.11.dev	Coq.Init.Byte.of_bits_to_bits	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: destruct b; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: reflexivity; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: reflexivity; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: reflexivity; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: reflexivity; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: reflexivity; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: reflexivity; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial; only 1: trivial).	1.129723	257
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sigT_fst	40	0.0.0.4.2.1.1.1.1.1.0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.0.1.1.1.2.2.2.0.0.0	synth with cache (only 1: intros; only 1: change x2 with (projT1 (existT P x2 H2)); only 1: change x2 with (projT1 (existT P x2 H2)); only 1: change x2 with (projT1 (existT P x2 H2)); only 1: change x2 with (projT1 (existT P x2 H2)); only 1: change x2 with (projT1 (existT P x2 H2)); only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change x2 with (projT1 (existT P x2 H2)); only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: change H2 with (projT2 (existT P x2 H2))  at 5; only 1: dependent rewrite H; only 1: simpl; only 1: change x2 with (projT1 (existT P x2 H2)); only 1: destruct H; only 1: split).	0.499238	73
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eq_true_false_abs	40	52.2.2.21.0.0	synth with cache (only 1: intros until b; only 1: intros H; only 1: destruct b; only 1: discriminate; only 1: intros h2; only 1: inversion_clear H).	1.397598	9280
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_subst	40	3.1.0	synth with cache (only 1: intros H; only 1: intros z; only 1: destr_bool).	0.045967	7
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_reflx	40	0	synth with cache (only 1: destr_bool).	0.033514	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_prop	40	0	synth with cache (only 1: destr_bool).	0.034560	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_true_iff	40	0.0.0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition; only 1: intuition).	0.057328	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_false_iff	40	0.0.0.0.1	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition; only 1: intuition).	0.098299	6
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_orb	40	0.0.5.2.5.0.0.0.0	synth with cache (only 1: intros until b2; only 1: destruct b2; only 1: destruct b1; only 1: intuition; only 1: split; only 1: destruct b1; only 1: split; only 1: simpl; only 1: split).	0.066196	21
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_andb	40	0	synth with cache (only 1: destr_bool).	0.034150	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_involutive	40	2	synth with cache (only 1: destr_bool).	0.023992	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_involutive_reverse	40	0	synth with cache (only 1: destr_bool).	0.033387	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_sym	40	0	synth with cache (only 1: destr_bool).	0.038463	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.no_fixpoint_negb	40	0	synth with cache (only 1: destr_bool).	0.034091	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.not_iff_compat	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros ?; only 1: intros B; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: split; only 1: auto; only 1: intros _tmp_tactician2; only 1: auto).	0.030755	8
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_negb1	40	0	synth with cache (only 1: destr_bool).	0.032868	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.neg_false	40	9.2.1.1.17.0.0.1.5.0	synth with cache (only 1: intros ?; only 1: split; only 1: intros _tmp_tactician0; only 1: split; only 1: auto; only 1: destruct 1; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: intros _tmp_tactician2; only 1: auto).	0.051152	100
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_existT_curried	40	0.1.0	synth with cache (only 1: destruct q; only 1: destruct p; only 1: reflexivity).	0.017213	4
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_comm	40	0.0.0.1.0.0.0.1.0.0.0	synth with cache (only 1: intros ?; only 1: intros _tmp_tactician0; only 1: split; only 1: destruct 1; only 1: split; only 1: trivial; only 1: trivial; only 1: destruct 1; only 1: split; only 1: trivial; only 1: trivial).	0.029529	13
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_negb2	40	0	synth with cache (only 1: destr_bool).	0.033718	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_existT_curried_map	40	0.5.3.0	synth with cache (only 1: destruct q; only 1: simpl in *; only 1: destruct p; only 1: reflexivity).	0.032521	12
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_assoc	40	23.12.2.1.2.0.0.1.17.2.11.1.0.0.0.0.0	synth with cache (only 1: intros ?; only 1: intros; only 1: split; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [Hl Hr]; only 1: split; only 1: apply Hl; only 1: split; only 1: apply Hl; only 1: assumption; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [HypL HypR]; only 1: split; only 1: split; only 1: trivial; only 1: apply HypR; only 1: apply HypR).	0.062919	89
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_cancel_r	40	7.9.9.1.7.9.1.0.2.0.20.1.0.20.5.1.0.2.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros B; only 1: intros C; only 1: intros Hl; only 1: intros Hr; only 1: split; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [HypL HypR]; only 1: split; only 1: intros; only 1: apply HypL; only 1: split; only 1: assumption; only 1: apply Hl; only 1: assumption; only 1: intros; only 1: apply HypR; only 1: split; only 1: assumption; only 1: apply Hr; only 1: assumption; only 1: intros _tmp_tactician0; only 1: split; only 1: intros _tmp_tactician2; only 1: destruct _tmp_tactician0 as [? ?]; only 1: split; only 1: apply H; only 1: destruct _tmp_tactician2 as [H3 H4]; only 1: assumption; only 1: apply Hl; only 1: destruct _tmp_tactician2 as [H3 H4]; only 1: assumption; only 1: intros _tmp_tactician2; only 1: destruct _tmp_tactician0 as [? ?]; only 1: split; only 1: destruct _tmp_tactician2 as [H3 H4]; only 1: auto; only 1: apply Hr; only 1: apply H; only 1: destruct _tmp_tactician2 as [H3 H4]; only 1: auto).	0.151707	137
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Add_intro2	40	0.0	synth with cache (only 1: unfold Add at 1; only 1: auto with sets).	0.017640	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.if_negb	40	0	synth with cache (only 1: destr_bool).	0.035228	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_true_iff	40	0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition).	0.046421	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_false_iff	40	0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition).	0.022010	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_comm	40	0.0.0.1.0.0.0.0.0.1.0.0.0.0	synth with cache (only 1: intros; only 1: split; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [?| ?]; only 1: right; only 1: trivial; only 1: left; only 1: trivial; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [?| ?]; only 1: right; only 1: trivial; only 1: left; only 1: trivial).	0.070218	93
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_true_iff	40	0.1.1.1.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition; only 1: intuition).	0.048500	8
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_false_iff	40	0.0.0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition; only 1: intuition).	0.066347	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_true_elim	40	0.0.0.1	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition).	0.029479	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_prop	40	0.0.0.0.0.1	synth with cache (only 1: intros until a; only 1: destruct a; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.042859	7
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_false_intro	40	0	synth with cache (only 1: destr_bool).	0.035626	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_true_intro	40	2.0.0.2.1.0.0.0.2.1.0.2.0.0.0.0.0.0	synth with cache (only 1: intros until b1; only 1: destruct b1; only 1: intros until b2; only 1: destruct b2; only 1: simpl; only 1: intros _tmp_tactician0; only 1: split; only 1: simpl; only 1: intros _tmp_tactician0; only 1: split; only 1: intros until b2; only 1: destruct b2; only 1: simpl; only 1: intros _tmp_tactician0; only 1: split; only 1: simpl; only 1: intros _tmp_tactician0; only 1: intuition).	0.113674	28
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_and	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.061419	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_diag	40	0	synth with cache (only 1: destr_bool).	0.032418	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_not	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.040526	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_true_r	40	0	synth with cache (only 1: destr_bool).	0.033677	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_imp	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.049980	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_true_l	40	0	synth with cache (only 1: destr_bool).	0.033299	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_false_r	40	1	synth with cache (only 1: destr_bool).	0.030504	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_false_l	40	0	synth with cache (only 1: destr_bool).	0.030575	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_negb_r	40	1	synth with cache (only 1: destr_bool).	0.030629	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_comm	40	0	synth with cache (only 1: destr_bool).	0.032197	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_assoc	40	0.2.1.0	synth with cache (only 1: intros; only 1: destruct b1; only 1: trivial; only 1: reflexivity).	0.043250	7
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.iff_and	40	0.0.2.0.0.0.0	synth with cache (only 1: intros ?; only 1: intros C; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: split; only 1: auto; only 1: auto).	0.021054	9
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_iff	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.064160	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.iff_to_and	40	0.3.0.3.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros ?; only 1: intros B; only 1: split; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as []; only 1: split; only 1: trivial; only 1: trivial; only 1: intros _tmp_tactician0; only 1: split; only 1: destruct _tmp_tactician0 as [? ?]; only 1: trivial; only 1: destruct _tmp_tactician0 as [? ?]; only 1: trivial).	0.040931	20
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_true_iff	40	0.0.0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition; only 1: intuition).	0.068851	5
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.universal_quantification.inst	40	23.2.0	synth with cache (only 1: intros B; only 1: intros _tmp_tactician0; only 1: auto).	0.025762	28
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_false_iff	40	0.0.0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition; only 1: intuition).	0.069592	5
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.universal_quantification.gen	40	0.0	synth with cache (only 1: unfold all; only 1: auto).	0.011906	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_false_intro2	40	0.0.0	synth with cache (only 1: intros; only 1: apply andb_false_iff; only 1: auto).	0.040015	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.absurd	40	2.3.5.2.1.0.2	synth with cache (only 1: intros A; only 1: unfold not; only 1: intros _tmp_tactician0; only 1: intros H; only 1: intros H1; only 1: elim H1; only 1: assumption).	0.018479	22
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_false_r	40	1	synth with cache (only 1: destr_bool).	0.031403	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.eq_sym	40	1.12.2	synth with cache (only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: trivial).	0.027127	18
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.eq_trans	40	0.0.0	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: trivial).	0.013979	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_false_intro1	40	0.0.0.0.0.0.0.0.2.0.0.0.0	synth with cache (only 1: intros until b1; only 1: destruct b1; only 1: intros until b2; only 1: destruct b2; only 1: simpl; only 1: intuition; only 1: simpl; only 1: intuition; only 1: intros until b2; only 1: destruct b2; only 1: simpl; only 1: split; only 1: split).	0.078743	15
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.seq_sym	40	0.0.0.0.0.1	synth with cache (only 1: intros s1; only 1: intros s2; only 1: intros E; only 1: intros a; only 1: elim (E a); only 1: auto).	0.023029	7
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_not	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.035999	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_true_eq	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros until a; only 1: destruct a; only 1: intros until b; only 1: destruct b; only 1: split; only 1: split; only 1: split; only 1: split; only 1: split; only 1: assumption; only 1: intros until b; only 1: destruct b; only 1: split; only 1: assumption; only 1: split; only 1: split; only 1: assumption; only 1: assumption).	0.106521	18
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.eq_trans_r	40	0.0	synth with cache (only 1: destruct 2; only 1: trivial).	0.013105	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.union_empty_left	40	0.0.0.0	synth with cache (only 1: intros until x; only 1: destruct x; only 1: unfold seq; only 1: auto).	0.016810	4
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_false_l	40	0	synth with cache (only 1: destr_bool).	0.030839	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.f_equal	40	0.0	synth with cache (only 1: destruct 1; only 1: trivial).	0.025259	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.equality.not_eq_sym	40	43.1	synth with cache (only 1: destruct 2; only 1: auto).	0.023485	90
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_diag	40	0	synth with cache (only 1: destr_bool).	0.030849	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.union_empty_right	40	18.1.3.0.0.0	synth with cache (only 1: unfold seq; only 1: unfold union; only 1: simpl; only 1: intros s2; only 1: intros a; only 1: intuition).	0.028858	28
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_or	40	0	synth with cache (only 1: tauto).	0.035007	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_true_r	40	1	synth with cache (only 1: destr_bool).	0.034544	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_sind_r	40	0.2.1.0.1.0.0	synth with cache (only 1: intros A; only 1: intros ?; only 1: intros B; only 1: intros C; only 1: intros h2; only 1: destruct 1; only 1: trivial).	0.024544	11
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_true_l	40	0	synth with cache (only 1: destr_bool).	0.033116	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.union_comm	40	17.7.3.0.0.1	synth with cache (only 1: intros s1; only 1: intros s2; only 1: intros E; only 1: unfold union; only 1: simpl; only 1: intuition).	0.027341	34
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_false_elim	40	0.1.13.0	synth with cache (only 1: intros; only 1: destruct b1; only 1: auto; only 1: auto).	0.057640	18
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_ind_r	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H0; only 1: elim eq_sym with (1 := H0); only 1: assumption).	0.040566	8
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_rec_r	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H0; only 1: elim eq_sym with (1 := H0); only 1: assumption).	0.026127	8
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_negb_r	40	0	synth with cache (only 1: destr_bool).	0.031924	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_assoc	40	0	synth with cache (only 1: destr_bool).	0.009220	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Proper.eq_proper_proxy	40	1	synth with cache (only 1: reflexivity).	0.028960	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_comm	40	0	synth with cache (only 1: destr_bool).	0.033508	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_and	40	0.0.1	synth with cache (only 1: intros A; only 1: unfold decidable; only 1: tauto).	0.046907	4
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_orb_distrib_r	40	0	synth with cache (only 1: destr_bool).	0.009861	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.Logic_lemmas.eq_rect_r	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H0; only 1: elim eq_sym with (1 := H0); only 1: assumption).	0.027800	8
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_imp	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.021834	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_orb_distrib_l	40	0	synth with cache (only 1: destr_bool).	0.009983	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.union_ass	40	4.5.14.0.2.2.3.2.1.1.0.0.0.1	synth with cache (only 1: unfold seq; only 1: unfold charac; only 1: intros until x; only 1: unfold union; only 1: destruct x; only 1: intros until y; only 1: destruct y; only 1: intros until z; only 1: destruct z; only 1: simpl; only 1: intros; only 1: destruct b; only 1: auto; only 1: auto).	0.091897	49
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Proper.eq_proper_proxy	40	1	synth with cache (only 1: reflexivity).	0.030269	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_andb_distrib_r	40	0	synth with cache (only 1: destr_bool).	0.010421	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.EqdepDec.trans_sym_eq	40	0.84.3.0	synth with cache (only 1: intros y; only 1: intros; only 1: subst; only 1: reflexivity).	0.049412	91
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.complement_inverse	40	1	synth with cache (only 1: trivial).	0.035145	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.equality_dep2.f_equal_dep2	40	1.0.2	synth with cache (only 1: destruct 1; only 1: destruct H; only 1: reflexivity).	0.017553	6
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.imp_simp	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.015870	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.equality_dep.f_equal_dep	40	0.6.2	synth with cache (only 1: intros h2; only 1: destruct h2; only 1: trivial).	0.040421	73
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Proper.reflexive_proper_proxy	40	1	synth with cache (only 1: firstorder).	0.031457	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.complement_inverse	40	3	synth with cache (only 1: reflexivity).	0.030864	4
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Proper.reflexive_proper_proxy	40	1	synth with cache (only 1: firstorder).	0.030473	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_andb_distrib_l	40	0	synth with cache (only 1: destr_bool).	0.010240	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Proper.proper_proper_proxy	40	0	synth with cache (only 1: firstorder).	0.028192	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Proper.proper_proper_proxy	40	0	synth with cache (only 1: firstorder).	0.029538	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrsetoid.compat_Reflexive	40	0.0.0	synth with cache (only 1: intros A; only 1: intros Hx'; only 1: tauto).	0.038896	3
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.JMeq_eq_refl	40	2	synth with cache (only 1: apply UIP).	0.032308	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.absorption_orb	40	0	synth with cache (only 1: destr_bool).	0.006859	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_opp_r	40	1.1.0	synth with cache (only 1: intros until H; only 1: destruct H; only 1: reflexivity).	0.017066	5
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Empty_set_minimal	40	27.30.1.0.0.0.0	synth with cache (only 1: intros C; only 1: red; only 1: intros R'; only 1: intros H'; only 1: red; only 1: apply False_rec; only 1: destruct H').	0.061388	65
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_false_r	40	0	synth with cache (only 1: destr_bool).	0.006245	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_iff	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.039793	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.subrelation_respectful	40	0	synth with cache (only 1: firstorder).	0.017079	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.subrelation_id_proper	40	2	synth with cache (only 1: firstorder).	0.022395	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.absorption_andb	40	0	synth with cache (only 1: destr_bool).	0.035048	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_true_r	40	0	synth with cache (only 1: destr_bool).	0.006852	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_opp_l	40	0.0.0	synth with cache (only 1: intros; only 1: destruct H; only 1: reflexivity).	0.016574	3
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.UIP_refl_refl	40	17	synth with cache (only 1: apply UIP).	0.011699	18
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Empty_set_zero	40	19.0	synth with cache (only 1: intros X; only 1: auto  6 with sets).	0.049424	21
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_true_l	40	0	synth with cache (only 1: reflexivity).	0.006202	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_false_l	40	0	synth with cache (only 1: destr_bool).	0.030392	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.seq_left	40	0.1.1.2.0.2.1.0.1.0	synth with cache (only 1: unfold seq; only 1: intros until y; only 1: destruct x; only 1: destruct y; only 1: intros until z; only 1: simpl; only 1: destruct z; only 1: intros; only 1: rewrite H; only 1: auto).	0.082227	18
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Empty_set_zero_right	40	0	synth with cache (only 1: auto  6 with sets).	0.039889	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_nilpotent	40	0	synth with cache (only 1: destr_bool).	0.006368	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.master_key	40	0	synth with cache (only 1: tauto).	0.024913	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.pointwise_pointwise	40	0.1.0.1.1.9.3.1.2.5	synth with cache (only 1: hnf; only 1: split; only 1: intros H0; only 1: red in H0; only 1: intros y; only 1: intros x''; only 1: destruct 1; only 1: firstorder; only 1: intros H0; only 1: firstorder).	0.082690	33
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.inj_pairT2_refl	40	10	synth with cache (only 1: apply UIP).	0.020971	11
coq-tactician-stdlib.8.11.dev	Coq.Classes.CEquivalence.equiv_transitive_obligation_1	40	3.4.5.0.0.0.0.0.0.0.0	synth with cache (only 1: intros B; only 1: intros R2; only 1: intros A; only 1: intros x; only 1: intros y; only 1: intros z; only 1: intros _tmp_tactician0; only 1: intros _tmp_tactician2; only 1: transitivity y; only 1: auto; only 1: auto).	0.085311	23
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_comm	40	0	synth with cache (only 1: destr_bool).	0.007302	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.subrelation_symmetric	40	0	synth with cache (only 1: firstorder).	0.030968	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.ExtensionalEquality.fsym	40	0.0	synth with cache (only 1: intros _tmp_tactician2; only 1: by [  ]).	0.018464	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal3	40	0.0.0.1	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: reflexivity).	0.018057	5
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.ExtensionalEquality.frefl	40	0	synth with cache (only 1: split).	0.030818	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.subrelation_refl	40	1.0.0	synth with cache (only 1: hnf; only 1: intros; only 1: assumption).	0.014823	4
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_assoc_reverse	40	0	synth with cache (only 1: destr_bool).	0.009653	1
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.solution_left	40	1.0.0.0.0	synth with cache (only 1: intros H; only 1: intros y; only 1: intros H0; only 1: elim eq_sym with (1 := H0); only 1: assumption).	0.033044	6
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.pointwise_pointwise	40	2.2.1.3.6.6.7.2.26.3.3.0	synth with cache (only 1: hnf; only 1: intros; only 1: hnf; only 1: split; only 1: intros H0; only 1: intros h2; only 1: firstorder; only 1: destruct H; only 1: firstorder; only 1: intros H0; only 1: intros h2; only 1: firstorder).	0.101285	152
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.subrelation_id_proper	40	2	synth with cache (only 1: apply H).	0.030251	3
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.subrelation_symmetric	40	0	synth with cache (only 1: firstorder).	0.035884	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_true_iff	40	10.1.0.3.3.0.2	synth with cache (only 1: split; only 1: intros H; only 1: apply H; only 1: split; only 1: intros _tmp_tactician0; only 1: intros H1; only 1: trivial).	0.022318	26
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.unitE	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal4	40	0.0.0.0.0	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: reflexivity).	0.025834	5
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.less_than_empty	40	0	synth with cache (only 1: auto with sets).	0.038984	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal2	40	2.1.4.0.0.0.0.0.1.1	synth with cache (only 1: intros A; only 1: intros B; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H0; only 1: destruct 1; only 1: destruct 1; only 1: trivial).	0.070779	76
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_false_iff	40	0	synth with cache (only 1: tauto).	0.007811	1
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.solution_right	40	2.0.0	synth with cache (only 1: intros; only 1: subst; only 1: assumption).	0.018073	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_move_l_r_1	40	9.5.7.4.0	synth with cache (only 1: intros; only 1: subst; only 1: destruct b; only 1: destr_bool; only 1: destr_bool).	0.021271	30
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Clos_Refl_Sym_Trans.clos_r_clos_rt	40	0.0.0.0	synth with cache (only 1: red; only 1: induction 1; only 1: auto with sets; only 1: auto with sets).	0.034559	4
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.subrelation_proper	40	0	synth with cache (only 1: firstorder).	0.032373	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_eq	40	0	synth with cache (only 1: destr_bool).	0.034053	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.ExtensionalEquality.rrefl	40	0	synth with cache (only 1: split).	0.008564	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.subrelation_respectful	40	0	synth with cache (only 1: firstorder).	0.035750	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Equivalence.equiv_transitive_obligation_1	40	0.0.0.6.1.1.0.0.1.0.0.0	synth with cache (only 1: intros B; only 1: intros R2; only 1: intros R'; only 1: intros x; only 1: intros y; only 1: intros z; only 1: intros H1; only 1: intros _tmp_tactician2; only 1: simpl_relation; only 1: transitivity y; only 1: auto; only 1: auto).	0.094231	21
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.deletion	40	3.0	synth with cache (only 1: intros y; only 1: trivial).	0.016327	5
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.flip.flip_Reflexive	40	3.2.0.0	synth with cache (only 1: hnf; only 1: intros x; only 1: hnf; only 1: firstorder).	0.040741	9
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.contrapositive	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.016133	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.proper_subrelation_proper	40	4.1.3.2	synth with cache (only 1: unfold subrelation in *; only 1: reduce; only 1: subst; only 1: firstorder).	0.047732	14
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_move_r_l_1	40	0	synth with cache (only 1: destr_bool).	0.010360	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal5	40	0.0.0.0.0.0	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: destruct 1; only 1: reflexivity).	0.026519	6
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.seq_right	40	0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: unfold seq; only 1: unfold union; only 1: unfold charac; only 1: intros until x; only 1: destruct x; only 1: intros until y; only 1: destruct y; only 1: intros until z; only 1: destruct z; only 1: intros; only 1: elim H; only 1: auto).	0.088664	12
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.pointwise_subrelation	40	1.0.0	synth with cache (only 1: unfold subrelation in *; only 1: intros; only 1: firstorder).	0.029751	4
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_not_iff	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.041876	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Relations.forall_subrelation	40	1	synth with cache (only 1: firstorder).	0.028156	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_move_l_r_2	40	0	synth with cache (only 1: destr_bool).	0.041597	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.or_not_l_iff_1	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.015370	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Union_commutative	40	0	synth with cache (only 1: auto with sets).	0.030829	1
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.simplification_heq	40	0.2.6.1.1	synth with cache (only 1: intros H; only 1: intros H'; only 1: subst; only 1: apply H; only 1: trivial).	0.043078	15
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.subrelation_refl	40	0.0.0.0	synth with cache (only 1: hnf; only 1: intros x; only 1: intros y; only 1: simpl_crelation).	0.038489	4
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Inclusion_is_an_order	40	0.0.0.12	synth with cache (only 1: constructor; only 1: auto with sets; only 1: auto with sets; only 1: auto with sets).	0.075401	16
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.iff_impl_subrelation	40	2.1.0.0.0.0	synth with cache (only 1: hnf; only 1: intros A; only 1: intros B; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: trivial).	0.020672	9
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.subrelation_proper	40	0	synth with cache (only 1: firstorder).	0.032413	1
coq-tactician-stdlib.8.11.dev	Coq.Setoids.Setoid.Seq_refl	40	0	synth with cache (only 1: firstorder).	0.033195	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.flip.flip_Reflexive	40	2.0.0.0	synth with cache (only 1: hnf; only 1: intros; only 1: hnf; only 1: firstorder).	0.046484	6
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_move_r_l_2	40	0	synth with cache (only 1: destr_bool).	0.047636	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.not_locked_false_eq_true	40	0.4	synth with cache (only 1: unlock; only 1: easy).	0.083480	110
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.all_tag2	40	0	synth with cache (only 1: by move  =>fP; exists (fun x => tag (fP x)) => x; case : (fP x) ).	0.021359	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.flip.flip_Antisymmetric	40	3.3.2.0.0.1.1	synth with cache (only 1: hnf; only 1: intros x; only 1: intros y; only 1: intros; only 1: apply H; only 1: trivial; only 1: trivial).	0.058584	17
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.simplification_existT2	40	0.0.0.5.4.1	synth with cache (only 1: intros H; only 1: intros J; only 1: apply H; only 1: apply eq_dep_eq; only 1: apply eq_sigT_eq_dep; only 1: assumption).	0.094207	462
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.or_not_l_iff_2	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.062646	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.proper_subrelation_proper_arrow	40	0	synth with cache (only 1: simpl_crelation).	0.040617	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.iff_flip_impl_subrelation	40	0.2.2.0.0.0	synth with cache (only 1: hnf; only 1: intros A; only 1: intros B; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: auto).	0.048232	10
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Empty_set_zero'	40	7.20.0.1.5.22.0	synth with cache (only 1: intros x; only 1: elim (Inclusion_is_an_order U); only 1: intros y; only 1: intros A; only 1: intros H; only 1: unfold Add at 1; only 1: auto with sets).	0.201376	62
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.union_rotate	40	2.11.2.11.0.14.0.17.3.0.0.0.0.0.0.0.0.0	synth with cache (only 1: unfold seq; only 1: unfold union; only 1: unfold charac; only 1: intros until x; only 1: destruct x; only 1: intros until y; only 1: destruct y; only 1: intros until z; only 1: destruct z; only 1: intros; only 1: destruct b; only 1: auto with bool; only 1: destruct b; only 1: auto with bool; only 1: simpl; only 1: auto with bool; only 1: simpl; only 1: auto with bool).	0.088307	78
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_xorb_l	40	0	synth with cache (only 1: destr_bool).	0.033542	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.f_equal_compose	40	0.10.5.0.3.5.0.2.2.3	synth with cache (only 1: intros A; only 1: intros P; only 1: intros Hl; only 1: intros x; only 1: intros H; only 1: intros H0; only 1: intros y; only 1: intros h2; only 1: destruct h2; only 1: reflexivity).	0.053328	157
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_refl_l	40	0.0.2	synth with cache (only 1: intros until e; only 1: destruct e; only 1: reflexivity).	0.026567	5
coq-tactician-stdlib.8.11.dev	Coq.Setoids.Setoid.Seq_sym	40	0.0	synth with cache (only 1: unfold Setoid_Theory in s; only 1: firstorder).	0.039807	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_xorb_r	40	0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros until b; only 1: destruct b; only 1: intros until b'; only 1: destruct b'; only 1: trivial; only 1: trivial; only 1: intros until b'; only 1: destruct b'; only 1: trivial; only 1: trivial).	0.026470	10
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.or_not_r_iff_1	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.016742	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.pointwise_subrelation	40	1.1.1	synth with cache (only 1: hnf; only 1: intros; only 1: simpl_crelation).	0.046135	6
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Inclusion_is_transitive	40	0	synth with cache (only 1: auto  6 with sets).	0.025516	1
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.simplification_K	40	0.0.0	synth with cache (only 1: intros; only 1: rewrite UIP_refl; only 1: assumption).	0.023648	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_refl_r	40	0.0.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: reflexivity).	0.012658	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.xorb_negb_negb	40	0	synth with cache (only 1: destr_bool).	0.033284	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Sig.svalP	40	0.1	synth with cache (only 1: destruct u; only 1: assumption).	0.037794	3
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Relations.forall_subrelation	40	1.2	synth with cache (only 1: intros _tmp_tactician0; only 1: firstorder).	0.040310	5
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.or_not_r_iff_2	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.015611	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Union_idempotent	40	0	synth with cache (only 1: auto  6 with sets).	0.040977	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_sym_inv_l	40	0.0.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: reflexivity).	0.013531	3
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.flip.flip_PreOrder	40	2	synth with cache (only 1: firstorder).	0.048457	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_sym_involutive	40	0.0.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: reflexivity).	0.028580	3
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.flip.flip_Antisymmetric	40	2.0.2.0.2.0.1	synth with cache (only 1: hnf; only 1: intros; only 1: apply H; only 1: red in H0; only 1: assumption; only 1: red in H0; only 1: assumption).	0.057271	14
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Sig.s2valP	40	1.1.1	synth with cache (only 1: destruct u; only 1: simpl in *; only 1: trivial).	0.016090	6
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.rev_revapp	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_sym_inv_r	40	0.0.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: reflexivity).	0.013086	3
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Power_set_Inhabited	40	2.3.3.1.0.67.1.74.13	synth with cache (only 1: intros x; only 1: exists x; only 1: red; only 1: split; only 1: red; only 1: intros H'; only 1: intros y; only 1: red; only 1: trivial).	0.267394	1426
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eq_iff_eq_true	40	0.0.0.0.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: intuition; only 1: intuition).	0.077324	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eq_true_iff_eq	40	0.2.0.21.12.0	synth with cache (only 1: intros; only 1: intuition; only 1: destruct b2; only 1: intuition; only 1: destr_bool; only 1: intuition).	0.040867	41
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.imp_not_l	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.022908	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.iff_flip_impl_subrelation	40	0	synth with cache (only 1: firstorder).	0.024480	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eq_true_not_negb	40	0.0	synth with cache (only 1: destr_bool; only 1: intuition).	0.009953	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.unlock	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eq_true_negb_classical	40	0.0	synth with cache (only 1: destr_bool; only 1: intuition).	0.040956	2
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_or_iff	40	0	synth with cache (only 1: tauto).	0.010765	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_assoc	40	0.8.3.12.2.1.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: intros h2; only 1: destruct h2; only 1: intros h2; only 1: destruct h2; only 1: reflexivity).	0.037776	106
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Sig.s2valP'	40	0	synth with cache (only 1: by case : u ).	0.009109	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.absurd_eq_bool	40	11.11.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition).	0.014637	25
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.UpdateEq.eq_equiv	40	32.1.0.0.0.0.0.0.28	synth with cache (only 1: constructor; only 1: simpl_relation; only 1: auto with *; only 1: intros x; only 1: intros y; only 1: intros z; only 1: intros _tmp_tactician0; only 1: intros Hz; only 1: eauto).	0.127426	70
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_map	40	1.0.0	synth with cache (only 1: intros until H; only 1: destruct H; only 1: reflexivity).	0.030972	4
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_and_iff	40	0	synth with cache (only 1: tauto).	0.009244	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.Is_true_eq_left	40	0	synth with cache (only 1: destr_bool).	0.009558	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.iff_impl_subrelation	40	2.1.0.0.0.0	synth with cache (only 1: hnf; only 1: intros A; only 1: intros B; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: trivial).	0.099055	9
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.absurd_eq_true	40	11.0	synth with cache (only 1: destr_bool; only 1: intuition).	0.038863	13
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Union_absorbs	40	16.0.1.0	synth with cache (only 1: intros b; only 1: intros H'; only 1: intros H'0; only 1: auto  6 with sets).	0.086132	21
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.iffT_arrow_subrelation	40	0.0	synth with cache (only 1: reduce; only 1: firstorder).	0.035296	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.flip.flip_StrictOrder	40	1	synth with cache (only 1: firstorder).	0.051010	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.iffT_flip_arrow_subrelation	40	0	synth with cache (only 1: firstorder).	0.026231	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_refl	40	0	synth with cache (only 1: destr_bool).	0.007348	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.Is_true_eq_true	40	9.1	synth with cache (only 1: destr_bool; only 1: contradiction).	0.038980	12
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.trans_eq_bool	40	1.3.0.0	synth with cache (only 1: intros x; only 1: intros; only 1: subst; only 1: intuition).	0.044327	8
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Strict_Rel_is_Strict_Included	40	0.0	synth with cache (only 1: red; only 1: auto with sets).	0.027612	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.flip.flip_PreOrder	40	2	synth with cache (only 1: firstorder).	0.057312	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_eq	40	0.0.0	synth with cache (only 1: destr_bool; only 1: tauto; only 1: tauto).	0.012860	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.Is_true_eq_right	40	0.0.0	synth with cache (only 1: intros; only 1: subst; only 1: auto with bool).	0.037422	3
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Well_founded.Fix_F_eq	40	2.0.3.64.6.5.5.3.5.5.1	synth with cache (only 1: intros; only 1: induction (Rwf x); only 1: induction (Rwf x); only 1: induction (Rwf x); only 1: induction (Rwf x); only 1: induction (Rwf x); only 1: induction (Rwf x); only 1: destruct r; only 1: apply F_ext; only 1: intros; only 1: auto).	0.555942	110
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_imp_iff	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.061912	2
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.map_subst	40	0.1.0	synth with cache (only 1: intros until H; only 1: destruct H; only 1: reflexivity).	0.032260	4
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Union_associative	40	1.31.0.3.1.22.2.2.0	synth with cache (only 1: intros a; only 1: intros b; only 1: intros A; only 1: elim (Inclusion_is_an_order U); only 1: intros IT; only 1: intros y; only 1: intros H'0; only 1: elim (Inclusion_is_an_order U); only 1: auto  10 with sets).	0.345343	71
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.all_sig2	40	0	synth with cache (only 1: by case /all_tag =>f /all_pair []; exists f).	0.049107	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.all_sig	40	0	synth with cache (only 1: by move  =>fP; exists (fun x => tag (fP x)) => x; case : (fP x) ).	0.072448	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.not_imp_rev_iff	40	0.0	synth with cache (only 1: unfold decidable; only 1: tauto).	0.029842	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_prop_intro	40	8.0	synth with cache (only 1: destr_bool; only 1: tauto).	0.047122	10
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.map_subst_map	40	0.0.0	synth with cache (only 1: intros until H; only 1: destruct H; only 1: reflexivity).	0.035081	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_prop_intro	40	0.0.0.0	synth with cache (only 1: destr_bool; only 1: tauto; only 1: tauto; only 1: tauto).	0.045446	4
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.Generic.Paradox.Omega	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.flip.flip_PER	40	1	synth with cache (only 1: firstorder).	0.097560	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.flip_proper_obligation_1	40	7	synth with cache (only 1: firstorder).	0.033678	8
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_swap	40	6.1.0	synth with cache (only 1: intros; only 1: destruct H; only 1: trivial).	0.033222	10
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.flip.flip_StrictOrder	40	1	synth with cache (only 1: firstorder).	0.058699	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.flip_proper_obligation_1	40	3.1.11	synth with cache (only 1: apply mor; only 1: assumption; only 1: assumption).	0.050001	18
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eq_bool_prop_intro	40	0.0.0	synth with cache (only 1: destr_bool; only 1: tauto; only 1: tauto).	0.049030	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_prop_elim	40	0.0.0.0.0	synth with cache (only 1: destr_bool; only 1: tauto; only 1: tauto; only 1: tauto; only 1: tauto).	0.092032	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eq_bool_prop_elim	40	0.1.0	synth with cache (only 1: destr_bool; only 1: intuition; only 1: intuition).	0.047408	4
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_prop_elim	40	0.0.0	synth with cache (only 1: destr_bool; only 1: auto; only 1: tauto).	0.038969	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_compose	40	2.0.0	synth with cache (only 1: intros; only 1: destruct H2; only 1: reflexivity).	0.031944	5
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_prop_intro	40	1.0	synth with cache (only 1: destr_bool; only 1: tauto).	0.037585	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_prop_classical	40	0.0	synth with cache (only 1: destr_bool; only 1: tauto).	0.039411	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_prop_elim	40	1.1.2.0.2.1.2.0.20.0	synth with cache (only 1: intros; only 1: destr_bool; only 1: left; only 1: apply H; only 1: right; only 1: apply H; only 1: left; only 1: apply H; only 1: left; only 1: apply H).	0.266927	1161
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_prop_involutive	40	0.0.0	synth with cache (only 1: destr_bool; only 1: tauto; only 1: tauto).	0.041346	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_if	40	1	synth with cache (only 1: destr_bool).	0.034870	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.negb_if	40	0	synth with cache (only 1: destr_bool).	0.032449	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.flip.flip_Equivalence	40	1	synth with cache (only 1: firstorder).	0.079412	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.all_tag	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.trans_contra_co_type_morphism_obligation_1	40	7	synth with cache (only 1: firstorder).	0.180195	8
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.andb_lazy_alt	40	0	synth with cache (only 1: destr_bool).	0.033426	1
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_lazy_alt	40	0	synth with cache (only 1: reflexivity).	0.030295	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.flip.flip_PER	40	1	synth with cache (only 1: firstorder).	0.104857	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.reflect_dec	40	0.4.1.0	synth with cache (only 1: destruct 1; only 1: intuition; only 1: unfold not; only 1: intuition).	0.044455	9
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.iff_reflect	40	63.19.2.0	synth with cache (only 1: destruct 1; only 1: destruct b; only 1: intuition; only 1: intuition).	0.068365	88
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.complement.complement_Irreflexive	40	1	synth with cache (only 1: firstorder).	0.034345	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.eqb_spec	40	1.0.5.0.0.5.2	synth with cache (only 1: destruct b'; only 1: destr_bool; only 1: intuition; only 1: intuition; only 1: destruct b; only 1: intuition; only 1: intuition).	0.069257	20
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Injections.can_inj	40	1	synth with cache (only 1: by move  =>fK x y /(congr1 g); rewrite !fK => [[]]).	0.031519	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.complement.complement_Symmetric	40	0	synth with cache (only 1: firstorder).	0.033705	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.flip.flip_Equivalence	40	1	synth with cache (only 1: firstorder).	0.092948	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.iffT_Reflexive	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.iffT_Symmetric	40	0	synth with cache (only 1: firstorder).	0.031507	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.complement.complement_Irreflexive	40	1	synth with cache (only 1: firstorder).	0.032549	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.prop_congr	40	0	synth with cache (only 1: Bool.destr_bool).	0.016120	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.complement.complement_Symmetric	40	0	synth with cache (only 1: firstorder).	0.033249	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.iffT_Transitive	40	0	synth with cache (only 1: firstorder).	0.034936	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.is_true_true	40	16	synth with cache (only 1: easy).	0.011507	17
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.not_false_is_true	40	0	synth with cache (only 1: easy).	0.014332	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.is_true_locked_true	40	0.0	synth with cache (only 1: unlock; only 1: by [  ]).	0.016070	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbT	40	1.0.0	synth with cache (only 1: destruct b; only 1: Bool.destr_bool; only 1: split).	0.021498	4
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbTE	40	0	synth with cache (only 1: by case : b ).	0.015757	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbF	40	0	synth with cache (only 1: by case : b ).	0.017624	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbFE	40	0	synth with cache (only 1: by case : b ).	0.020078	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbNE	40	0	synth with cache (only 1: by case : b ).	0.015317	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbK	40	1.12	synth with cache (only 1: intros b; only 1: by case : b ).	0.024218	15
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbRL	40	14.1.4.2	synth with cache (only 1: destruct b; only 1: Bool.destr_bool; only 1: intros; only 1: Bool.destr_bool).	0.044049	25
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraL	40	0	synth with cache (only 1: by case : b  => //; case : c ).	0.021412	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contra	40	8.8.0.4	synth with cache (only 1: destruct b; only 1: Bool.destr_bool; only 1: Bool.destr_bool; only 1: intuition).	0.055275	24
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negbLR	40	13.3.17.1.2	synth with cache (only 1: destruct b; only 1: intros; only 1: Bool.destr_bool; only 1: intros; only 1: Bool.destr_bool).	0.073522	41
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.predicate_equivalence_equivalence_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraLR	40	0	synth with cache (only 1: by case : b  => //; case : c ).	0.018959	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.wlog_neg	40	0	synth with cache (only 1: by case : b  => // ->).	0.015481	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraR	40	0	synth with cache (only 1: by case : b  => //; case : c ).	0.083079	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraT	40	5.1.6.6.9	synth with cache (only 1: destruct b; only 1: Bool.destr_bool; only 1: simpl; only 1: intros H; only 1: intuition).	0.053594	32
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraFT	40	5.14	synth with cache (only 1: Bool.destr_bool; only 1: intuition).	0.083175	21
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.ifF	40	0	synth with cache (only 1: by move ->).	0.011688	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.ifT	40	2	synth with cache (only 1: by case : b ).	0.024088	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraTF	40	3.14	synth with cache (only 1: Bool.destr_bool; only 1: intuition).	0.083352	19
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraFN	40	5.16	synth with cache (only 1: Bool.destr_bool; only 1: intuition).	0.096051	23
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.ifN	40	2	synth with cache (only 1: by case : b ).	0.032049	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.if_same	40	0	synth with cache (only 1: by case  def_b: b ; constructor).	0.029517	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.if_neg	40	1	synth with cache (only 1: by case b).	0.025624	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.fun_if	40	0	synth with cache (only 1: by case b).	0.018622	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.if_arg	40	0	synth with cache (only 1: by case b).	0.012372	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraFF	40	0.2.9	synth with cache (only 1: destruct c; only 1: by case : b  => // ->; only 1: by move /contra =>notb_notc /negbT).	0.109853	14
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_eq	40	0.0.0.0.0.0	synth with cache (only 1: case compare_spec; only 1: easy; only 1: intros H; only 1: easy; only 1: intros H; only 1: easy).	0.040104	6
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.eq_refl	40	0.0	synth with cache (only 1: intros; only 1: easy).	0.022314	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.contraNF	40	3.15	synth with cache (only 1: Bool.destr_bool; only 1: intuition).	0.142387	20
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.ifE	40	9	synth with cache (only 1: reflexivity).	0.022955	10
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectCore.introTF	40	0	synth with cache (only 1: by case c; case Hb).	0.021670	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectCore.elimNTF	40	0	synth with cache (only 1: by case c; case Hb).	0.031982	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectCore.elimTF	40	0	synth with cache (only 1: by move <-; case Hb).	0.028200	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.OT_to_Full.le_lteq	40	1.0.0.0.0.0	synth with cache (only 1: split; only 1: destruct 1; only 1: auto; only 1: auto; only 1: intros _tmp_tactician0; only 1: eauto).	0.049780	7
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_gt_iff	40	0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0	synth with cache (only 1: case compare_spec; only 1: intros H; only 1: split; only 1: easy; only 1: intros LT; only 1: contradict ltac:(H); only 1: intros EQ; only 1: contradict ltac:(LT); only 1: rewrite EQ; only 1: apply irreflexivity; only 1: intros H; only 1: split; only 1: easy; only 1: intros LT; only 1: contradict ltac:(LT); only 1: rewrite H; only 1: apply irreflexivity; only 1: intros H; only 1: split; only 1: easy; only 1: easy).	0.241795	23
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_nlt_iff	40	0.0.0.1.0.0.0.0.0.0.1.0.1.1.0.0.0	synth with cache (only 1: case compare_spec; only 1: intros H; only 1: split; only 1: intros LT; only 1: rewrite H; only 1: apply irreflexivity; only 1: easy; only 1: intros H; only 1: split; only 1: easy; only 1: easy; only 1: intros H; only 1: split; only 1: intros LT; only 1: rewrite H; only 1: apply irreflexivity; only 1: easy).	0.171524	21
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_map	40	5.3.0.11.12.5.7.4.4.1.6.4.5	synth with cache (only 1: intros ?; only 1: intros ?; only 1: intros ?; only 1: intros H; only 1: intros H0; only 1: intros x; only 1: intros P; only 1: intros h1; only 1: intros y; only 1: intros h2; only 1: destruct 2; only 1: destruct h2; only 1: trivial).	1.711495	8584
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Injections.can_pcan	40	17.119.19.8	synth with cache (only 1: intros _tmp_tactician0; only 1: intros C; only 1: apply f_equal; only 1: trivial).	1.535444	6595
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_ngt_iff	40	0.0.1.0.0.0.0.1.1.0.1.0.1.1.1.0.1	synth with cache (only 1: case compare_spec; only 1: intros H; only 1: split; only 1: intros LT; only 1: rewrite H; only 1: apply irreflexivity; only 1: easy; only 1: intros H; only 1: split; only 1: intros LT; only 1: rewrite H; only 1: apply irreflexivity; only 1: easy; only 1: intros H; only 1: split; only 1: easy; only 1: easy).	0.256694	25
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Injections.canRL	40	8.4	synth with cache (only 1: destruct 2; only 1: auto).	0.041749	14
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_refl	40	2.0	synth with cache (only 1: apply compare_eq_iff; only 1: easy).	0.016321	4
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_antisym	40	0.2.0.2.1.0.0.1.0.0.0.1.0.2.0.2.0.0.1.0.0.0.0.0.1.0.0.0.1.0.0.0.0.0	synth with cache (only 1: case compare_spec; only 1: intros EQ; only 1: case compare_spec; only 1: easy; only 1: intros LT; only 1: contradict ltac:(LT); only 1: rewrite EQ; only 1: apply irreflexivity; only 1: intros LT; only 1: contradict ltac:(LT); only 1: rewrite EQ; only 1: apply irreflexivity; only 1: intros LT; only 1: case compare_spec; only 1: intros EQ; only 1: contradict ltac:(LT); only 1: rewrite EQ; only 1: apply irreflexivity; only 1: intros EQ; only 1: contradict ltac:(LT); only 1: rewrite EQ; only 1: apply irreflexivity; only 1: easy; only 1: intros LT; only 1: case compare_spec; only 1: intros EQ; only 1: contradict ltac:(LT); only 1: rewrite EQ; only 1: apply irreflexivity; only 1: easy; only 1: intros EQ; only 1: contradict ltac:(LT); only 1: rewrite EQ; only 1: apply irreflexivity).	0.286262	48
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.le_order	40	0.0.1	synth with cache (only 1: red; only 1: compute; only 1: iorder).	0.024661	4
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.Generic.Paradox.lemma1	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Binary.relation_implication_preorder	40	4	synth with cache (only 1: firstorder).	0.022318	5
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Binary.partial_order_antisym	40	0	synth with cache (only 1: firstorder).	0.025581	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Binary.PartialOrder_inverse	40	2.0	synth with cache (only 1: reduce_goal; only 1: firstorder).	0.094855	4
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_refl_map_distr	40	0.0	synth with cache (only 1: intros; only 1: reflexivity).	0.036153	2
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Clos_Refl_Sym_Trans.clos_rst_idempotent	40	0.0.3.0.0.0.0.0	synth with cache (only 1: red; only 1: induction 1; only 1: auto with sets; only 1: auto with sets; only 1: auto with sets; only 1: apply rst_trans with y; only 1: auto with sets; only 1: auto with sets).	0.101071	11
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_map_distr	40	1.11.11.14.8.7.1.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: simpl; only 1: unfold f_equal; only 1: intros H0; only 1: rewrite eq_trans_refl_l; only 1: rewrite eq_trans_refl_l; only 1: trivial).	0.082731	61
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.plus_O_n	40	0.0.0.0.0.0	synth with cache (only 1: intros until n; only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.034257	6
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.eq_true_ind_r	40	1.8.31.0.0.0	synth with cache (only 1: intros P; only 1: intros x''; only 1: intros Hx'; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [? ?]; only 1: assumption).	0.065778	471
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.plus_n_Sm	40	0.0.0.0.2.14.2	synth with cache (only 1: intros until n; only 1: intros H; only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.039838	25
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.eq_true_rec_r	40	0.0.0.0.0.0	synth with cache (only 1: intros P; only 1: intros b; only 1: intros H; only 1: intros H0; only 1: destruct H0 in H; only 1: assumption).	0.031026	6
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_sym_map_distr	40	0.2.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: reflexivity).	0.055916	5
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.plus_Sn_m	40	0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.035253	7
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.eq_true_rect_r	40	0.0.0.0.0.0	synth with cache (only 1: intros P; only 1: intros b; only 1: intros H; only 1: intros H0; only 1: destruct H0 in H; only 1: assumption).	0.029720	6
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.mult_n_O	40	0.0.0.0.0.0	synth with cache (only 1: intros until n; only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.032881	6
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_sym_distr	40	1.6.4.7.1.0	synth with cache (only 1: intros until e; only 1: destruct e; only 1: intros h2; only 1: simpl; only 1: rewrite eq_trans_refl_l; only 1: trivial).	0.071523	25
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.of_voidK	40	31.7.4	synth with cache (only 1: intros P; only 1: simpl; only 1: intuition).	0.065588	45
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.equivP	40	0.16.9	synth with cache (only 1: intros H0; only 1: intuition; only 1: by case : Pb ; constructor; auto).	0.084034	28
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_rec_r	40	0.1.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H'; only 1: case JMeq_eq with (1 := JMeq_sym H'); only 1: trivial).	0.096670	9
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Intersection_commutative	40	0.0.0.0.0.0.0.0.2.2.0.2	synth with cache (only 1: intros B; only 1: intros C; only 1: apply Extensionality_Ensembles; only 1: split; only 1: intros x; only 1: intros H'; only 1: elim H'; only 1: auto with sets; only 1: intros x; only 1: intros H'; only 1: elim H'; only 1: auto with sets).	0.175823	18
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.rwP	40	8	synth with cache (only 1: by case Pb).	0.044486	9
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_trans_rew_distr	40	0.0.1	synth with cache (only 1: intros; only 1: destruct e'; only 1: reflexivity).	0.162366	4
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.introP	40	6.11.43.19.25.24	synth with cache (only 1: intros C; only 1: intros x1; only 1: intuition; only 1: destruct b; only 1: intuition; only 1: intuition).	0.265905	134
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.predicate_implication_preorder_obligation_1	40	0.0.0	synth with cache (only 1: induction l; only 1: firstorder; only 1: firstorder).	0.059206	3
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_rect_r	40	0.1.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: intros P; only 1: intros H; only 1: intros y; only 1: intros H'; only 1: case JMeq_eq with (1 := JMeq_sym H'); only 1: trivial).	0.096796	9
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.forall_extensionalityP	40	0.0.0	synth with cache (only 1: apply functional_extensionality in H; only 1: destruct H; only 1: reflexivity).	0.040327	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Sumbool.connectives.sumbool_or	40	0.0.0.0.0.0.0	synth with cache (only 1: case H1; only 1: case H2; only 1: auto; only 1: auto; only 1: case H2; only 1: auto; only 1: auto).	0.062290	7
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.altP	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.rew_const	40	0.1.0	synth with cache (only 1: intros; only 1: destruct e; only 1: reflexivity).	0.069878	4
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.unlock_with	40	1	synth with cache (only 1: by case : k ).	0.031795	2
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.forall_extensionalityS	40	0.0.0	synth with cache (only 1: apply functional_extensionality in H; only 1: destruct H; only 1: reflexivity).	0.042575	3
coq-tactician-stdlib.8.11.dev	Coq.Bool.Sumbool.connectives.sumbool_not	40	0.0.0.0.0.0.0	synth with cache (only 1: case H1; only 1: case H2; only 1: auto; only 1: auto; only 1: case H2; only 1: auto; only 1: auto).	0.051788	7
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.predicate_implication_preorder_obligation_2	40	0.0.0.0.0.0.0	synth with cache (only 1: induction l; only 1: simpl in *; only 1: firstorder; only 1: intros; only 1: simpl in *; only 1: pose (IHl (x x0) (y x0) (z x0)); only 1: firstorder).	0.153237	7
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.unlessR	40	0.24.5.8	synth with cache (only 1: split; only 1: intros _tmp_tactician0; only 1: intros y; only 1: intuition).	0.067918	41
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.unlessL	40	7.4.12.2.8	synth with cache (only 1: split; only 1: intros _tmp_tactician0; only 1: intros h2; only 1: intros H; only 1: auto).	0.136175	142
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.impliesP	40	8.25.8.14	synth with cache (only 1: intros _tmp_tactician0; only 1: intros x1; only 1: destruct _tmp_tactician0 as []; only 1: auto).	0.238355	1813
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.etrans_id	40	0.20	synth with cache (only 1: subst; only 1: reflexivity).	0.041438	22
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.lt_not_ge_iff	40	0	synth with cache (only 1: iorder).	0.047033	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.eq_sym	40	1.0	synth with cache (only 1: intros; only 1: easy).	0.037588	3
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.union_perm_left	40	1.0.31.1.0.31.0.15.0.0.21.17.2.5.0.0.0.1.3.0	synth with cache (only 1: intros; only 1: unfold seq; only 1: unfold union; only 1: unfold charac; only 1: destruct z; only 1: destruct y; only 1: intros a; only 1: destruct x; only 1: destruct b; only 1: destruct b1; only 1: auto with bool; only 1: auto with bool; only 1: destruct b; only 1: auto with bool; only 1: destruct b1; only 1: auto with bool; only 1: auto with bool; only 1: destruct b1; only 1: auto with bool; only 1: auto with bool).	0.199242	148
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.inj_id	40	1.0.2.5	synth with cache (only 1: intros ?; only 1: intros _tmp_tactician0; only 1: intros H2; only 1: auto).	0.040964	12
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.inj_can_sym	40	10.21.8.1	synth with cache (only 1: intros _tmp_tactician0; only 1: intros H2; only 1: intros ?; only 1: auto).	0.066633	44
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.eq_is_le_ge	40	1.1.1.0.0	synth with cache (only 1: intros; only 1: destruct (compare_spec x y); only 1: iorder; only 1: iorder; only 1: iorder).	0.117559	8
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.classicW	40	35.0.23.3	synth with cache (only 1: intros h2; only 1: intros y; only 1: intros H0; only 1: auto).	0.134238	65
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.compare_le_iff	40	2.0	synth with cache (only 1: rewrite compare_gt_iff; only 1: iorder).	0.054775	4
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.elimT	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.compare_ge_iff	40	0.0.0	synth with cache (only 1: rewrite le_not_gt_iff; only 1: rewrite compare_lt_iff; only 1: intuition).	0.062433	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.unless_contra	40	8.1.21.23.14.14.5.3.31.16.18.20	synth with cache (only 1: destruct b; only 1: split; only 1: intros _tmp_tactician0; only 1: intros P; only 1: intros H; only 1: intuition; only 1: split; only 1: intros _tmp_tactician0; only 1: intros H; only 1: intros Hr; only 1: intros h1; only 1: auto).	0.548048	186
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.impliesPn	40	0.99.15.24.22.5.10	synth with cache (only 1: intros Fl; only 1: intros HPx1; only 1: red; only 1: intros H0; only 1: intuition; only 1: destruct Fl; only 1: tauto).	0.851596	938
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Binary.relation_equivalence_equivalence	40	1.18.5.0.9.142.32.0.5.1.2.0.2.0.7.7	synth with cache (only 1: split; only 1: split; only 1: intros H0; only 1: assumption; only 1: intros H0; only 1: assumption; only 1: firstorder; only 1: constructor; only 1: firstorder; only 1: red in H0; only 1: apply H0; only 1: firstorder; only 1: firstorder; only 1: red in H0; only 1: apply H; only 1: firstorder).	0.905973	247
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.AllAnd.all_and3	40	0	synth with cache (only 1: by split => haveP; split => x; case : (haveP x) ).	0.041485	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.AllAnd.all_and4	40	0	synth with cache (only 1: by split => haveP; split => x; case : (haveP x) ).	0.044440	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Binary.relation_implication_preorder	40	5.1.0.0.0.1.0.3.1.3	synth with cache (only 1: split; only 1: hnf; only 1: intros _tmp_tactician0; only 1: firstorder; only 1: hnf; only 1: intros x; only 1: intros y; only 1: intros z; only 1: intros H1; only 1: firstorder).	0.079798	24
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.AllAnd.all_and5	40	0	synth with cache (only 1: by split => haveP; split => x; case : (haveP x) ).	0.044082	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Binary.partial_order_antisym	40	0	synth with cache (only 1: firstorder).	0.048881	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.boolP	40	0	synth with cache (only 1: by case b1; constructor).	0.026999	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.pair_andP	40	10.6.1.11.13.4.5.11.12.4.5	synth with cache (only 1: split; only 1: intros ?; only 1: split; only 1: tauto; only 1: tauto; only 1: intros ?; only 1: split; only 1: destruct H; only 1: intuition; only 1: destruct H; only 1: trivial).	0.119460	93
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.idPn	40	0	synth with cache (only 1: by case b1; constructor).	0.029025	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZBase.NZBaseProp.eq_sym_iff	40	4.1.0	synth with cache (only 1: intros; only 1: compute; only 1: firstorder).	0.045341	8
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.negP	40	0	synth with cache (only 1: by case b1; constructor).	0.029674	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.negPn	40	0	synth with cache (only 1: by case b1; constructor).	0.025980	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.negPf	40	0	synth with cache (only 1: by case b1; constructor; auto).	0.027204	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZBase.NZBaseProp.neq_sym	40	40.13.0	synth with cache (only 1: intros; only 1: intros Fr; only 1: CRelationClasses.simpl_crelation).	0.051341	56
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.GenericMinMax.min_r	40	0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros; only 1: unfold min; only 1: unfold gmin; only 1: case compare_spec; only 1: auto with relations; only 1: intros; only 1: elim (ge_not_lt x y); only 1: auto; only 1: auto; only 1: auto with relations).	0.091966	10
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractToImpredicativeUniverse.Paradox.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.and3P	40	0.0.2	synth with cache (only 1: destruct b3; only 1: by case b1; case b2; constructor => //; case; only 1: by case b1; case b2; constructor => //; case).	0.087172	5
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_0_r	40	0.0.0.0.0.19.1	synth with cache (only 1: intros ?; only 1: nzinduct n; only 1: nzsimpl; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: easy).	0.175400	194
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_succ_comm	40	0.0.1.0.0.0.0.0	synth with cache (only 1: intros; only 1: nzinduct n; only 1: nzsimpl; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite succ_inj_wd; only 1: easy).	0.136873	9
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.nle_succ_diag_l	40	1.0.0.1.0	synth with cache (only 1: intros n; only 1: intros H; only 1: apply (lt_irrefl (S n)); only 1: rewrite lt_succ_r; only 1: easy).	0.318516	98
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.decP	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Binary.PartialOrder_inverse	40	2.24.2.24.1.9.3.26.21.2.0.0.0.0.0	synth with cache (only 1: reduce_goal; only 1: pose proof partial_order_equivalence as poe; only 1: red in poe; only 1: red in poe; only 1: red in poe; only 1: red in poe; only 1: red; only 1: split; only 1: reduce_goal; only 1: split; only 1: reduce_goal; only 1: firstorder; only 1: reduce_goal; only 1: firstorder; only 1: firstorder).	0.915666	129
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_lt_mono_r	40	0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros p; only 1: nzinduct p; only 1: nzsimpl; only 1: easy; only 1: intros p; only 1: nzsimpl; only 1: rewrite <- succ_lt_mono; only 1: easy).	0.217326	10
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_comm	40	0.2.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: nzinduct n; only 1: nzsimpl; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite add_cancel_r; only 1: easy).	0.239349	11
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.subrelation_partial_order_obligation_1	40	0	synth with cache (only 1: firstorder).	0.104239	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_le_mono_r	40	0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros p; only 1: nzinduct p; only 1: nzsimpl; only 1: easy; only 1: intros p; only 1: nzsimpl; only 1: rewrite <- succ_le_mono; only 1: easy).	0.212862	10
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_add_distr_r	40	1.0.2.0.1.2.1.0.1.0.0	synth with cache (only 1: intros m; only 1: intros n; only 1: intros p; only 1: nzinduct n; only 1: nzsimpl; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite add_assoc; only 1: rewrite add_cancel_r; only 1: easy).	0.277212	19
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_id	40	5.1	synth with cache (only 1: apply max_r; only 1: order).	0.095224	8
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAddOrder.ZAddOrderProp.add_neg_neg	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros H1; only 1: intros H2; only 1: rewrite <- (add_0_l 0); only 1: apply add_lt_mono; only 1: easy; only 1: easy).	0.083884	8
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAddOrder.ZAddOrderProp.add_neg_nonpos	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros H1; only 1: intros H2; only 1: rewrite <- (add_0_l 0); only 1: apply add_lt_le_mono; only 1: easy; only 1: easy).	0.155010	8
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAddOrder.ZAddOrderProp.add_nonpos_neg	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros H1; only 1: intros H2; only 1: rewrite <- (add_0_l 0); only 1: apply add_le_lt_mono; only 1: easy; only 1: easy).	0.087322	8
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAddOrder.ZAddOrderProp.add_nonpos_nonpos	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros H1; only 1: intros H2; only 1: rewrite <- (add_0_l 0); only 1: apply add_le_mono; only 1: easy; only 1: easy).	0.081562	8
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.andb_prop	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NAddOrder.NAddOrderProp.le_add_r	40	0.0.0.0.0.0.0.0.0.6.0.6.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.0.6.5.2.0.20.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: rewrite add_comm; only 1: nzinduct n; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: rewrite <- add_assoc; only 1: apply add_le_mono; only 1: apply eq_le_incl; only 1: easy; only 1: rewrite <- (add_0_l 0); only 1: apply add_le_mono; only 1: nzsimpl; only 1: apply eq_le_incl; only 1: easy; only 1: apply le_0_l; only 1: intros ?; only 1: nzsimpl; only 1: rewrite lt_eq_cases; only 1: rewrite lt_eq_cases; only 1: rewrite <- succ_lt_mono; only 1: rewrite succ_inj_wd; only 1: easy).	4.835634	1578
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded.Acc_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded.well_founded_induction	40	0.0.0.0	synth with cache (only 1: intros; only 1: apply Acc_rect; only 1: auto; only 1: auto).	0.019844	4
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded.well_founded_ind	40	0.0.0.0	synth with cache (only 1: intros; only 1: apply Acc_rect; only 1: auto; only 1: auto).	0.024680	4
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded.FixPoint.Fix_F_eq	40	0.32.3	synth with cache (only 1: intros; only 1: destruct r; only 1: trivial).	0.029282	38
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.AllAnd.all_and2	40	0.0.2.0.0.2.18.5.2	synth with cache (only 1: split; only 1: Bool.destr_bool; only 1: split; only 1: intros z; only 1: destruct (H z); only 1: auto; only 1: intros z; only 1: destruct (H z); only 1: auto).	8.544998	48826
coq-tactician-stdlib.8.11.dev	Coq.Init.Tactics.decide_left	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Tactics.decide_right	40	1.1.0.0	synth with cache (only 1: intros; only 1: destruct decide; only 1: contradiction; only 1: apply H0).	0.030851	6
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NParity.NParityProp.odd_pred	40	0.6.10.13.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: cases ltac:(n); only 1: intros; only 1: exfalso; only 1: apply H; only 1: easy; only 1: intros; only 1: rewrite pred_succ; only 1: rewrite <- negb_odd; only 1: rewrite odd_succ; only 1: rewrite <- negb_odd; only 1: rewrite <- negb_even; only 1: destruct (even n); only 1: split; only 1: easy).	0.340759	43
coq-tactician-stdlib.8.11.dev	Coq.Logic.Berardi.Berardis_paradox.AC_IF	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sigT_eq_dep	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.esymK	40		synth with cache (only 1: red; only 1: intros H1; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: subst; only 1: reflexivity).	16.888106	36355
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_iff_compat_r	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.exists_inhabited	40	7.13.12.6.0	synth with cache (only 1: intros A; only 1: intros _tmp_tactician0; only 1: intros ?; only 1: destruct H; only 1: auto).	0.074932	340
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.inhabited_covariant	40	0.0.0	synth with cache (only 1: intros H; only 1: destruct 1; only 1: auto).	0.030269	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.imp_iff_compat_r	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.not_eq_S	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT_eta	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.andb_true_intro	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.n_Sn	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.rew_sigT	40	0.1.0	synth with cache (only 1: destruct H; only 1: destruct u; only 1: reflexivity).	0.049475	4
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_sigT_uncurried	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig.eq_exist_uncurried	40	0.1.0.0	synth with cache (only 1: destruct pq as [p q]; only 1: destruct q; only 1: destruct p; only 1: reflexivity).	0.054734	5
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig.eq_sig_uncurried	40	0.1.0.0.0.0.0	synth with cache (only 1: destruct u as [u1 u2]; only 1: destruct v as [v1 v2]; only 1: simpl in *; only 1: destruct pq as [p q]; only 1: destruct q; only 1: destruct p; only 1: reflexivity).	0.083733	8
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.iff_stepl	40	0.0.2.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros B; only 1: intros C; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [H1 H2]; only 1: intros _tmp_tactician2; only 1: destruct _tmp_tactician2 as [H3 H4]; only 1: split; only 1: auto; only 1: auto).	0.072107	12
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig.eq_sig_uncurried_iff	40	0.0.6.14.0.0.0.0.1.0.0.0.0.0	synth with cache (only 1: split; only 1: intros ?; only 1: subst; only 1: exists eq_refl; only 1: reflexivity; only 1: intros ?; only 1: destruct u as [u1 u2]; only 1: destruct v as [v1 v2]; only 1: simpl in *; only 1: apply eq_exist_uncurried; only 1: destruct H; only 1: subst; only 1: exists eq_refl; only 1: reflexivity).	0.135590	35
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig.rew_sig	40	0.0.0	synth with cache (only 1: destruct H; only 1: destruct u; only 1: reflexivity).	0.052920	3
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.diagonal_projs_same_behavior	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.diagonal_inverse2	40	0.0.0.0.0.0	synth with cache (only 1: split; only 1: trivial; only 1: intros until b; only 1: destruct b as (a1, a2, _tmp_tactician0); only 1: destruct _tmp_tactician0 as []; only 1: reflexivity).	0.052526	6
coq-tactician-stdlib.8.11.dev	Coq.Bool.DecBool.ifdec_left	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.bool_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropExtensionalityFacts.PredExt_imp_PropExt	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.tl_nth_tl	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Permut.Axiomatisation.cong_congr	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Permut.Axiomatisation.comm_left	40	0.2.0	synth with cache (only 1: intros; only 1: apply cong_left; only 1: apply op_comm).	0.041502	5
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Inclusion.WfInclusion.Acc_incl	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Finite_sets.Ensembles_finis_facts.cardinal_invert	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.incl_left	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_not_not	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Inclusion.WfInclusion.wf_incl	40	0.6.3.2	synth with cache (only 1: intros H1; only 1: intros _tmp_tactician0; only 1: split; only 1: auto with sets).	0.046260	15
coq-tactician-stdlib.8.11.dev	Coq.Sets.Finite_sets.Ensembles_finis_facts.cardinal_elim	40	4.3.0.0	synth with cache (only 1: induction 1; only 1: auto; only 1: exists x; only 1: auto using (Noone_in_empty U) with sets).	0.046758	11
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.Equiv_from_preorder	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Inverse_Image.Inverse_Image.Acc_lemma	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.forall_hprop	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_ind	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Disjoint_Union.Wf_Disjoint_Union.acc_A_sum	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.functional_extensionality	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ProofIrrelevanceFacts.ProofIrrelevanceTheory.Eq_rect_eq.eq_rect_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.BoolEq.Bool_eq_dec.beq_eq_not_false	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Transitive_Closure.Wf_Transitive_Closure.Acc_clos_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_or	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Partial_Order.Partial_order_facts.Strict_Rel_Transitive_with_Rel	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.contains_is_preorder	40	0.0.0.0.1.0.0.90.0	synth with cache (only 1: intros U; only 1: split; only 1: intros R; only 1: intros y; only 1: intros H'5; only 1: intros H'0; only 1: auto with sets; only 1: intros R; only 1: auto  10 with sets).	0.058649	100
coq-tactician-stdlib.8.11.dev	Coq.Logic.StrictProp.Spr1_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropFacts.injection_is_involution_in_Prop	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Well_Ordering.WellOrdering.wf_WO	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.impl_hprop	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros P; only 1: intros H; only 1: intros p; only 1: intros q; only 1: apply functional_extensionality_dep; only 1: intros x; only 1: apply H).	0.057897	8
coq-tactician-stdlib.8.11.dev	Coq.Bool.Sumbool.connectives.sumbool_and	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rstar_contains_R	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.Str_nth_tl_plus	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_ind_r	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_eq_dep_id	40	0.1.0	synth with cache (only 1: intros; only 1: destruct H; only 1: auto).	0.027121	4
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.false_hprop	40	1.0.0	synth with cache (only 1: intros p; only 1: intros q; only 1: destruct p).	0.027726	4
coq-tactician-stdlib.8.11.dev	Coq.Bool.IfProp.IfProp_true	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.seq_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.forall_sig_eq_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.eq_dep_id_JMeq	40	0.0	synth with cache (only 1: destruct 1; only 1: trivial).	0.034727	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Add_intro1	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.true_hprop	40	0.5.3.0.0	synth with cache (only 1: intros p; only 1: intros q; only 1: destruct p; only 1: destruct q; only 1: trivial).	0.045721	13
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.eq_dep_JMeq	40	0.0	synth with cache (only 1: destruct 1; only 1: reflexivity).	0.025534	2
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.not_hprop	40	1.0.1.0.2.0	synth with cache (only 1: intros p; only 1: intros H; only 1: intros q; only 1: apply functional_extensionality; only 1: intros x; only 1: contradiction).	0.049123	10
coq-tactician-stdlib.8.11.dev	Coq.Program.Combinators.prod_curry_uncurry	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.eq_dep_strictly_stronger_JMeq	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.leb_implb	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_sigT_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sigT_snd	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.and_cancel_l	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_cancel_l	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_existT_curried_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.forall_extensionality	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_cancel_r	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Inhabited_add	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.not_Empty_Add	40	1.2.3.1.1.0.0	synth with cache (only 1: intros A; only 1: intros x; only 1: red; only 1: intros H'1; only 1: elim (Noone_in_empty x); only 1: rewrite H'1; only 1: auto using Add_intro2 with sets).	0.062639	15
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_existT_curried_congr	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.IfProp.IfProp_false	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: inversion H; only 1: assumption).	2.654349	228
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.or_assoc	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.plus_n_O	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.orb_false_elim	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.le_0_n	40	0.0.2.2	synth with cache (only 1: intros until n; only 1: induction n; only 1: auto; only 1: auto).	0.018336	8
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex2.eq_ex2_uncurried	40	2.5.2.1.0.0	synth with cache (only 1: destruct pq as [p q]; only 1: destruct q; only 1: destruct p; only 1: simpl in *; only 1: destruct H; only 1: reflexivity).	0.067729	16
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex2.rew_ex2	40	0.0.0	synth with cache (only 1: destruct H; only 1: destruct u; only 1: reflexivity).	0.055751	3
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_0_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_spec_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Subset.subset_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Defs.StrictOrder_Asymmetric	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sig_fst	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Well_founded.Fix_F_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Clos_Refl_Trans.clos_rt_idempotent	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.Defs.StrictOrder_Asymmetric	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Clos_Refl_Sym_Trans.clos_rt_clos_rst	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.EqdepDec.nu_constant	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rstar_contains_Rplus	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Clos_Refl_Trans.clos_rt_is_preorder	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Relations.inverse_image_of_equivalence	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.EqdepDec.nu_left_inv_on	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.lock	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_3_facts.Rstar_imp_coherent	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Well_founded.fix_sub_eq	40	0.0.0.0.0.0	synth with cache (only 1: intros x; only 1: unfold Fix_sub; only 1: rewrite <- Fix_F_eq; only 1: apply F_ext; only 1: intros; only 1: apply Fix_F_inv).	0.064281	6
coq-tactician-stdlib.8.11.dev	Coq.Init.Byte.to_bits_of_bits	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Union.WfUnion.strip_commut	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.StreamMemo.MemoFunction.memo_get_correct	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Clos_Refl_Sym_Trans.clos_rt_t	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.ssr_congr_arrow	40	9.21.0	synth with cache (only 1: intros; only 1: destruct H; only 1: auto).	0.040755	33
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Composition.eq_comp	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.ExtensionalEquality.ftrans	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Prop.Acc_pt_morphism	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.seq_congr	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Product.WfLexicographic_Product.acc_A_B_lexprod	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.ApplyIff.iffLR	40	0	synth with cache (only 1: intuition).	0.026087	1
coq-tactician-stdlib.8.11.dev	Coq.Program.Equality.simplification_existT1	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.ApplyIff.iffRL	40	0	synth with cache (only 1: by case : eqPQ ).	0.024892	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.respectful_per_obligation_2	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.uint_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.rev_rev	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.ApplyIff.iffLRn	40	2.2	synth with cache (only 1: intros H0; only 1: intuition).	0.053225	6
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Couple_as_union	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.locked_withE	40
coq-tactician-stdlib.8.11.dev	Coq.Setoids.Setoid.Seq_trans	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.ApplyIff.iffRLn	40	0	synth with cache (only 1: by move  =>nP tQ; case : nP ; case : eqPQ tQ ).	0.017868	1
coq-tactician-stdlib.8.11.dev	Coq.Setoids.Setoid.gen_st	40	2.0.4	synth with cache (only 1: intros A; only 1: red; only 1: CRelationClasses.simpl_crelation).	0.036624	9
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Power_set_PO	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.HasEqDec2Bool.eqb_eq	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.abstract_context	40	1.95.0	synth with cache (only 1: intros H; only 1: apply H; only 1: split).	0.062841	99
coq-tactician-stdlib.8.11.dev	Coq.Classes.CEquivalence.Respecting.respecting_equiv_obligation_3	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Triple_as_union	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Strict_inclusion_is_transitive_with_inclusion	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Injections.pcan_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.respectful_per_obligation_2	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CEquivalence.pointwise_reflexive	40	2	synth with cache (only 1: simpl_crelation).	0.028297	3
coq-tactician-stdlib.8.11.dev	Coq.Classes.Equivalence.Respecting.respecting_equiv_obligation_3	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.complement_proper_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Equivalence.pointwise_reflexive	40	0	synth with cache (only 1: simpl_relation).	0.035301	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Triple_as_Couple	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CEquivalence.pointwise_symmetric	40	0	synth with cache (only 1: firstorder).	0.032105	1
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Well_founded.Fix_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.trans_contra_co_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Equivalence.pointwise_symmetric	40	0	synth with cache (only 1: firstorder).	0.034874	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CEquivalence.pointwise_transitive	40	0	synth with cache (only 1: firstorder).	0.024369	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.trans_contra_inv_impl_type_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_id_comm_l	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Equivalence.pointwise_transitive	40	0	synth with cache (only 1: firstorder).	0.034620	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.trans_contra_inv_impl_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.trans_co_impl_type_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Decidable.dec_functional_relation	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.trans_co_impl_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.trans_sym_co_inv_impl_type_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Fix_rects.F_unfold	40	0.1	synth with cache (only 1: destruct r using Acc_inv_dep; only 1: auto).	0.056082	3
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Triple_as_Couple_Singleton	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.Bool.reflect_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.trans_sym_co_inv_impl_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.trans_sym_contra_arrow_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Injections.canLR	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.reflexive_eq_dom_reflexive	40	0	synth with cache (only 1: simpl_crelation).	0.017903	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.compose_proper_obligation_1	40	12	synth with cache (only 1: firstorder).	0.075161	13
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.symmetric_equiv_flip	40	4.0.1.0.0.0	synth with cache (only 1: hnf; only 1: intros; only 1: hnf; only 1: intros; only 1: hnf; only 1: firstorder).	0.058999	11
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.Reflexive_partial_app_morphism	40	0.6	synth with cache (only 1: reduce; only 1: auto).	0.019339	8
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.compose_proper_obligation_1	40	8	synth with cache (only 1: firstorder).	0.031842	9
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.Generic.Paradox.lemma2	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.flip_respectful	40	0.0.0.1	synth with cache (only 1: split; only 1: intros H'; only 1: simpl_crelation; only 1: firstorder).	0.035577	5
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.reflexive_eq_dom_reflexive	40	0.0.2	synth with cache (only 1: reduce; only 1: subst; only 1: firstorder).	0.043359	5
coq-tactician-stdlib.8.11.dev	Coq.Classes.CRelationClasses.Binary.relation_equivalence_equivalence	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.flip1	40	0.0	synth with cache (only 1: reduce; only 1: auto).	0.036566	2
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.flip2	40	0	synth with cache (only 1: firstorder).	0.011390	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negb_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.eq_subrelation	40	21.0.0.1.2	synth with cache (only 1: hnf; only 1: intros x; only 1: intros y; only 1: intros H'; only 1: simpl_crelation).	0.047178	29
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.reflexive_proper	40	0	synth with cache (only 1: firstorder).	0.030880	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.Reflexive_partial_app_morphism	40	5	synth with cache (only 1: firstorder).	0.026571	6
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.proper_eq	40	0	synth with cache (only 1: firstorder).	0.011896	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.flip_respectful	40	0	synth with cache (only 1: firstorder).	0.038916	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.flip1	40	0.0.1.0	synth with cache (only 1: reduce; only 1: red in H0; only 1: red in H0; only 1: intuition).	0.047013	5
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.ifP	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.flip2	40	0	synth with cache (only 1: firstorder).	0.026098	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.BoolIf.ifPn	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Normalize.proper_normalizes_proper	40	8.0	synth with cache (only 1: simpl_crelation; only 1: firstorder).	0.037464	10
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.predicate_equivalence_equivalence_obligation_2	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.Compare2EqBool.eqb_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_eq_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.proper_proper	40	0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros B; only 1: reduce; only 1: split; only 1: intros; only 1: subst; only 1: firstorder; only 1: intros; only 1: subst; only 1: simpl_crelation; only 1: firstorder).	0.087640	10
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.Normalize.flip_atom	40	0	synth with cache (only 1: firstorder).	0.031447	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.eq_subrelation	40	0.0.1.2	synth with cache (only 1: hnf; only 1: intros; only 1: subst; only 1: firstorder).	0.054900	7
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.reflexive_proper	40	0	synth with cache (only 1: firstorder).	0.029196	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.proper_eq	40	0	synth with cache (only 1: simpl_relation).	0.027902	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectCore.introNTF	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_lt_iff	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectNegCore.elimTFn	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.proper_proper	40	3.0.1.2.0.1.0.2.1.0.0	synth with cache (only 1: reduce; only 1: unfold relation_equivalence in *; only 1: unfold predicate_equivalence in *; only 1: simpl in *; only 1: split; only 1: intros; only 1: subst; only 1: firstorder; only 1: intros; only 1: rewrite H0; only 1: firstorder).	0.072534	21
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectNegCore.equivPifn	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.le_refl	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectCore.equivPif	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Normalize.proper_normalizes_proper	40	6	synth with cache (only 1: firstorder).	0.043382	7
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectNegCore.xorPifn	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.introT	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.Normalize.flip_atom	40	0	synth with cache (only 1: firstorder).	0.032897	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.introF	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectCore.xorPif	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectNegCore.introTFn	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.introNf	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.introTn	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.neq_sym	40	0	synth with cache (only 1: auto with *).	0.025323	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.elimF	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.introN	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.OTF_LtIsTotal.lt_total	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.proper_sym_flip	40	0.2.1.0	synth with cache (only 1: intros A; only 1: intros R'; only 1: intros; only 1: simpl_crelation).	0.112757	7
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.introFn	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.elimNf	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.elimN	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.elimTn	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareFacts.compare_compat	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_id_comm_r	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Some_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.proper_sym_flip	40	0	synth with cache (only 1: simpl_relation).	0.037442	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.Even_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.le_compat	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.proper_sym_impl_iff	40	4.0.0.0.10.23.0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros B; only 1: intros R2; only 1: intros f; only 1: intros Hf; only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: hnf; only 1: split; only 1: apply Hf; only 1: apply Hxx'; only 1: apply Hf; only 1: auto).	0.440181	417
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.proper_sym_flip_2	40	0.33.7.11.3.8.2.6.1.3.1.1.0.0.0	synth with cache (only 1: intros A; only 1: intros R1; only 1: intros Sym; only 1: intros B; only 1: intros R2; only 1: intros Hf; only 1: intros f; only 1: intros Hxx'; only 1: intros x; only 1: intros R; only 1: intros x'; only 1: intros R'; only 1: simpl_crelation; only 1: unfold respectful in *; only 1: auto).	0.617579	230
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.proper_sym_flip_2	40	15.1.4.2.3.2.2.1.0.0.0.0	synth with cache (only 1: intros B; only 1: intros R1; only 1: intros Sym; only 1: intros A; only 1: intros R2; only 1: intros f; only 1: intros x; only 1: intros Hf; only 1: unfold respectful; only 1: intros x'; only 1: intros Hxx'; only 1: simpl_relation).	0.129105	42
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.div_mod_unique	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.lt_not_eq	40	0.1.2.0	synth with cache (only 1: intros H; only 1: intros EQ; only 1: contradict ltac:(H); only 1: order).	0.030029	7
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.lt_eq	40	0	synth with cache (only 1: intuition auto; OrderTac.subst_eqns; eauto using (StrictOrder_Transitive x y z) with *).	0.027207	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.proper_sym_arrow_iffT	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros R; only 1: intros Sym; only 1: intros f; only 1: intros Hf; only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: red in Hf; only 1: red in Hf; only 1: red in Hf; only 1: split; only 1: eauto; only 1: eauto).	0.104665	14
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.le_preorder	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.eq_lt	40	0	synth with cache (only 1: intuition auto; OrderTac.subst_eqns; eauto using (StrictOrder_Transitive x y z) with *).	0.022749	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.mod_unique	40	0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.0.0	synth with cache (only 1: intros a; only 1: intros b; only 1: intros q; only 1: intros r; only 1: intros Ha; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as (Hb, Hr); only 1: intros EQ; only 1: destruct (div_mod_unique b q (a / b) r (a mod b)); only 1: auto; only 1: apply mod_bound_pos; only 1: order; only 1: order; only 1: rewrite <- div_mod; only 1: order; only 1: order; only 1: auto).	0.120222	21
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.eq_le	40	0	synth with cache (only 1: order).	0.011775	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.neq_eq	40	0	synth with cache (only 1: order).	0.014678	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.nandP	40	0	synth with cache (only 1: by case b1; case b2; constructor; auto; case).	0.021878	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.proper_sym_impl_iff_2	40	2.2.0.2.2.0.1.1.1.1.4.0.0.0.0.0.0.0.0.0.0.1.1.0.0	synth with cache (only 1: intros Sym1; only 1: intros R1; only 1: intros Sym2; only 1: intros A; only 1: intros R; only 1: intros R3; only 1: intros f; only 1: intros Hf; only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: intros y; only 1: intros y'; only 1: intros Hyy'; only 1: red in Hf; only 1: red in Hf; only 1: red in Hf; only 1: red in Hf; only 1: split; only 1: apply Hf; only 1: eauto; only 1: eauto; only 1: apply Hf; only 1: eauto; only 1: eauto).	0.173390	43
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.eq_neq	40	0	synth with cache (only 1: order).	0.015865	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.le_eq	40	1	synth with cache (only 1: order).	0.113832	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.norP	40	0	synth with cache (only 1: by case b1; case b2; constructor; auto; case; auto).	0.022586	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.le_antisym	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.implyP	40	0	synth with cache (only 1: by case b1; case b2; constructor; auto; case).	0.020403	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.le_lt_trans	40	3.0	synth with cache (only 1: intuition auto; OrderTac.subst_eqns; eauto using (StrictOrder_Transitive x y z) with *; only 1: order).	0.029900	5
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andTb	40	1.2	synth with cache (only 1: intros P; only 1: reflexivity).	0.013362	5
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andFb	40	0	synth with cache (only 1: by [  ]).	0.009323	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.lt_le_trans	40	2.0	synth with cache (only 1: intuition auto; OrderTac.subst_eqns; eauto using (StrictOrder_Transitive x y z) with *; only 1: order).	0.029236	4
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.le_trans	40	0	synth with cache (only 1: order).	0.015181	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.proper_sym_impl_iff_2	40	4.16.6.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros Sym1; only 1: intros B; only 1: intros R2; only 1: intros Sym2; only 1: intros R; only 1: intros Sym; only 1: intros f; only 1: intros Hf; only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: intros y; only 1: intros y'; only 1: red in Hf; only 1: red in Hf; only 1: intros Hyy'; only 1: red in Hf; only 1: red in Hf; only 1: intuition; only 1: firstorder; only 1: eauto).	0.240559	50
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.le_antisym	40	1	synth with cache (only 1: order).	0.018041	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbF	40	3.21	synth with cache (only 1: intros H; only 1: Bool.destr_bool).	0.026093	26
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.le_neq	40	0	synth with cache (only 1: order).	0.015191	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbb	40	0	synth with cache (only 1: by case).	0.013769	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.proper_sym_arrow_iffT_2	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros A; only 1: intros R; only 1: intros Sym; only 1: intros B; only 1: intros R'; only 1: intros Sym'; only 1: intros f; only 1: intros Hf; only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: intros y; only 1: intros y'; only 1: intros Hyy'; only 1: red in Hf; only 1: red in Hf; only 1: red in Hf; only 1: red in Hf; only 1: split; only 1: eauto; only 1: eauto).	0.167199	21
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.neq_sym	40	0	synth with cache (only 1: order).	0.014566	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.divide_wd	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbA	40	0	synth with cache (only 1: by case).	0.010937	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.lt_le	40	0.0	synth with cache (only 1: intros H; only 1: order).	0.019533	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbT	40	2.3	synth with cache (only 1: intros P; only 1: Bool.destr_bool).	0.102352	7
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbC	40	0.23	synth with cache (only 1: intros P; only 1: Bool.destr_bool).	0.039763	25
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.gt_not_eq	40	0	synth with cache (only 1: order).	0.013314	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbCA	40	0	synth with cache (only 1: by do 2!case).	0.017174	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.eq_not_lt	40	0	synth with cache (only 1: order).	0.012054	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.eq_not_gt	40	0	synth with cache (only 1: order).	0.012447	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbAC	40	1	synth with cache (only 1: by do 3!case).	0.027128	2
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.lt_not_gt	40	0	synth with cache (only 1: order).	0.014347	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbACA	40	16	synth with cache (only 1: by do 3!case).	0.029220	17
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orTb	40	0	synth with cache (only 1: reflexivity).	0.012242	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.proper_sym_impl_iff	40	3.0.1.0.18.0.0.0.0.0.1.0.0	synth with cache (only 1: intros Sym; only 1: intros R2; only 1: intros Sym2; only 1: intros f; only 1: intros Hf; only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: split; only 1: apply Hf; only 1: apply Hxx'; only 1: apply Hf; only 1: auto).	0.603987	659
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orFb	40	0	synth with cache (only 1: by [  ]).	0.011881	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbT	40	2	synth with cache (only 1: Bool.destr_bool).	0.017808	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbF	40	0	synth with cache (only 1: by case).	0.014233	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbb	40	0	synth with cache (only 1: by case).	0.013589	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbC	40	0	synth with cache (only 1: by do 2!case).	0.017221	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbA	40	0	synth with cache (only 1: by do 3!case).	0.019785	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbCA	40	0	synth with cache (only 1: by do 3!case).	0.021067	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_lt_pred	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbAC	40	0	synth with cache (only 1: by do 3!case).	0.014930	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbACA	40	0	synth with cache (only 1: by do 4!case).	0.028811	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeTest.eq_is_nlt_ngt	40	3.3.2.2.0.1.1.1.1.1.6.2.6.2.2.3.1.2	synth with cache (unshelve (only 1: split; only 1: destruct (OrderTac.TO.compare_spec x y); only 1: destruct (OrderTac.TO.compare_spec x y); only 1: intuition; only 1: eapply OrderTac.lt_irrefl; only 1: order; only 1: eapply OrderTac.lt_irrefl; only 1: order; only 1: order; only 1: order; only 1: order; only 1: order; only 1: destruct (OrderTac.TO.compare_spec x y); only 1: auto; only 1: easy; only 1: easy); only 1: easy; only 1: easy).	0.184682	57
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbN	40	0	synth with cache (only 1: by case : b ).	0.016150	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andNb	40	0	synth with cache (only 1: by case : b ).	0.015577	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbN	40	0	synth with cache (only 1: by case : b ).	0.009251	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orNb	40	0	synth with cache (only 1: by case : b ).	0.010844	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_orl	40	4	synth with cache (only 1: by do 3!case).	0.029383	5
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_orr	40	0	synth with cache (only 1: by case).	0.013638	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orb_andl	40	0	synth with cache (only 1: by do 3!case).	0.020680	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orb_andr	40	0	synth with cache (only 1: by do 3!case).	0.022462	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_idl	40	7.7	synth with cache (only 1: Bool.destr_bool; only 1: intuition).	0.038349	16
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_idr	40	0	synth with cache (only 1: by case : a ; case : b  => // ->).	0.024565	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_id2l	40	0	synth with cache (only 1: by case : a ; case : b  => // ->).	0.024988	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_id2r	40	0	synth with cache (only 1: by case : a ; case : b ; case : c  => // ->).	0.027999	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.Odd_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_0_l'	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.divide_1_l	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orb_idl	40	0	synth with cache (only 1: by case : a ; case : b  => // ->).	0.020675	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orb_idr	40	0	synth with cache (only 1: by case : a ; case : b  => // ->).	0.020803	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_lt_mono_pos_l	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orb_id2l	40	0	synth with cache (only 1: by case : a ; case : b ; case : c  => // ->).	0.030598	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_spec	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orb_id2r	40	0	synth with cache (only 1: by case : a ; case : b ; case : c  => // ->).	0.031297	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_eq	40	0.0.0	synth with cache (only 1: intros H; only 1: apply compare_eq_iff; only 1: easy).	0.022988	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negb_and	40	0	synth with cache (only 1: Bool.destr_bool).	0.019863	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negb_or	40	0	synth with cache (only 1: by case : a ; case : b ).	0.018856	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.div_unique	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_refl	40	0.0	synth with cache (only 1: apply compare_eq_iff; only 1: easy).	0.017795	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andbK	40	0	synth with cache (only 1: by case : a ; case : b ).	0.017122	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andKb	40	0	synth with cache (only 1: by case : a ; case : b ).	0.021303	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orbK	40	0	synth with cache (only 1: by case : a ; case : b ).	0.018158	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.orKb	40	0	synth with cache (only 1: by case : a ; case : b ).	0.013836	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implybT	40	8	synth with cache (only 1: by case : b ).	0.016845	9
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implybF	40	1	synth with cache (only 1: by case : b ).	0.014050	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implyFb	40	0	synth with cache (only 1: by case : b ).	0.013129	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implyTb	40	0	synth with cache (only 1: by case : b ).	0.013528	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implybb	40	0	synth with cache (only 1: by case : b ).	0.014117	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.negb_imply	40	0	synth with cache (only 1: by case : a ; case : b ).	0.031047	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implybE	40	0	synth with cache (only 1: by case : a ; case : b ).	0.035211	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implybN	40	0	synth with cache (only 1: by case : a ; case : b ).	0.019788	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implyNb	40	0	synth with cache (only 1: by case : a ; case : b ).	0.043223	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implybNN	40	0	synth with cache (only 1: by case : a ; case : b ).	0.015068	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implyb_idl	40	0	synth with cache (only 1: by case : a ; case : b  => // ->).	0.020024	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.div_same	40	0.0.1.0.0.5.0.0	synth with cache (only 1: intros m; only 1: intros Hb; only 1: symmetry; only 1: apply div_unique with 0; only 1: order; only 1: intuition order; only 1: nzsimpl; only 1: order).	0.094442	14
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implyb_idr	40	0	synth with cache (only 1: by case : a ; case : b  => // ->).	0.023648	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.implyb_id2l	40	0	synth with cache (only 1: by case : a ; case : b ; case : c  => // ->).	0.029330	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbb	40	1	synth with cache (only 1: by case).	0.013679	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbF	40	0	synth with cache (only 1: by case).	0.021840	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addFb	40	0	synth with cache (only 1: by [  ]).	0.025636	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbC	40	0	synth with cache (only 1: by do 2!case).	0.016702	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbA	40	0	synth with cache (only 1: by do 3!case).	0.019510	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbCA	40	0	synth with cache (only 1: by do 3!case).	0.020518	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbAC	40	0	synth with cache (only 1: by do 3!case).	0.022371	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbACA	40	0	synth with cache (only 1: by do 4!case).	0.027305	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_addl	40	0	synth with cache (only 1: by do 3!case).	0.017335	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.andb_addr	40	0	synth with cache (only 1: by do 3!case).	0.020467	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addKb	40	1	synth with cache (only 1: by do 2!case).	0.018584	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbK	40	0	synth with cache (only 1: by do 2!case).	0.016273	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addIb	40	1	synth with cache (only 1: by do 3!case).	0.026424	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbI	40	2	synth with cache (only 1: by do 3!case).	0.028786	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addTb	40	0	synth with cache (only 1: by case : b ).	0.014711	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbT	40	1	synth with cache (only 1: by case : b ).	0.016945	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbN	40	0	synth with cache (only 1: by case : a ; case : b ).	0.016955	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addNb	40	0	synth with cache (only 1: by case : a ; case : b ).	0.016596	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.addbP	40	0.0.0.27.0.0.0.27.3	synth with cache (only 1: destruct b; only 1: Bool.destr_bool; only 1: intuition; only 1: constructor; only 1: easy; only 1: Bool.destr_bool; only 1: constructor; only 1: easy; only 1: intuition).	0.077398	66
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.sub_refl	40	3.18	synth with cache (only 1: red; only 1: auto).	0.022600	23
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.subrelUl	40	37.25.13.14	synth with cache (only 1: intros Hx''; only 1: Bool.destr_bool; only 1: red; only 1: intuition).	0.082851	93
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.subrelUr	40	12.19.14.15	synth with cache (only 1: intros Hx''; only 1: Bool.destr_bool; only 1: red; only 1: intuition).	0.079135	64
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.topredE	40	0	synth with cache (only 1: by case : pT pp ).	0.015229	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.in_simpl	40	0	synth with cache (only 1: by case : msp  => _ /= ->).	0.017292	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.mem_topred	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.unfold_in	40	3	synth with cache (only 1: by rewrite -mem_topred).	0.018844	4
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.simpl_predE	40	2	synth with cache (only 1: by [  ]).	0.014783	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.mem_simpl	40	0	synth with cache (only 1: by [  ]).	0.014483	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.qualifE	40	1	synth with cache (only 1: by [  ]).	0.026577	2
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.nil_cons	40	0.0	synth with cache (only 1: intros m; only 1: discriminate).	0.044451	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalProperties.forE	40	2	synth with cache (only 1: reflexivity).	0.013384	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.in2W	40	0	synth with cache (only 1: by move  =>? ?).	0.018589	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.in1W	40	0.6	synth with cache (only 1: intros x0; only 1: by [  ]).	0.048487	8
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.in3W	40	0	synth with cache (only 1: by move  =>? ?).	0.019564	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.in1T	40	18.10	synth with cache (only 1: intros; only 1: auto).	0.032832	30
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.in2T	40	1	synth with cache (only 1: by move  =>? ?; auto).	0.031860	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.in3T	40	0	synth with cache (only 1: by move  =>? ?; auto).	0.034178	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.sub_in1	40	0	synth with cache (only 1: by move  =>? ?; auto).	0.020628	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.sub_in11	40	1	synth with cache (only 1: by move  =>? ?; auto).	0.021839	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.mem_mem	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.sub_in111	40	1	synth with cache (only 1: by move  =>? ?; auto).	0.040634	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.on1W	40	0	synth with cache (only 1: by move  =>? ?).	0.019037	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.on1lW	40	0	synth with cache (only 1: by move  =>? ?).	0.020571	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.on2W	40	0	synth with cache (only 1: by move  =>? ?).	0.018128	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.on1T	40	1	synth with cache (only 1: by move  =>? ?; auto).	0.028854	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.on1lT	40	1	synth with cache (only 1: by move  =>? ?; auto).	0.021702	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.on2T	40	0	synth with cache (only 1: by move  =>? ?; auto).	0.024666	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT.eq_sigT_uncurried_iff	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.subon1	40	1	synth with cache (only 1: by move  =>? ?; auto).	0.021214	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.subon1l	40	0	synth with cache (only 1: by move  =>allQ x /sub2; apply : allQ ).	0.025904	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.subon2	40	3	synth with cache (only 1: by move  =>? ?; auto).	0.041063	4
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.Equiv_from_order	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.and_hprop	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.on_can_inj	40	0	synth with cache (only 1: by move  =>fK x y /fK {+2}<- /fK {+2}<- ->).	0.043243	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.canLR_on	40	1	synth with cache (only 1: by move  =>fK D1y ->; rewrite fK).	0.035453	2
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.elimFn	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.Str_nth_plus	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.canRL_on	40	2	synth with cache (only 1: by move  =>fK D1x <-; rewrite fK).	0.040390	3
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Strict_inclusion_is_transitive_with_inclusion_left	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.cong_reflexive_same_relation	40	0.11.6.0.1.0.0.0	synth with cache (only 1: intros A; only 1: intros y; only 1: intros x''; only 1: intros h1; only 1: intros H2; only 1: intros h; only 1: apply h1; only 1: auto with sets).	0.172754	26
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.diagonal_inverse1	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Clos_Refl_Sym_Trans.clos_rst_is_equiv	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Inhabited_not_empty	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded.well_founded_induction_type	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.onW_bij	40	0	synth with cache (only 1: by case  =>g' fK g'K; exists g' => * ? *; auto).	0.037800	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.cong_symmetric_same_relation	40	0.0	synth with cache (only 1: unfold same_relation; only 1: intuition).	0.045156	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Singleton_intro	40	2.3.0.0.0	synth with cache (only 1: intros x; only 1: intros y; only 1: intros H'; only 1: elim H'; only 1: auto using Add_intro2 with sets).	0.080291	10
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.inT_bij	40	0	synth with cache (only 1: by case  =>g' fK g'K; exists g' => * ? *; auto).	0.045546	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationClasses.predicate_equivalence_equivalence_obligation_3	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_t1n_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.lt_irrefl	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.surjective_pairing	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.onT_bij	40	0	synth with cache (only 1: by case  =>g' fK g'K; exists g' => * ? *; auto).	0.039614	1
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.mult_n_Sm	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.per_partial_app_type_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.nat_case	40	2.0.16.0	synth with cache (only 1: intros; only 1: induction n; only 1: assumption; only 1: trivial).	0.030417	22
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.rew_pair	40	0.2.1	synth with cache (only 1: intros until H; only 1: destruct H; only 1: reflexivity).	0.035717	6
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.iffP	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.nat_double_ind	40	1.1.4.3.2.3.2	synth with cache (only 1: intros until n; only 1: induction n; only 1: auto; only 1: intros m; only 1: destruct m; only 1: auto; only 1: auto).	0.047731	23
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.Generic.Paradox.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.sumboolP	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Product.WfLexicographic_Product.wf_lexprod	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_comm	40		synth with cache (only 1: destruct (max_spec m n) as [_tmp_tactician0| _tmp_tactician0]; only 1: intuition; only 1: destruct (max_spec m n) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: rewrite E'; only 1: apply max_l; only 1: order; only 1: destruct _tmp_tactician0 as (H', E'); only 1: rewrite E'; only 1: order; only 1: intuition; only 1: destruct (max_spec m n) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: rewrite E'; only 1: apply max_l; only 1: destruct (lt_total n m); only 1: order; only 1: rewrite le_lteq; only 1: intuition; only 1: destruct _tmp_tactician0 as (H', E'); only 1: rewrite E'; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: symmetry; only 1: apply max_r; only 1: order).	35.642252	5893
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.sameP	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT2.rew_sigT2	40	0.0.0	synth with cache (only 1: destruct H; only 1: destruct u; only 1: reflexivity).	0.092575	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.appP	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.HasEqBool2Dec.eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.decPcases	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Distributivity	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.BoolEqualityFacts.eqb_spec	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.Reflect.rwP2	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Permut.Axiomatisation.comm_right	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.nzhead_revapp_0	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.EqdepDec.eq_proofs_unicity_on	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.unique_existence	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Distributivity_l	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractToModalProposition.Paradox.Forall	40	3.10	synth with cache (only 1: red; only 1: eauto).	0.025399	15
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.trans_sym_contra_impl_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.forall_exists_unique_domain_coincide	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_congr	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig2.eq_exist2_uncurried	40	0.0.0.0.0.0	synth with cache (only 1: destruct pqr as [p q r]; only 1: destruct r; only 1: destruct q; only 1: destruct p; only 1: simpl in *; only 1: reflexivity).	0.097546	6
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssreflect.nary_congruence	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.functional_extensionality_dep_good_refl	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.le_not_gt_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_sig_snd	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.sub_in_bij	40	0.36	synth with cache (only 1: intros ?; only 1: by case  =>g' fK g'K; exists g' => * ? *; auto).	0.579393	791
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.forall_exists_coincide_unique_domain	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Equivalences.UIP_on__UIP_refl_on	40	11.0.0.0	synth with cache (only 1: intros eq_dep_eq; only 1: red; only 1: intros; only 1: auto).	0.044894	15
coq-tactician-stdlib.8.11.dev	Coq.Bool.Sumbool.bool_of_sumbool	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.unless_sym	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.unlessP	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.bind_unless	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.GenericMinMax.ge_not_lt	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig2.eq_sig2_uncurried	40	0.0.0.0.0.1.0.0.0	synth with cache (only 1: destruct u as [u1 u2 u3]; only 1: destruct v as [v1 v2 v3]; only 1: simpl in *; only 1: destruct pqr as [p q r]; only 1: destruct r; only 1: destruct q; only 1: destruct p; only 1: simpl; only 1: reflexivity).	0.148410	10
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.trans_co_eq_inv_arrow_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.le_or_gt	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.PER_type_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.per_partial_app_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.subon_bij	40	0	synth with cache (only 1: by move  =>subD [g' fK g'K]; exists g' => x; move /subD ; [ apply : fK  | apply : g'K  ]).	0.054925	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.GenericMinMax.max_l	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.uniset_twist1	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.le_antisym	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFullFacts.lt_or_ge	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.inj_comp	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.classic_bind	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.classicP	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.classic_pick	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.classic_EM	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig2.eq_sig2_uncurried_iff	40	0.0.1.0.1.8.19.0.0.0.0.1.0.0.0.0.0.0	synth with cache (only 1: split; only 1: intros ?; only 1: subst; only 1: exists eq_refl; only 1: reflexivity; only 1: reflexivity; only 1: intros ?; only 1: destruct u as [u1 u2 u3]; only 1: destruct v as [v1 v2 v3]; only 1: simpl in *; only 1: apply eq_exist2_uncurried; only 1: destruct H; only 1: subst; only 1: exists eq_refl; only 1: simpl in *; only 1: reflexivity; only 1: simpl in *; only 1: reflexivity).	0.325955	48
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.classic_imply	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.neq_eq	40	0	synth with cache (only 1: eauto using eq_trans, eq_sym).	0.020349	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFacts.if_eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFacts.lt_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFacts.eqb_alt	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.idP	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_ngt_iff	40	0.0.0.0	synth with cache (only 1: rewrite <- compare_lt_iff; only 1: rewrite compare_antisym; only 1: rewrite CompOpp_iff; only 1: easy).	0.060817	4
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.le_max_r	40	0	synth with cache (only 1: solve_max).	0.044598	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_nlt_iff	40	0.0.0.0.0.0.2	synth with cache (only 1: rewrite <- compare_lt_iff; only 1: rewrite compare_antisym; only 1: rewrite compare_antisym; only 1: rewrite compare_antisym; only 1: rewrite compare_antisym; only 1: rewrite compare_antisym; only 1: easy).	0.080212	9
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_r_iff	40	0	synth with cache (only 1: solve_max).	0.061717	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.GenericMinMax.max_r	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.GenericMinMax.min_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_le_incl	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_0_r	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZBase.NZBaseProp.eq_stepl	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_refl	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_spec_le	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_succ_diag_r	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.Proper_instance_0	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_succ_diag_r	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractToModalProposition.Paradox.strength	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.andP	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.neq_succ_diag_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.neq_succ_diag_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.nlt_succ_diag_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_succ_r	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.and4P	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_succ_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZBase.NZBaseProp.succ_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_succ_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_comm	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_1_r	40	0.0.0	synth with cache (only 1: intros n; only 1: nzsimpl'; only 1: easy).	0.064989	3
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_trichotomy	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_gt_cases	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_lt_mono_l	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_compat	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_asymm	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_lt_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_unicity_ext	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_unicity	40
coq-tactician-stdlib.8.11.dev	Coq.micromega.Refl.make_impl_true	40	2.0.3.1	synth with cache (only 1: intros until l; only 1: induction l; only 1: constructor; only 1: easy).	0.065717	10
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_assoc	40	0.0.0.0.2.0.29.0.0.0	synth with cache (only 1: intros x; only 1: intros n; only 1: intros m; only 1: nzinduct n; only 1: nzsimpl; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite succ_inj_wd; only 1: easy).	0.218429	41
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_le_mono_l	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.ListDec.Dec_in_Prop.In_decidable	40	10.0.0.1.0.20.0.3	synth with cache (only 1: induction l as [| y l]; only 1: simpl in *; only 1: unfold decidable; only 1: unfold not; only 1: right; only 1: trivial; only 1: simpl; only 1: intuition).	0.420957	636
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_neq	40	0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros LT; only 1: intros EQ; only 1: rewrite EQ in LT; only 1: false_hyp LT lt_irrefl).	0.061221	6
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_trans	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.and5P	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_stepl	40	0.0.0.0	synth with cache (only 1: intros x; only 1: intros y; only 1: intros z; only 1: intuition auto; Private_OrderTac.Tac.subst_eqns; eauto using (StrictOrder_Transitive x y z) with *).	0.055146	4
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_stepr	40	0.0.0.0	synth with cache (only 1: intros x; only 1: intros y; only 1: intros z; only 1: intuition auto; Private_OrderTac.Tac.subst_eqns; eauto using (StrictOrder_Transitive x y z) with *).	0.060139	4
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_stepr	40	1.0.0.0	synth with cache (only 1: intros x; only 1: intros y; only 1: intros z; only 1: intuition auto; Private_OrderTac.Tac.subst_eqns; eauto using (StrictOrder_Transitive x y z) with *).	0.050291	5
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_cancel_r	40	0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros p; only 1: nzinduct p; only 1: nzsimpl; only 1: easy; only 1: intros p; only 1: nzsimpl; only 1: rewrite succ_inj_wd; only 1: easy).	0.165764	10
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_le_iff	40	0.0.0.5.1.0.0.0.4.1.0	synth with cache (only 1: destruct (max_spec n m); only 1: intuition; only 1: right; only 1: order; only 1: order; only 1: order; only 1: intuition; only 1: left; only 1: order; only 1: order; only 1: order).	0.195571	22
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_succ_l	40	0.0.3.0.0.0	synth with cache (only 1: intros x; only 1: intros y; only 1: intros H; only 1: apply le_succ_l; only 1: apply lt_le_incl; only 1: easy).	0.059266	9
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_le_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_lt_iff	40	0.0.0.0.0.0.0.1.0	synth with cache (only 1: split; only 1: destruct (max_spec n m); only 1: right; only 1: intuition; only 1: order; only 1: left; only 1: intuition; only 1: order; only 1: solve_max).	0.136983	10
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.sub_in12	40	4.14	synth with cache (only 1: intros; only 1: by move  =>? ?; auto).	0.061853	20
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_lub_r	40	0	synth with cache (only 1: solve_max).	0.048593	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_lub_l	40	0.1.0.1.1	synth with cache (only 1: destruct (max_spec n m); only 1: intuition; only 1: order; only 1: intuition; only 1: order).	0.074216	8
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.sub_in21	40	0	synth with cache (only 1: by move  =>/= sub1 sub; apply : sub_in111 ).	0.020236	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_lub	40	0.1.0.1.1	synth with cache (only 1: destruct (max_spec n m); only 1: intuition; only 1: order; only 1: intuition; only 1: order).	0.077302	8
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_shuffle0	40	0.0.0.0.0.0.0.0.0.0.8.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros p; only 1: nzinduct n; only 1: nzsimpl; only 1: nzinduct p; only 1: nzsimpl; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite succ_inj_wd; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite succ_inj_wd; only 1: easy).	0.273283	24
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_lub_lt	40	0	synth with cache (only 1: solve_max).	0.047761	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_lub_iff	40	0.0.0.2.0.0.2.1.0	synth with cache (only 1: split; only 1: destruct (max_spec n m); only 1: intuition; only 1: order; only 1: order; only 1: intuition; only 1: order; only 1: order; only 1: solve_max).	0.132725	14
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_add_distr_l	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_lub_lt_iff	40	0.0.0.0.0.0.0.0.0	synth with cache (only 1: destruct (max_spec n m); only 1: intuition; only 1: order; only 1: order; only 1: order; only 1: intuition; only 1: order; only 1: order; only 1: order).	0.134913	9
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.sub_in3	40	6.31.15.2.11.6.6.0.3.7	synth with cache (only 1: intros _tmp_tactician0; only 1: intros y; only 1: intros H0; only 1: intros H2; only 1: intros ?; only 1: intros x''; only 1: case  =>// undecP; only 1: intros H'; only 1: intros HPx1; only 1: auto).	0.644528	824
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.orP	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_le_compat_r	40	0.0.0	synth with cache (only 1: intros; only 1: apply max_lub_iff; only 1: solve_max).	0.075534	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.mono2W	40	9	synth with cache (only 1: by move  =>eq_fg eq_gh x; rewrite eq_fg).	0.053526	10
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_1_l	40	0.0.0.0.0.1.0	synth with cache (only 1: nzinduct n; only 1: nzsimpl'; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite succ_inj_wd; only 1: easy).	0.113389	8
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_le_compat	40	0.0.1	synth with cache (only 1: intros; only 1: apply max_lub_iff; only 1: solve_max).	0.184631	4
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.homoLR	40	0	synth with cache (only 1: by move  =>Hf x y /Hf; rewrite fgK).	0.049395	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_1_r	40	0.0.0	synth with cache (only 1: intros n; only 1: nzsimpl'; only 1: easy).	0.066655	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.mono2W_in	40	0	synth with cache (only 1: by move  =>hf x ax; rewrite hf).	0.038011	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.homoLR_in	40	0	synth with cache (only 1: by move  =>Hf x y hx hy /Hf; rewrite fgK_on //; apply).	0.062234	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_assoc	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_id	40	0.1	synth with cache (only 1: apply min_l; only 1: order).	0.036021	3
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.all_sig_cond	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NIso.Homomorphism.natural_isomorphism_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAddOrder.ZAddOrderProp.lt_0_sub	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NIso.Homomorphism.natural_isomorphism_0	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NMulOrder.NMulOrderProp.square_lt_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NOrder.NOrderProp.lt_wf_0	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAdd.ZAddProp.add_pred_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZMul.ZMulProp.mul_pred_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZLt.ZOrderProp.neg_pos_cases	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.injective_projections	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.CompOpp_involutive	40	0.0.0.1.4	synth with cache (only 1: intros H; only 1: destruct H; only 1: reflexivity; only 1: reflexivity; only 1: reflexivity).	0.034871	10
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded.FixPoint.Fix_F_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NAddOrder.NAddOrderProp.lt_lt_add_r	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.all_sig_cond_dep	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.symmetric_equiv_flip	40		synth with cache (only 1: hnf; only 1: intros x; only 1: intros y; only 1: hnf; only 1: split; only 1: intros H'; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: assumption; only 1: intros H'; only 1: red in H'; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: apply symmetry; only 1: assumption).	14.691697	5328
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqke_eqk	40	6.0	synth with cache (only 1: induction 1; only 1: intuition).	0.053287	8
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqk_refl	40	0	synth with cache (only 1: auto).	0.033160	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelCompFun_Instances.RelCompFun_Reflexive	40	1	synth with cache (only 1: firstorder).	0.027013	2
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqke_refl	40	0	synth with cache (only 1: auto).	0.043870	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelCompFun_Instances.RelCompFun_Symmetric	40	0	synth with cache (only 1: firstorder).	0.045345	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqk_sym	40	1.0	synth with cache (only 1: unfold eqk; only 1: auto).	0.048982	3
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelCompFun_Instances.RelCompFun_Transitive	40	0	synth with cache (only 1: firstorder).	0.072357	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.or3P	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelCompFun_Instances.RelCompFun_Irreflexive	40	0	synth with cache (only 1: firstorder).	0.030561	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.RelProd_Reflexive	40	0.4	synth with cache (only 1: intros x'; only 1: firstorder).	0.046531	6
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.RelProd_Symmetric	40	0	synth with cache (only 1: firstorder).	0.117560	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NParity.NParityProp.even_pred	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.RelProd_Transitive	40	23.2.2.6.0.14.0.0.5	synth with cache (only 1: compute; only 1: intros x; only 1: intros x'; only 1: intros x0; only 1: split; only 1: simpl_relation; only 1: firstorder; only 1: intuition; only 1: firstorder).	0.558889	61
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.FstRel_ProdRel	40	0	synth with cache (only 1: firstorder).	0.036912	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.SndRel_ProdRel	40	0.1	synth with cache (only 1: intros x; only 1: firstorder).	0.066376	3
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.FstRel_sub	40	0	synth with cache (only 1: firstorder).	0.029476	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.SndRel_sub	40	0	synth with cache (only 1: firstorder).	0.029990	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.pair_compat	40	0.5.0.0.2	synth with cache (only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: intros y'; only 1: firstorder).	0.066472	12
coq-tactician-stdlib.8.11.dev	Coq.Logic.Berardi.Berardis_paradox.Retracts.AC	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.fst_compat	40	0	synth with cache (only 1: firstorder).	0.050164	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.snd_compat	40	1.1	synth with cache (only 1: intros x; only 1: firstorder).	0.047218	4
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Equivalences.eq_rect_eq_on__eq_dep1_eq_on	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Equivalences.Streicher_K_on__eq_rect_eq_on	40	3.0.3.4.0.14.0	synth with cache (only 1: intros eq_rect_eq; only 1: red; only 1: intros ?; only 1: rewrite <- eq_rect_eq; only 1: trivial; only 1: simpl; only 1: trivial).	0.064319	31
coq-tactician-stdlib.8.11.dev	Coq.Classes.RelationPairs.RelProd_Instances.RelCompFun_compat	40	3.2.81.1.0.2.0.0.0	synth with cache (only 1: intros x; only 1: intros x'; only 1: intros Hxx'; only 1: intros y; only 1: intros y'; only 1: intros eqij; only 1: apply H; only 1: auto; only 1: auto).	0.597616	98
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivTrunc.ZQuotProp.rem_eq	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.inj_compr	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NDefOps.NdefOpsProp.if_zero_wd	40	4.0.1.4.0.1.6.19.12.30.0.1.0.5.0.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros x2; only 1: intros H1; only 1: intros x3; only 1: intros x4; only 1: intros H2; only 1: intros a; only 1: intros x'; only 1: destruct H2; only 1: intros H2; only 1: inversion H1; only 1: inversion H; only 1: compute; only 1: induction H; only 1: f_equiv; only 1: intros y; only 1: intros ?; only 1: intros Hz; only 1: auto with *; only 1: order).	0.380210	103
coq-tactician-stdlib.8.11.dev	Coq.FSets.FSetBridge.DepOfNodep.empty	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Integers.Integers_sect.le_reflexive	40	8	synth with cache (only 1: easy).	0.097331	9
coq-tactician-stdlib.8.11.dev	Coq.Sets.Integers.Integers_sect.le_antisym	40	2.0.1	synth with cache (only 1: intros H'3; only 1: intros y; only 1: PeanoNat.Nat.order).	0.153652	6
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.eq_stepl	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Integers.Integers_sect.le_trans	40	8.1.2.0.0.0.0	synth with cache (only 1: red; only 1: intros x; only 1: intros y; only 1: intros z; only 1: intros H'3; only 1: intros _tmp_tactician2; only 1: PeanoNat.Nat.order').	0.214639	18
coq-tactician-stdlib.8.11.dev	Coq.Sets.Integers.Integers_sect.le_Order	40	0.0.0.0.0.2.0.0.0.0.0.0.0.0.4.0.0.3	synth with cache (only 1: split; only 1: red; only 1: intros ?; only 1: apply PeanoNat.Nat.le_refl; only 1: red; only 1: intros; only 1: apply PeanoNat.Nat.le_trans with y; only 1: auto; only 1: auto; only 1: red; only 1: intros x; only 1: intros y; only 1: intros H; only 1: intros H'; only 1: rewrite (PeanoNat.Nat.le_antisymm x y); only 1: auto; only 1: auto; only 1: auto).	0.732775	27
coq-tactician-stdlib.8.11.dev	Coq.Sets.Integers.Integers_sect.triv_nat	40	0.0	synth with cache (only 1: intros; only 1: easy).	0.117733	2
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetWeakList.MakeRaw.ForNotations.In_compat	40	0	synth with cache (only 1: solve_proper).	0.083262	1
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapList.Raw.Elt.empty_1	40	6.9.0.0.16	synth with cache (only 1: intros IN; only 1: intros; only 1: red; only 1: intros; only 1: easy).	0.421415	36
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapList.Raw.Elt.empty_sorted	40	1	synth with cache (only 1: constructor).	0.041898	2
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqke_eqk	40	2.0.5.1	synth with cache (only 1: simpl_relation; only 1: compute in H; only 1: compute in *; only 1: easy).	0.215691	12
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapWeakList.Raw.Elt.empty_1	40	1.0.9	synth with cache (only 1: intros IN; only 1: intros n; only 1: easy).	0.156573	13
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqke_def	40	2	synth with cache (only 1: auto).	0.098066	3
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapWeakList.Raw.Elt.empty_NoDup	40	0.62	synth with cache (only 1: compute; only 1: intuition).	0.191461	64
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqke_def'	40	0	synth with cache (only 1: auto).	0.082630	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqke_1	40	14.12	synth with cache (only 1: intuition; only 1: apply H).	0.195677	28
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqke_2	40	0.18.3	synth with cache (only 1: intros; only 1: destruct H; only 1: easy).	0.184824	24
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqk_def	40	1	synth with cache (only 1: firstorder).	0.100069	2
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqk_def'	40	0	synth with cache (only 1: reflexivity).	0.090802	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.eqk_1	40	2	synth with cache (only 1: firstorder).	0.087215	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.le_pred	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.pair_equal_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.le_S_n	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.CompOpp_iff	40	0.0.6.0.0.8.0.0.7.0.0.0.0.8.0.0.6.0.0.7.0.0.0.0.7.0.0.7.0.0.5.0.0.0.0	synth with cache (only 1: intros until c; only 1: destruct c; only 1: intros until c'; only 1: destruct c'; only 1: split; only 1: auto; only 1: auto; only 1: split; only 1: discriminate; only 1: discriminate; only 1: split; only 1: discriminate; only 1: discriminate; only 1: intros until c'; only 1: destruct c'; only 1: split; only 1: discriminate; only 1: discriminate; only 1: split; only 1: auto; only 1: auto; only 1: split; only 1: auto; only 1: auto; only 1: intros until c'; only 1: destruct c'; only 1: split; only 1: discriminate; only 1: discriminate; only 1: split; only 1: auto; only 1: auto; only 1: split; only 1: auto; only 1: auto).	0.143182	96
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.min_l	40	0.0.0.0.1.0.1.0.0.0.1.0.0.0.0.0.0.0	synth with cache (only 1: revert m; only 1: induction n; only 1: intros until m; only 1: destruct m; only 1: simpl; only 1: trivial; only 1: simpl; only 1: trivial; only 1: intros until m; only 1: destruct m; only 1: simpl; only 1: inversion 1; only 1: simpl; only 1: intros; only 1: apply f_equal; only 1: apply IHn; only 1: apply le_S_n; only 1: trivial).	0.118471	21
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.CompareSpec2Type	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.min_r	40	0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.0.0	synth with cache (only 1: revert m; only 1: induction n; only 1: intros until m; only 1: destruct m; only 1: simpl; only 1: trivial; only 1: simpl; only 1: inversion 1; only 1: intros until m; only 1: destruct m; only 1: simpl; only 1: trivial; only 1: simpl; only 1: intros; only 1: apply f_equal; only 1: apply IHn; only 1: apply le_S_n; only 1: trivial).	0.130440	20
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.nat_rect_succ_r	40	0.11.1.0.0	synth with cache (only 1: induction n; only 1: auto; only 1: simpl; only 1: apply f_equal; only 1: auto).	0.049242	17
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig.eq_sig_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex.eq_ex_uncurried	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT2.eq_existT2_uncurried	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig2.rew_sig2	40	0.0.0	synth with cache (only 1: destruct H; only 1: destruct u; only 1: reflexivity).	0.127525	3
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.Choice_lemmas.Choice	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.FunctExt_iff_EqDeltaProjs	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.DecBool.ifdec_right	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.EqSt_reflex	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropExtensionalityFacts.PredExt_imp_PropFunExt	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropExtensionalityFacts.PropExt_and_PropFunExt_imp_PredExt	40	17.0.1.0.1.1.0	synth with cache (only 1: intros Ext; only 1: intros A; only 1: intros Q; only 1: intros P; only 1: intros B; only 1: intros Eq; only 1: auto).	0.056345	27
coq-tactician-stdlib.8.11.dev	Coq.Sets.Permut.Axiomatisation.perm_right	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Inverse_Image.Inverse_Image.Acc_inverse_image	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Partial_Order.Partial_order_facts.Strict_Rel_Transitive_with_Rel_left	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.same_relation_is_equivalence	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.BoolEq.Bool_eq_dec.beq_false_not_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Inverse_Image.Inverse_Image.wf_inverse_image	40	0.0.0.6.0	synth with cache (only 1: intros; only 1: intros x; only 1: apply (Acc_lemma (f x)); only 1: trivial; only 1: trivial).	0.042225	11
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.Choice_lemmas.Choice2	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ProofIrrelevanceFacts.ProofIrrelevanceTheory.subset_eq_compat	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Transitive_Closure.Wf_Transitive_Closure.Acc_inv_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ProofIrrelevanceFacts.ProofIrrelevanceTheory.subsetT_eq_compat	40	0.0.0.0	synth with cache (only 1: intros; only 1: rewrite M.proof_irrelevance with (p1 := q) (p2 := (eq_rect x P p y H)); only 1: elim H using eq_indd; only 1: reflexivity).	0.039777	4
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Disjoint_Union.Wf_Disjoint_Union.acc_B_sum	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Transitive_Closure.Wf_Transitive_Closure.wf_clos_trans	40	3.1.0.1.1	synth with cache (only 1: red; only 1: intros y; only 1: intros H2; only 1: apply Acc_intro; only 1: auto).	0.049556	11
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.forall_eq_rect_comp	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.sym_EqSt	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rstar_transitive	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropExtensionalityFacts.PropExt_and_PropFunExt_iff_PredExt	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.2.0.0.0.0.0.0.0.3	synth with cache (only 1: split; only 1: intros FunExt; only 1: intros A; only 1: intros P; only 1: intros Q; only 1: intros Equiv; only 1: apply FunExt; only 1: intros x; only 1: apply FunExt; only 1: easy; only 1: intros Ext; only 1: split; only 1: intros A; only 1: intros B; only 1: intros Equiv; only 1: change A with ((fun _ => A) I); only 1: rewrite Ext with (P := (fun _ : True => A)) (Q := (fun _ => B)); only 1: easy; only 1: easy; only 1: intros A; only 1: intros P; only 1: intros Q; only 1: intros Eq; only 1: apply Ext; only 1: intros x; only 1: rewrite (Eq x); only 1: easy).	0.181478	47
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.eta_expansion_dep	40	1	synth with cache (only 1: reflexivity).	0.026524	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Add_not_Empty	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.uniset_twist2	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Well_Ordering.Characterisation_wf_relations.wof	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.eta_expansion	40	1	synth with cache (only 1: reflexivity).	0.072648	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.treesort_twist1	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.hset_hprop	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.Choice_lemmas.bool_choice	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.JMeq.JMeq_eq_dep	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.absurd_set	40	0.0.0.0.0.0	synth with cache (only 1: unfold not; only 1: intros A; only 1: intros C; only 1: intros h1; only 1: intros h2; only 1: destruct (h2 h1)).	0.044977	6
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT2.eq_sigT2_uncurried	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Equivalences.eq_rect_eq_on__eq_dep_eq_on	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NIso.Homomorphism.natural_isomorphism_succ	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ClassicalFacts.prop_degen_ext	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Singleton_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.f_equal__functional_extensionality_dep_good	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Intersection_inv	40	0.0.0.0.0.0	synth with cache (only 1: intros B; only 1: intros C; only 1: intros x; only 1: intros H'; only 1: elim H'; only 1: auto with sets).	0.058457	6
coq-tactician-stdlib.8.11.dev	Coq.Bool.IfProp.IfProp_or	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.le_n_S	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT2.eq_sigT2_uncurried_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sigT2.eq_sigT2_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Logic.ex.rew_ex	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_1_r	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Equivalences.eq_dep_eq_on__UIP_on	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_unique	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rstar_cases	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.EqdepDec.K_dec_on	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.f_eq_dep	40	1.6.1	synth with cache (only 1: intros; only 1: destruct H; only 1: auto).	0.023924	11
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_trans_t1n_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Measure_well_founded.measure_wf	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_trans_t1n	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Subset.match_eq_rewrite	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_tn1_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Union.WfUnion.Acc_union	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Relations.inverse_image_of_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_3_facts.coherent_symmetric	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.StreamMemo.MemoFunction.imemo_get_correct	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Prop.Acc_rel_morphism	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.EqdepDec.inj_right_pair_on	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Uniset.defs.treesort_twist2	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rt1n_rt	40	0.0.5.0.0	synth with cache (only 1: induction 1; only 1: auto with sets; only 1: apply rt_trans with y; only 1: auto with sets; only 1: auto).	0.050991	10
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Product.Wf_Symmetric_Product.Acc_symprod	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_trans_tn1	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.can_comp	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.pcan_pcomp	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Strict_inclusion_is_transitive	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.BoolEqualityFacts.eqb_compat	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.eq_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Empty_set_is_Bottom	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Distributivity'	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NIso.Homomorphism.hom_nat_iso	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Union_increases_l	40	0	synth with cache (only 1: auto with sets).	0.025551	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Union_add	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.trans_co_eq_inv_impl_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Union_increases_r	40	0	synth with cache (only 1: auto with sets).	0.025070	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.CEquivalence.pointwise_equivalence	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Non_disjoint_union	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Equivalence.pointwise_equivalence	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Intersection_decreases_l	40	0.0.0.0.0.1	synth with cache (only 1: intros y; only 1: intros X; only 1: intros z; only 1: intros H'1; only 1: elim H'1; only 1: auto with sets).	0.051062	7
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Intersection_maximal	40	1.1.4.4.13.7.0.7.5.0.8.4.0.5.14.9.0.5.6.0.10.7.0.8.5.9.0.8.5.0.6.1.0.0.0.0.0.0.0.0	synth with cache (only 1: intros a; only 1: intros b; only 1: intros X; only 1: intros H'; only 1: intros H'0; only 1: red; only 1: intros x; only 1: intros H'1; only 1: red; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: intros H'2; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: intros y; only 1: intros; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: intros; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: intros; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: clear H; only 1: intros h; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: intros; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: intros; only 1: elim Strict_Rel_is_Strict_Included; only 1: unfold contains; only 1: unfold Strict_Rel_of at 1; only 1: intros H'8; only 1: intros H'6; only 1: split; only 1: auto with sets; only 1: auto with sets).	0.366748	192
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Fix_rects.Fix_F_sub_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Intersection_decreases_r	40	0.0.0.0.0.0.0	synth with cache (only 1: intros a; only 1: intros b; only 1: red; only 1: intros x; only 1: intros H'; only 1: elim H'; only 1: auto with sets).	0.054517	7
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.PER_morphism_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.eq_can	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.GenericInstances.respectful_morphism	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Non_disjoint_union'	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Add_commutative	40	0.0.0.0.1.0.0.1.0.0.0.0.2.0.0.0.1.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.1	synth with cache (only 1: intros x; only 1: intros y; only 1: intros z; only 1: apply Extensionality_Ensembles; only 1: split; only 1: red; only 1: intros x0; only 1: intros H'; only 1: elim H'; only 1: intros x1; only 1: intros H'0; only 1: elim H'0; only 1: intros x2; only 1: intros H'1; only 1: auto with sets; only 1: intros x2; only 1: intros H'1; only 1: elim H'1; only 1: auto with sets; only 1: intros x1; only 1: intros H'0; only 1: elim H'0; only 1: auto with sets; only 1: red; only 1: intros x0; only 1: intros H'; only 1: elim H'; only 1: intros x1; only 1: intros H'0; only 1: elim H'0; only 1: auto with sets; only 1: intros x2; only 1: intros H'1; only 1: elim H'1; only 1: auto with sets; only 1: intros x1; only 1: intros H'0; only 1: elim H'0; only 1: auto with sets).	0.287794	47
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.GenericInstances.respectful_morphism	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.setcover_intro	40	7.0.1.0.0.0.0	synth with cache (only 1: intros ?; only 1: intros A; only 1: intros a; only 1: intros b; only 1: intros y; only 1: intros H'0; only 1: auto with sets).	0.086619	15
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.OTF_to_TTLB.leb_le	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.flip_arrow	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractToModalProposition.Paradox.modal	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.OTF_to_TTLB.leb_total	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.flip_arrow	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.InjectionsTheory.inj_can_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeFacts.eqb_compat	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.even_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.trans	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.ReflectConnectives.or4P	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.div_unique_exact	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.divide_0_r	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.PartialOrder_proper	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeRev.lt_strorder	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeRev.lt_compat	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Disjoint_Intersection	40	0.0.0.0.1.2.1.1.2.1.2.1.2.1.2.1.2.1.2.1.2.7.4.4.4.0.4.4.5.5.4.0.1.3.4.4.1.3.4.4.4.1.1.3.0.5.6.4.3.5.5.2.1.8.3.1.3.7.12.1.0.4.2.0.0.0.0.2.1.2.0.0	synth with cache (only 1: intros B; only 1: intros A; only 1: intros C; only 1: intros H'; only 1: apply Extensionality_Ensembles; only 1: split; only 1: elim H'; only 1: intros x; only 1: elim H'; only 1: intros H'0; only 1: red; only 1: intros x0; only 1: intros H'4; only 1: elim H'; only 1: elim H'; only 1: lapply (H'0 x0); only 1: intros x1; only 1: lapply (H'0 x0); only 1: intros H'1; only 1: generalize H'0; only 1: generalize H'0; only 1: intros H'2; only 1: generalize H'1; only 1: generalize H'1; only 1: generalize H'1; only 1: elim H'; only 1: generalize H'1; only 1: lapply (H'0 x0); only 1: generalize H'1; only 1: lapply (H'0 x0); only 1: lapply (H'0 x0); only 1: generalize H'1; only 1: generalize H'1; only 1: generalize H'1; only 1: generalize H'1; only 1: lapply (H'0 x0); only 1: generalize H'1; only 1: generalize H'1; only 1: generalize H'1; only 1: lapply (H'0 x0); only 1: lapply (H'0 x0); only 1: generalize H'1; only 1: elim H'; only 1: generalize H'1; only 1: generalize H'1; only 1: generalize H'1; only 1: lapply (H'0 x0); only 1: generalize H'1; only 1: generalize H'1; only 1: generalize H'1; only 1: elim H'1; only 1: elim H'; only 1: auto with sets; only 1: elim H'; only 1: auto with sets; only 1: elim H'; only 1: auto with sets; only 1: elim H'; only 1: auto with sets; only 1: elim H'; only 1: auto with sets; only 1: elim H'; only 1: auto with sets; only 1: elim H'; only 1: auto with sets; only 1: elim H'; only 1: auto with sets; only 1: auto with sets; only 1: elim H'; only 1: intros x; only 1: elim H'; only 1: auto with sets).	1.497448	248
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.PartialOrder_proper_type	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Intersection_Empty_set_l	40	0	synth with cache (only 1: auto with sets).	0.023581	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeRev.le_lteq	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Intersection_Empty_set_r	40	0.0	synth with cache (only 1: intros; only 1: auto with sets).	0.031428	2
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.PartialOrder_StrictOrder	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.OrderedTypeRev.compare_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.PartialOrder_StrictOrder	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_lt_mono_pos_r	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_gt_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.odd_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.divide_0_l	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.ltb_spec0	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_1_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_lt_mono_neg_l	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.Fin.of_nat_ext	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.mod_same	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.app_predE	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.in_applicative	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.PredicateSimplification.in_collective	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Compare.discrete_nat	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.KeyPred.keyed_predE	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Prop.NNPP	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.KeyedQualifier.keyed_qualifier_suproof	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.all_tag_cond	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.all_tag_cond_dep	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropExtensionality.proof_irrelevance	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.RelationProperties.PER.sym_right_transitive	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.destruct_list	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.RelationProperties.PER.sym_left_transitive	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.RelationProperties.symmetric_from_pre	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.rev_trans	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.RelationProperties.equivalence_relP	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.nzhead_rev	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.can_in_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.nzhead_revapp	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.canLR_in	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.canRL_in	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.LocalGlobal.inW_bij	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.eq_trans_cancel	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded.FixPoint.Fix_eq	40
coq-tactician-stdlib.8.11.dev	Coq.PArith.Pnat.Pos2Nat.inj_succ	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.trans_EqSt	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Union_minimal	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.FunctExt_UniqInverse	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.cong_antisymmetric_same_relation	40
coq-tactician-stdlib.8.11.dev	Coq.Sorting.Sorted.defs.HdRel_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_trans_tn1_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Union_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.WeakFan.Y_unique	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.comparison_eq_stable	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.max_l	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rt1n_step	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Setminus_intro	40	0.0.0.0	synth with cache (only 1: intros B; only 1: intros C; only 1: intros x; only 1: auto with sets).	0.088343	4
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Exponentiation.Wf_Lexicographic_Exponentiation.left_prefix	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.BoolEqualityFacts.eqb_neq	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Strict_Included_intro	40	1.0.0.0	synth with cache (only 1: intros B; only 1: intros C; only 1: intros H'; only 1: auto with sets).	0.077410	5
coq-tactician-stdlib.8.11.dev	Coq.Sets.Permut.Axiomatisation.perm_left	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Product.Wf_Symmetric_Product.wf_symprod	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.le_max_l	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Strict_Included_strict	40	0.0.0.7.0.0.1	synth with cache (only 1: intros ?; only 1: red; only 1: intros H'; only 1: elim H'; only 1: elim H'; only 1: intros C; only 1: auto with sets).	0.119073	15
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.K_dec_type	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Equivalences.UIP_refl_on__Streicher_K_on	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractToModalProposition.Paradox.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FunctionalExtensionality.f_equal__functional_extensionality_dep_good__fun	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.singlx	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.sub_in2	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.eq_neq	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.f_eq_dep_non_dep	40	0.0	synth with cache (only 1: intros * []; only 1: reflexivity).	0.037604	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.incl_add	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Bijections.bij_inj	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Involutions.inv_bij	40	4.4.21	synth with cache (only 1: exists f; only 1: trivial; only 1: trivial).	0.047319	32
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.BinList.MakeBinList.jump_tl	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.not_neq_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_ge_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.le_neq_lt	40	1.0.0.0	synth with cache (only 1: intros x; only 1: intros y; only 1: rewrite P.le_lteq; only 1: intuition).	0.056624	5
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Seminus_Empty_set_r	40	3.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros; only 1: apply Extensionality_Ensembles; only 1: split; only 1: intros x; only 1: intros H1; only 1: destruct H1; only 1: unfold In in *; only 1: assumption; only 1: intros x; only 1: intros H1; only 1: intuition).	0.322244	14
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.sig2.eq_sig2_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.VectorSpec.eta	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.StrictOrder_PreOrder	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_l_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.StrictOrder_PreOrder	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.leb_refl	40	0.0.3.0	synth with cache (only 1: rewrite leb_le; only 1: rewrite <- compare_le_iff; only 1: rewrite compare_refl; only 1: easy).	0.056602	7
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_nge_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.compare_nle_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_le	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.lt_irrefl	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.CMorphisms.StrictOrder_PartialOrder	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZBase.NZBaseProp.succ_inj_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.ltb_irrefl	40	0.0.0.1	synth with cache (only 1: rewrite ltb_ge; only 1: apply lt_eq_cases; only 1: right; only 1: easy).	0.043704	5
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.CompareBasedOrderFacts.lt_eq_cases	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_1_l	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.leb_spec0	40
coq-tactician-stdlib.8.11.dev	Coq.funind.Recdef.le_lt_SS	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Euclid.eucl_dev	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZBase.NZBaseProp.succ_inj_wd_neg	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Pred_Type.Generic.not_all_not_ex	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ClassicalUniqueChoice.unique_choice	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms.StrictOrder_PartialOrder	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractToNegativeProp.Paradox.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Classical_sets.Ensembles_classical.not_included_empty_Inhabited	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.ListDec.Dec_in_Prop.incl_decidable	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_strorder	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_lt_le_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_cancel_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_preorder	40
coq-tactician-stdlib.8.11.dev	Coq.micromega.Refl.make_impl_map	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_pos_pos	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_le_lt_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.le_min_l	40	0	synth with cache (only 1: solve_min).	0.041814	1
coq-tactician-stdlib.8.11.dev	Coq.Lists.ListSet.first_definitions.set_In_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_partialorder	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_assoc	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_neq	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.eq_le_incl	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_stepl	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_shuffle3	40	0.0.0.0.0.0.1.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros p; only 1: nzinduct n; only 1: nzsimpl; only 1: easy; only 1: intros ?; only 1: nzsimpl; only 1: rewrite succ_inj_wd; only 1: easy).	0.217157	11
coq-tactician-stdlib.8.11.dev	Coq.Classes.SetoidClass.setoid_refl	40	1	synth with cache (only 1: apply _).	0.017321	2
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_lt_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_le_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.SetoidClass.setoid_sym	40	0	synth with cache (only 1: typeclasses eauto).	0.015654	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.SetoidClass.setoid_trans	40	0	synth with cache (only 1: typeclasses eauto).	0.013993	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_antisymm	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_succ_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.sub_1_r	40	0.0.0	synth with cache (only 1: intros n; only 1: nzsimpl'; only 1: easy).	0.072243	3
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_0_1	40	0.4.0	synth with cache (only 1: rewrite one_succ; only 1: apply lt_le_incl; only 1: apply lt_succ_diag_r).	0.051890	7
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_shuffle1	40	0.1.0.2.1.0.0.0.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: intros p; only 1: intros q; only 1: rewrite <- mul_assoc; only 1: rewrite <- mul_assoc; only 1: rewrite (mul_comm m); only 1: rewrite <- mul_assoc; only 1: rewrite (mul_comm m); only 1: easy).	0.126859	14
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_0_1	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_le_succ_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_0_2	40	0.4.4.1.0	synth with cache (only 1: rewrite two_succ; only 1: rewrite one_succ; only 1: rewrite lt_succ_r; only 1: apply lt_le_incl; only 1: apply lt_succ_diag_r).	0.082732	14
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_0_2	40	0.0.0.0.0.0	synth with cache (only 1: apply lt_le_incl; only 1: transitivity 1; only 1: rewrite one_succ; only 1: apply lt_succ_diag_r; only 1: rewrite two_succ; only 1: apply lt_succ_diag_r).	0.067675	6
coq-tactician-stdlib.8.11.dev	Coq.NArith.BinNat.N.eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_pos_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FinFun.Finite_alt	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.equivalence_relP_in	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_shuffle1	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_lt_succ_r	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.monoW	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.nat_N_Z	40	0.1.3.1	synth with cache (only 1: induction n; only 1: easy; only 1: simpl; only 1: easy).	0.068140	9
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.nlt_ge	40	0	synth with cache (only 1: intuition order).	0.045684	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_le_compat_l	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.VectorEq.BEQ.eqb_nat_eq	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.homoRL	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_spec_le	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.VectorDef.BASES.trunc	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.nle_gt	40	0	synth with cache (only 1: intuition order).	0.040948	1
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.monoLR	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.homo_mono	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.monoRL	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory.can_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_nge	40	0	synth with cache (only 1: intuition order).	0.041087	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_Classical_facts.Sets_as_an_algebra.sincl_add_x	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.monoW_in	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Wf_nat.Well_founded_Nat.well_founded_ltof	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_shuffle0	40
coq-tactician-stdlib.8.11.dev	Coq.rtauto.Bintree.Gt_Psucc	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_Classical_facts.Sets_as_an_algebra.incl_soustr_in	40	0.0.0.1.0.0.0.0.0	synth with cache (only 1: intros X; only 1: intros x; only 1: intros H'; only 1: unfold Subtract; only 1: red; only 1: intros x0; only 1: intros H'0; only 1: elim H'0; only 1: auto with sets).	0.052254	10
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.homoRL_in	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Wf_nat.Well_founded_Nat.well_founded_gtof	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: assert (H : forall (n : nat) (a : A), f a < n -> Acc ltof a); only 1: intros until n; only 1: induction n; only 1: intros; only 1: absurd (f a < 0); only 1: auto with arith; only 1: auto with arith; only 1: intros a; only 1: intros Ha; only 1: apply Acc_intro; only 1: unfold ltof at 1; only 1: intros b; only 1: intros Hb; only 1: apply IHn; only 1: apply Nat.lt_le_trans with (f a); only 1: auto with arith; only 1: auto with arith; only 1: intros a; only 1: apply (H (S (f a))); only 1: auto with arith).	0.160165	20
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_compat	40
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.eq_dec	40	1	synth with cache (only 1: decide equality).	0.049379	2
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_unicity_ext	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_unicity	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.homo_mono_in	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.monoLR_in	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.monoRL_in	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Compare_dec.zerop	40	5.0.0.0.1	synth with cache (only 1: destruct n; only 1: left; only 1: easy; only 1: right; only 1: apply Nat.lt_0_succ).	0.064790	11
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAddOrder.ZAddOrderProp.le_0_sub	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_assoc	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_le_iff	40	0.0.2.0.0.2.1.0.0.0.0.0.0.0.0	synth with cache (only 1: split; only 1: destruct (min_spec n m); only 1: left; only 1: intuition; only 1: order; only 1: right; only 1: intuition; only 1: order; only 1: destruct (min_spec n m); only 1: intuition; only 1: order; only 1: order; only 1: intuition; only 1: order; only 1: order).	0.224860	20
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.meq_refl	40	0.2.0.1	synth with cache (only 1: intuition; only 1: intros _tmp_tactician0; only 1: compute; only 1: apply Equivalence_Reflexive).	0.040824	7
coq-tactician-stdlib.8.11.dev	Coq.rtauto.Rtauto.pos_eq_refl	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_comm	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrbool.MonoHomoMorphismTheory_in.can_mono_in	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_glb_l	40	0.1.0.2.2	synth with cache (only 1: destruct (min_spec n m); only 1: intuition; only 1: order; only 1: intuition; only 1: order).	0.075404	10
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_glb_r	40	0	synth with cache (only 1: solve_min).	0.044756	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.meq_trans	40	3.10.4.0.1.0.1.0	synth with cache (only 1: intros until x; only 1: unfold meq; only 1: destruct x; only 1: intros _tmp_tactician2; only 1: intros m; only 1: intros; only 1: rewrite H; only 1: auto).	0.190566	27
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NMulOrder.NMulOrderProp.square_le_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_glb	40	0.1.0.1.2	synth with cache (only 1: destruct (min_spec n m); only 1: intuition; only 1: order; only 1: intuition; only 1: order).	0.076979	9
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.meq_sym	40	0.1.3.0	synth with cache (only 1: unfold meq; only 1: intros until y; only 1: intros; only 1: auto).	0.035517	8
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NPow.NPowProp.pow_succ_r'	40	0.0.1.0.0	synth with cache (only 1: intros n; only 1: intros m; only 1: nzsimpl; only 1: easy; only 1: apply le_0_l).	0.098286	6
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.munion_empty_left	40	0.0.0.0	synth with cache (only 1: intros until x; only 1: destruct x; only 1: unfold meq; only 1: reflexivity).	0.033178	4
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_glb_lt	40	1	synth with cache (only 1: solve_min).	0.047808	2
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDomain.nat_rect_wd	40	0.0.1.9.0.7.0.0.1	synth with cache (only 1: intros x; only 1: intros y; only 1: intros H; only 1: intros WF; only 1: intros; only 1: induction n; only 1: auto; only 1: simpl; only 1: auto).	0.067870	27
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_glb_iff	40	0.0.0.2.0.0.2.1.0	synth with cache (only 1: split; only 1: destruct (min_spec n m); only 1: intuition; only 1: order; only 1: order; only 1: intuition; only 1: order; only 1: order; only 1: solve_min).	0.170391	14
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.munion_empty_right	40	0.0.0.0	synth with cache (only 1: unfold meq; only 1: unfold munion; only 1: simpl; only 1: auto).	0.039619	4
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_glb_lt_iff	40	0.0.0.0.0.0.0.0.0	synth with cache (only 1: destruct (min_spec n m); only 1: intuition; only 1: order; only 1: order; only 1: order; only 1: intuition; only 1: order; only 1: order; only 1: order).	0.137496	9
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_le_compat_r	40	0.0.0	synth with cache (only 1: intros; only 1: apply min_glb_iff; only 1: solve_min).	0.077815	3
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.munion_comm	40	0.21.3.3.2.5.7.1.29.11.4.1.3.4.0.0.1.0	synth with cache (only 1: unfold meq; only 1: unfold munion; only 1: intros until y; only 1: simpl; only 1: destruct x; only 1: simpl; only 1: destruct y; only 1: simpl; only 1: intros p; only 1: induction n; only 1: simpl; only 1: induction n; only 1: intuition; only 1: firstorder; only 1: auto; only 1: simpl; only 1: PeanoNat.Nat.nzsimpl'; only 1: auto).	0.173805	113
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NOrder.NOrderProp.nlt_0_r	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_le_compat	40	1.1.0.0.0.0	synth with cache (only 1: intros Hnm; only 1: intros Hpq; only 1: pose proof (max_le_compat_l _ _ m Hpq) as LE; only 1: pose proof (max_le_compat_r _ _ p Hnm) as LE'; only 1: apply min_glb_iff; only 1: solve_min).	0.111345	8
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.munion_ass	40	1.4.2.7.2.1.1.0.0.0.0	synth with cache (only 1: unfold meq; only 1: intros until x; only 1: unfold multiplicity; only 1: unfold munion; only 1: destruct x; only 1: intros until y; only 1: destruct y; only 1: intros a; only 1: intros; only 1: simpl; only 1: auto with arith).	0.103643	29
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.lt_le_S	40	3.0	synth with cache (only 1: intros IH; only 1: Nat.order).	0.047532	5
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.meq_left	40	1.0.6.11.2.0.2.2.0.1.0	synth with cache (only 1: unfold meq; only 1: intros until y; only 1: destruct x; only 1: intros; only 1: unfold munion; only 1: destruct y; only 1: destruct z; only 1: intuition; only 1: simpl; only 1: rewrite H; only 1: auto).	0.111066	36
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.lt_n_Sm_le	40	0	synth with cache (only 1: apply le_S_n).	0.034028	1
coq-tactician-stdlib.8.11.dev	Coq.Arith.Minus.minus_n_O	40	0.0.0	synth with cache (only 1: destruct n; only 1: easy; only 1: easy).	0.026805	3
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_min_absorption	40	3.5.1.4.1.6.0.0.0.2.0.0.0.1.0.2.3.0.2	synth with cache (only 1: destruct (min_spec n m) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (C, E); only 1: apply min_l; only 1: destruct (max_spec n m); only 1: intuition; only 1: order; only 1: intuition; only 1: order; only 1: destruct _tmp_tactician0 as (C, E); only 1: destruct (max_spec n m); only 1: intuition; only 1: order; only 1: intuition; only 1: destruct (min_spec n m) as [_tmp_tactician0| _tmp_tactician0]; only 1: intuition; only 1: order; only 1: intuition; only 1: apply min_l; only 1: order).	0.231150	49
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.le_lt_n_Sm	40	0.3.0	synth with cache (only 1: induction 1; only 1: auto; only 1: auto).	0.062281	6
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.meq_right	40	0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: unfold meq; only 1: unfold munion; only 1: unfold multiplicity; only 1: intros until x; only 1: destruct x; only 1: intros until y; only 1: destruct y; only 1: intros until z; only 1: destruct z; only 1: intros; only 1: elim H; only 1: auto with arith).	0.097367	12
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAdd.ZAddProp.add_pred_r	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.le_not_lt	40	1.10.1.0.0.0.7.5.11.0.2.0.0.24.4.0.0	synth with cache (only 1: nzinduct n m; only 1: intros H; only 1: intros H2; only 1: Nat.Private_Tac.order; only 1: intros n; only 1: split; only 1: intros H2; only 1: intros H1; only 1: destruct m; only 1: easy; only 1: Nat.Private_Tac.order; only 1: intros H; only 1: intros H1; only 1: intros H2; only 1: apply H; only 1: Nat.order; only 1: auto).	0.252284	82
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.lt_not_le	40	0.1	synth with cache (only 1: intros LT; only 1: Nat.order).	0.052645	3
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.neq_0_lt	40	0.0	synth with cache (only 1: intros H; only 1: Nat.auto').	0.048397	2
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZMul.ZMulProp.mul_pred_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZLt.ZOrderProp.nonpos_pos_cases	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.lt_0_neq	40	0.0.0.0	synth with cache (only 1: intros H; only 1: intros H1; only 1: rewrite H1 in H; only 1: false_hyp H Nat.lt_irrefl).	0.061350	4
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.lt_n_S	40	0	synth with cache (only 1: apply le_n_S).	0.035226	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.BoolEqualityFacts.eqb_refl	40		synth with cache (only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: apply eqb_eq; only 1: easy).	12.517971	5124
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NStrongRec.NStrongRecProp.StrongRecursion.strong_rec_alt	40	4.0	synth with cache (only 1: symmetry; only 1: eauto).	0.083806	6
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.le_min_r	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Le.le_n_0_eq	40	0.6.0.0	synth with cache (only 1: intros H; only 1: Nat.le_elim H; only 1: easy; only 1: easy).	0.046034	10
coq-tactician-stdlib.8.11.dev	Coq.Arith.EqNat.eq_nat_refl	40	1.0.23	synth with cache (only 1: induction n; only 1: easy; only 1: easy).	0.089776	27
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.TTLB_to_OTF.compare_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.CompOpp_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Finite_sets_facts.Finite_sets_facts.finite_cardinal	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NAddOrder.NAddOrderProp.lt_lt_add_l	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Wf.Well_founded_2.well_founded_induction_type_2	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Image.Image.Im_def	40
coq-tactician-stdlib.8.11.dev	Coq.micromega.Tauto.S.eval_f_morph	40
coq-tactician-stdlib.8.11.dev	Coq.micromega.Tauto.map_simpl	40	0.16.2.0.0.0.1.4.0.2.0.0	synth with cache (only 1: intros A; only 1: intros Q; only 1: intros l'; only 1: intros until l; only 1: induction l; only 1: apply length_zero_iff_nil; only 1: simpl; only 1: auto; only 1: rewrite IHl; only 1: simpl; only 1: rewrite IHl; only 1: auto).	0.138451	37
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.rev_nztail_rev	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqke_sym	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqk_trans	40	0.0.2.0.0	synth with cache (only 1: intros x; only 1: intros y; only 1: intros y'; only 1: intros Hxy; only 1: eauto).	0.067802	7
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrderedTypeAlt.OrderedType_from_Alt.eq_refl	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.hd_error_some_nil	40	12.305.5.133.1.10.0.2	synth with cache (only 1: intros n; only 1: intros; only 1: red; only 1: intros ?; only 1: contradict H; only 1: intros EQ; only 1: subst; only 1: easy).	0.258678	476
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrderedType.MOT_to_OT.eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zeuclid.ZEuclid.mod_wd	40	0.7.18.0.0.0.0.0.0	synth with cache (only 1: intros x; only 1: intros x'; only 1: intros Hx; only 1: intros y; only 1: intros y'; only 1: intros Hy; only 1: setoid_rewrite Hx; only 1: rewrite Hy; only 1: easy).	0.146845	34
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zeuclid.ZEuclid.div_wd	40	0	synth with cache (only 1: congruence).	0.049420	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.Berardi.Berardis_paradox.L1	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Berardi.Berardis_paradox.retract_pow_U_U	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.UIP_shift_on	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NParity.NParityProp.even_sub	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivTrunc.ZQuotProp.rem_opp_opp	40
coq-tactician-stdlib.8.11.dev	Coq.omega.OmegaLemmas.Zred_factor0	40	0.0	synth with cache (only 1: Z.nzsimpl; only 1: easy).	0.141256	2
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.pred_double_spec	40	0	synth with cache (only 1: easy).	0.041315	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersLists.OrderedTypeLists.In_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersLists.OrderedTypeLists.ListIn_In	40	0.8.12.0.0.0.1.0.0.0	synth with cache (only 1: simple induction l; only 1: simpl; only 1: intros ?; only 1: inversion 1; only 1: simpl; only 1: intuition; only 1: subst; only 1: constructor; only 1: clear; only 1: easy).	0.119471	31
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Relations.relation_conjunction_morphism	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersLists.OrderedTypeLists.Inf_lt	40	0.0.3.3.0.0.1.23.0	synth with cache (only 1: intros; only 1: destruct l; only 1: let rec inv := invlist InA; invlist Sorted; invlist HdRel; invlist NoDupA in inv; only 1: constructor; only 1: let rec inv := invlist InA; invlist Sorted; invlist HdRel; invlist NoDupA in inv; only 1: right; only 1: transitivity y; only 1: assumption; only 1: assumption).	0.118136	39
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.hd_error_nil	40	3	synth with cache (only 1: reflexivity).	0.035775	4
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.hd_error_cons	40	1.2	synth with cache (only 1: intros Hfst; only 1: firstorder  discriminate).	0.040465	5
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.in_eq	40	6.0	synth with cache (only 1: intros a; only 1: RelationClasses.simpl_relation).	0.096220	8
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.in_cons	40	15.4.0	synth with cache (only 1: intros until l; only 1: RelationClasses.reduce; only 1: tauto).	0.102076	22
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Bijections.bij_can_sym	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NDefOps.NdefOpsProp.if_zero_0	40
coq-tactician-stdlib.8.11.dev	Coq.Sorting.Mergesort.Sort.Sorted_merge	40
coq-tactician-stdlib.8.11.dev	Coq.FSets.FSetBridge.DepOfNodep.is_empty	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidPermutation.Permutation.Equivalence_instance_0	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidPermutation.Permutation.PermutationA_cons	40	0.12.0.3.0.0.0.0.0.0	synth with cache (only 1: intros ?; only 1: intros ?; only 1: intros E1; only 1: intros ?; only 1: intros ?; only 1: intros E2; only 1: apply permA_skip; only 1: rewrite E1; only 1: firstorder; only 1: intuition).	0.302240	25
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetRBT.MakeRaw.singleton_ok	40	1.0.0.1.1.25.1	synth with cache (only 1: red; only 1: constructor; only 1: auto; only 1: auto; only 1: easy; only 1: intros H; only 1: intuition_in).	0.112288	36
coq-tactician-stdlib.8.11.dev	Coq.Sets.Integers.Integers_sect.nat_po	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetWeakList.MakeRaw.ForNotations.mem_spec	40
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapList.Raw.Elt.is_empty_1	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetGenTree.Props.ltb_tree_iff	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetInterface.WRaw2SetsOn.In_compat	40
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapWeakList.Raw.Elt.is_empty_1	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetInterface.WRaw2SetsOn.eq_equiv	40	14.71.1.6.6.34.1.0.0.9.65	synth with cache (only 1: split; only 1: easy; only 1: red; only 1: intros; only 1: easy; only 1: split; only 1: intros ?; only 1: firstorder; only 1: intros Hxz; only 1: red; only 1: firstorder).	1.495139	218
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapWeakList.Raw.Elt.is_empty_2	40	5.1.0.0.0.0.10.6.2.0	synth with cache (only 1: unfold Empty; only 1: intros m; only 1: intros; only 1: destruct m; only 1: intros abs; only 1: inversion abs; only 1: intros abs; only 1: unfold PX.MapsTo in *; only 1: destruct p; only 1: intuition).	0.292270	34
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersEx.PairOrderedType.lt_strorder	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.InA_eqke_eqk	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.max_r	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.BinInt.Z.eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Datatypes.CompSpec2Type	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Peano.nat_rect_plus	40
coq-tactician-stdlib.8.11.dev	Coq.NArith.BinNat.N.peano_rect_base	40		synth with cache (only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: revert P a f; only 1: intros; only 1: reflexivity).	13.402235	2423
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.UniqInverse_EqDeltaProjs	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.eqst_ntheq	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Permut.Axiomatisation.op_rotate	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.BoolEq.Bool_eq_dec.exists_beq_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Init.Specif.Dependent_choice_lemmas.dependent_choice	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Inverse_Image.Inverse_Image.Acc_inverse_rel	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Partial_Order.Partial_order_facts.Strict_Rel_Transitive	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_1_facts.cong_transitive_same_relation	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rstar_equiv_Rstar1	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.ntheq_eqst	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Disjoint_Union.Wf_Disjoint_Union.wf_disjoint_sum	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Add_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropExtensionalityFacts.PropExt_imp_ProvPropExt	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Map.Str_nth_tl_map	40	0.0.0.0.0	synth with cache (only 1: simple induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.102298	5
coq-tactician-stdlib.8.11.dev	Coq.Logic.PropExtensionalityFacts.PropExt_imp_RefutPropExt	40	10.5.0.0.0.0.0.0	synth with cache (only 1: intros Ext; only 1: intros A; only 1: intros Ha; only 1: apply Ext; only 1: split; only 1: trivial; only 1: intros FunExt; only 1: easy).	0.047114	23
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.hset_hOneType	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Map.Str_nth_map	40	0.1.0.0.0	synth with cache (only 1: intros until n; only 1: induction n; only 1: reflexivity; only 1: intros s; only 1: apply IHn).	0.106893	6
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.Corollaries.eq_dep_eq_on__inj_pair2_on	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ClassicalFacts.prop_degen_em	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Constructive_sets.Ensembles_facts.Couple_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Bool.IfProp.IfProp_sum	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.EqdepFacts.eq_dep_non_dep	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Rsym_imp_Rstarsym	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_2_r	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Fix_rects.eq_Fix_F_sub	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rtn1_step	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rt_rt1n	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.eq_rect_eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.StreamMemo.DependentMemoFunction.dmemo_get_correct	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Union.WfUnion.wf_union	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.DecidableEqDep.inj_pairP2	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Prop.well_founded_morphism	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rt_rt1n_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rtn1_rt	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_3_facts.Strong_confluence	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Bijections.bij_can_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Product.Swap.swap_Acc	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.BijectionsTheory.bij_comp	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.BijectionsTheory.eq_bij	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_spec_alt	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.incl_add_x	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Add_commutative'	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_3_facts.Strong_confluence_direct	40	0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros U; only 1: intros R; only 1: intros H'; only 1: red; only 1: intros x; only 1: red; only 1: intros a; only 1: intros b; only 1: intros H'0; only 1: unfold coherent at 1; only 1: generalize b; only 1: clear b; only 1: elim H'0; only 1: clear H'0; only 1: intros x0; only 1: intros b; only 1: intros H'1; only 1: exists b; only 1: auto with sets; only 1: clear H'0; only 1: intros x0; only 1: intros y; only 1: intros z; only 1: intros H'1; only 1: intros H'2; only 1: intros H'3; only 1: intros b; only 1: intros H'4; only 1: generalize (Lemma1 U R); only 1: intros h; only 1: lapply ltac:(h); only 1: intros H'0; only 1: generalize (H'0 x0 b); only 1: intros h0; only 1: lapply ltac:(h0); only 1: intros H'5; only 1: generalize (H'5 y); only 1: intros h1; only 1: lapply ltac:(h1); only 1: intros h2; only 1: elim h2; only 1: intros z0; only 1: intros h3; only 1: elim h3; only 1: intros H'6; only 1: intros H'7; only 1: clear h h0 h1 h2 h3; only 1: generalize (H'3 z0); only 1: intros h; only 1: lapply ltac:(h); only 1: intros h0; only 1: elim h0; only 1: intros z1; only 1: intros h1; only 1: elim h1; only 1: intros H'8; only 1: intros H'9; only 1: clear h h0 h1; only 1: exists z1; only 1: split; only 1: auto with sets; only 1: apply Rstar_n with z0; only 1: auto with sets; only 1: auto with sets; only 1: clear h; only 1: auto with sets; only 1: clear h h0 h1; only 1: auto with sets; only 1: clear h h0; only 1: auto with sets; only 1: clear h; only 1: auto with sets).	0.642957	74
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Union_is_Lub	40
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.BijectionsTheory.bij_can_bij	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.Fix_rects.Fix_sub_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset.The_power_set_partial_order.Intersection_is_Glb	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Add_distributes	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.positive_nat_Z	40	0.0.0.0.0.0	synth with cache (only 1: destruct (Pos2Nat.is_succ p) as (m, H); only 1: rewrite H; only 1: simpl; only 1: f_equal; only 1: apply SuccNat2Pos.inv; only 1: easy).	0.128722	6
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.positive_N_Z	40	0	synth with cache (only 1: trivial).	0.055843	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Setminus_Included_empty	40	0.0.0.2.0.0.0.2.0.0.0	synth with cache (only 1: intros; only 1: apply Extensionality_Ensembles; only 1: split; only 1: intros x; only 1: intros H1; only 1: unfold In in *; only 1: exfalso; only 1: inversion_clear H1; only 1: contradict H; only 1: intuition; only 1: intuition).	0.114426	15
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.positive_N_nat	40	1	synth with cache (only 1: reflexivity).	0.056370	2
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.OTF_to_TTLB.leb_trans	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.positive_nat_N	40	0.0.0.0.0.1	synth with cache (only 1: destruct (Pos2Nat.is_succ p) as (n, H); only 1: rewrite H; only 1: simpl; only 1: f_equal; only 1: apply SuccNat2Pos.inv; only 1: easy).	0.124623	7
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractFromSmallPropositionToProp.MParadox.mparadox	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.TypeNeqSmallType.Paradox.up_down	40	2.88.6	synth with cache (only 1: intros x; only 1: subst; only 1: trivial).	0.056369	99
coq-tactician-stdlib.8.11.dev	Coq.ssr.ssrfun.Involutions.inv_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.not_ge_lt	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.div_small	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.eq_mul_1_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.leb_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Seminus_Empty_set_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.Even_or_Odd	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.ltb_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.leb_nle	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NIso.Inverse.inverse_nat_iso	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.leb_gt	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.eq_mul_1_nonneg'	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_lt_mono_neg_r	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.ltb_nlt	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_eq_0	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.ltb_ge	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.Fin.of_nat_to_nat_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_le_mono_nonneg_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.mod_small	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_unique'	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Prop.Peirce	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.hd_error_tl_repr	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Prop.not_imply_elim	40	48.0.0.0	synth with cache (only 1: intros A; only 1: intros C; only 1: intros h1; only 1: tauto).	0.204918	281
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.in_nil	40	2.2.2	synth with cache (only 1: intros n; only 1: simpl; only 1: firstorder).	0.050388	9
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Prop.not_imply_elim2	40	0.0.1	synth with cache (only 1: unfold not; only 1: intros A; only 1: auto).	0.052504	4
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.double_below	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.revapp_nil_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.rev_nil_inv	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetList.MakeRaw.ForNotations.inf_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.hprop_hprop	40
coq-tactician-stdlib.8.11.dev	Coq.PArith.Pnat.Pos2Nat.inj_add	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.Stream_Properties.ForAll_Str_nth_tl	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.FunctExt_iff_UniqInverse	40
coq-tactician-stdlib.8.11.dev	Coq.Sorting.Sorted.defs.Sorted_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.WeakFan.Y_approx	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rt_rtn1	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Equalities.BoolEqualityFacts.eqb_sym	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rt_rtn1_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Exponentiation.Wf_Lexicographic_Exponentiation.right_prefix	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Permut.Axiomatisation.twist	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.inj_pair2_eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractFromSmallPropositionToProp.Paradox.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersTac.OrderFacts.not_gt_le	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Product.Swap.Acc_swapprod	40
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.BinList.MakeBinList.jump_succ	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Setminus_Union_l	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.VectorSpec.eq_nth_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.leb_antisym	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Setminus_Union_r	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.bi_induction	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.recursion_0	40	0	synth with cache (only 1: destr_bool).	0.048541	1
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.ltb_antisym	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.in_inv	40	0	synth with cache (only 1: auto).	0.045260	1
coq-tactician-stdlib.8.11.dev	Coq.funind.Recdef.Splus_lt	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZBase.NZBaseProp.CentralInduction.central_induction	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidList.Type_with_equality.InA_cons	40	0.0.0.0.0.0.0.0.0.1	synth with cache (only 1: intros a; only 1: intros b; only 1: split; only 1: intros H; only 1: inversion H; only 1: auto; only 1: auto; only 1: induction 1; only 1: auto; only 1: auto).	0.089209	11
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.eqb_compare	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.ltb_compare	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidList.Type_with_equality.InA_nil	40	3.0.3.0.0	synth with cache (only 1: intros; only 1: split; only 1: intros H; only 1: inversion_clear H; only 1: easy).	0.050639	11
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersAlt.Update_OT.lt_strorder	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Euclid.quotient	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Pred_Type.Generic.not_all_ex_not	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersFacts.BoolOrderFacts.leb_compare	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.ListDec.Dec_in_Prop.NoDup_decidable	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAdd.NZAddProp.add_shuffle2	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ClassicalUniqueChoice.classic_set_in_prop_context	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Classical_sets.Ensembles_classical.not_empty_Inhabited	40
coq-tactician-stdlib.8.11.dev	Coq.micromega.Refl.make_conj_cons	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_nonneg_pos	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.add_nonneg_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.ListSet.first_definitions.set_mem_ind	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_l_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.lt_add_pos_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.succ_lt_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.SetoidClass.nequiv_equiv_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidList.Type_with_equality.InA_altdef	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.succ_le_mono	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_r_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_1_2	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_1_l	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.NoRetractFromTypeToProp.Paradox.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_ge_cases	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_shuffle2	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_ge_cases	40
coq-tactician-stdlib.8.11.dev	Coq.NArith.BinNat.N.discr	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_gt_cases	40
coq-tactician-stdlib.8.11.dev	Coq.NArith.BinNat.N.peano_rec_base	40	0	synth with cache (only 1: reflexivity).	0.045337	1
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NBits.NBitsProp.pow_sub_r	40
coq-tactician-stdlib.8.11.dev	Coq.micromega.Refl.make_conj_impl	40	54.6.6.9.15.95.1.7.9.19.0.1.1.0.7.39.13.17.0.4.6.0.73.3.0.0.0.0.1.1.0.0	synth with cache (only 1: intros A; only 1: intros H; only 1: intros until l; only 1: intros; only 1: induction l as [| a l IH]; only 1: simpl; only 1: tauto; only 1: simpl; only 1: firstorder; only 1: destruct l; only 1: auto with arith; only 1: clear H0 H1; only 1: simpl in *; only 1: intros ?; only 1: red; only 1: intuition; only 1: induction l; only 1: auto; only 1: intros AD; only 1: apply IHl; only 1: simpl in *; only 1: intros j; only 1: induction l; only 1: auto; only 1: simpl in *; only 1: firstorder; only 1: destruct l; only 1: simpl in *; only 1: auto; only 1: clear H0; only 1: simpl in *; only 1: intuition).	0.669567	419
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_le	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZAddOrder.NZAddOrderProp.lt_add_pos_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.eq_decidable	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.eq_dne	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.FinFun.Injective_map_NoDup	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_ngt	40
coq-tactician-stdlib.8.11.dev	Coq.NArith.BinNat.N.peano_rec_succ	40	0.0.0.0.0.0	synth with cache (only 1: destruct n; only 1: simpl; only 1: trivial; only 1: simpl; only 1: rewrite Pos.peano_rect_succ; only 1: easy).	0.076646	6
coq-tactician-stdlib.8.11.dev	Coq.Classes.EquivDec.unit_eqdec_obligation_1	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_decidable	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.lt_dne	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.N_nat_Z	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Infinite_sets.Infinite_sets.make_new_approximant	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.VectorEq.BEQ.eqb_eq	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.Z_nat_N	40	1.0.0.0.0.4.9.0.18	synth with cache (only 1: destruct n as [| _tmp_tactician0| _tmp_tactician0]; only 1: easy; only 1: simpl; only 1: Nat2N.nat2N; only 1: destruct _tmp_tactician0 as [a| a| ]; only 1: simpl; only 1: trivial; only 1: easy; only 1: easy).	0.208601	41
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZOrder.NZOrderProp.le_decidable	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_Classical_facts.Sets_as_an_algebra.incl_soustr	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.Zabs_N_nat	40	0.0.2.19	synth with cache (only 1: destruct n; only 1: trivial; only 1: easy; only 1: easy).	0.193600	25
coq-tactician-stdlib.8.11.dev	Coq.rtauto.Bintree.Psucc_Gt	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMul.NZMulProp.mul_shuffle3	40
coq-tactician-stdlib.8.11.dev	Coq.rtauto.Bintree.map_app	40	0.0.0.0.0.0.0.0	synth with cache (only 1: intros until l; only 1: induction l; only 1: simpl; only 1: auto; only 1: simpl; only 1: intros; only 1: rewrite IHl; only 1: auto).	0.115448	8
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.Zabs_nat_N	40	2.1.0.0.0.0	synth with cache (only 1: destruct n; only 1: simpl; only 1: trivial; only 1: simpl; only 1: apply positive_nat_N; only 1: apply positive_nat_N).	0.081578	9
coq-tactician-stdlib.8.11.dev	Coq.Sorting.Permutation.Permutation.Permutation_nil	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Wf_nat.Well_founded_Nat.induction_ltof1	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZSgnAbs.GenericAbs.abs_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Strings.Byte.byte_dec_lb	40
coq-tactician-stdlib.8.11.dev	Coq.rtauto.Bintree.length_map	40	0.0.0.0.0.0.1	synth with cache (only 1: intros a; only 1: intros until l; only 1: induction l; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.077352	8
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.N2Z.id	40	0.3.0	synth with cache (only 1: destruct n; only 1: easy; only 1: trivial).	0.080407	6
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZLcm.ZLcmProp.quot_div_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivEucl.ZEuclidProp.mod_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZBits.ZBitsProp.pow_sub_r	40
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.xI_succ_xO	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivFloor.ZDivProp.mod_eq	40
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.double_succ	40	0.0	synth with cache (only 1: simpl; only 1: f_equal).	0.052186	2
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAddOrder.ZAddOrderProp.lt_sub_0	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Factorial.lt_O_fact	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Div2.ind_0_1_SS	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZPow.ZPowProp.pow_twice_r	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Compare_dec.lt_eq_lt_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_lt_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Between.Between.bet_eq	40
coq-tactician-stdlib.8.11.dev	Coq.rtauto.Rtauto.form_eq_refl	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NMulOrder.NMulOrderProp.mul_le_mono_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NPow.NPowProp.pow_0_l	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Compare_dec.gt_eq_gt_dec	40	0.0.0.1.1.1.0.0.0.0.0	synth with cache (only 1: induction n in m |- *; only 1: destruct m; only 1: auto with arith; only 1: auto with arith; only 1: destruct m; only 1: auto with arith; only 1: destruct (IHn m) as [H| H]; only 1: destruct H; only 1: auto with arith; only 1: auto with arith; only 1: auto with arith).	0.356164	14
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NPow.NPowProp.pow_1_l	40	2.0.0.0	synth with cache (only 1: intros; only 1: nzsimpl'; only 1: easy; only 1: apply le_0_l).	0.100442	6
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDomain.NZDomainProp.itersucc_or_itersucc	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NLcm.NLcmProp.mod_divide	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_le_compat_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NPow.NPowProp.pow_add_r	40	1.1.5.7.2.0.0	synth with cache (only 1: intros a; only 1: intros Hb; only 1: intros Hc; only 1: rewrite pow_add_r; only 1: easy; only 1: apply le_0_l; only 1: apply le_0_l).	0.109106	23
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NMaxMin.NMaxMinProp.max_0_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NOrder.NOrderProp.nle_succ_0	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_max_absorption	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZGcd.ZGcdProp.divide_opp_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NGcd.NGcdProp.divide_add_cancel_r	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Minus.minus_Sn_m	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NDiv.NDivProp.mod_upper_bound	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_min_distr	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Minus.pred_of_minus	40	0.0	synth with cache (only 1: Nat.nzsimpl'; only 1: easy).	0.044321	2
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.munion_rotate	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_max_distr	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Mult.mult_assoc_reverse	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Gt.gt_n_S	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Gt.gt_S_n	40	0	synth with cache (only 1: apply Nat.succ_lt_mono).	0.019504	1
coq-tactician-stdlib.8.11.dev	Coq.Sets.Multiset.multiset_defs.meq_congr	40	6.1.4.4.2.2.0.1.0.0	synth with cache (only 1: unfold meq; only 1: intros until x; only 1: intros until y; only 1: destruct x; only 1: destruct y; only 1: intros until z; only 1: destruct z; only 1: unfold munion; only 1: unfold multiplicity; only 1: auto with arith).	0.096808	30
coq-tactician-stdlib.8.11.dev	Coq.Arith.Plus.plus_assoc_reverse	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_min_modular	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NPow.NPowProp.pow_mul_l	40	0.0.0.1.1.0.0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0	synth with cache (only 1: intros a; only 1: intros b; only 1: intros c; only 1: destruct (lt_ge_cases c 0) as [Hc| Hc]; only 1: rewrite (pow_neg_r _ _ Hc); only 1: rewrite (pow_neg_r _ _ Hc); only 1: rewrite (pow_neg_r _ _ Hc); only 1: nzsimpl; only 1: easy; only 1: apply le_ind with (4 := Hc); only 1: solve_proper; only 1: nzsimpl; only 1: easy; only 1: clear c Hc; only 1: intros c; only 1: intros Hc; only 1: intros IH; only 1: assert (0 <= c); only 1: trivial; only 1: nzsimpl; only 1: rewrite IH; only 1: apply mul_shuffle1; only 1: trivial; only 1: trivial; only 1: trivial).	0.502472	32
coq-tactician-stdlib.8.11.dev	Coq.Arith.Peano_dec.O_or_S	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZMaxMin.ZMaxMinProp.succ_max_distr	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetPositive.PositiveSet.In_compat	40	2.0.0.6.11.3.5.42.5.10.19.0.2.1.1.0.0	synth with cache (only 1: intros x; only 1: intros x'; only 1: intros y; only 1: intros y'; only 1: intros m'; only 1: intros Hy; only 1: compute in *; only 1: split; only 1: intros z'; only 1: subst; only 1: easy; only 1: intros z'; only 1: rewrite eq_iff_eq_true; only 1: split; only 1: intros z; only 1: auto; only 1: congruence).	0.303200	124
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NSqrt.NSqrtProp.sqrt_spec'	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NSub.NSubProp.sub_0_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZMulOrder.ZMulOrderProp.mul_lt_mono_nonpos	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_min_disassoc	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_max_modular	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NBase.NBaseProp.neq_succ_0	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZBase.ZBaseProp.pred_inj	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAdd.ZAddProp.add_opp_r	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetPositive.PositiveSet.eq_equiv	40	28	synth with cache (only 1: firstorder).	0.195657	29
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZLt.ZOrderProp.neg_nonneg_cases	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Lt.lt_S_n	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZLog.NZLog2Prop.log2_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.max_min_antimono	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZMul.ZMulProp.mul_opp_l	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.Even.even_equiv	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZAdd.ZAddProp.sub_0_l	40	0.0.0.0.0.0.0.30.0	synth with cache (only 1: intros n; only 1: nzinduct n; only 1: nzsimpl; only 1: easy; only 1: intros m; only 1: rewrite opp_succ; only 1: rewrite sub_succ_r; only 1: rewrite pred_inj_wd; only 1: easy).	0.239978	39
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetPositive.PositiveSet.mem_spec	40	0.0.0.0	synth with cache (only 1: destr_bool; only 1: split; only 1: easy; only 1: easy).	0.095297	4
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NAdd.NAddProp.eq_add_0	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetPositive.PositiveSet.mem_Leaf	40	0	synth with cache (only 1: easy).	0.043652	1
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetPositive.PositiveSet.empty_spec	40	3	synth with cache (only 1: easy).	0.069059	4
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Peano.NPeano.Even_equiv	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZParity.ZParityProp.odd_pred	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxLogicalProperties.max_monotone	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros Lef; only 1: intros x; only 1: intros y; only 1: destruct (max_spec x y) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (max_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f x <= f y); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (max_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f y <= f x); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto).	0.276024	24
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxDecProperties.max_case_strong	40	0.1.3.14.4.9.0.0	synth with cache (only 1: intros Compat; only 1: intros; only 1: apply max_case_strong; only 1: intros; only 1: destruct H; only 1: auto; only 1: auto; only 1: auto).	0.085039	39
coq-tactician-stdlib.8.11.dev	Coq.Arith.Le.le_elim_rel	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NStrongRec.NStrongRecProp.StrongRecursion.strong_rec0_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxLogicalProperties.min_monotone	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0	synth with cache (only 1: intros Lef; only 1: intros x; only 1: intros y; only 1: destruct (min_spec x y) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (min_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f x <= f y); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (min_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f y <= f x); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto).	0.283038	25
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxLogicalProperties.min_max_antimonotone	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros Lef; only 1: intros x; only 1: intros y; only 1: destruct (max_spec x y) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (min_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f y <= f x); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (min_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f x <= f y); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order).	0.298471	24
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxDecProperties.max_case	40	0.0.0.0	synth with cache (only 1: intros; only 1: apply Private_Dec.max_case_strong; only 1: auto; only 1: auto).	0.049960	4
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxLogicalProperties.max_min_antimonotone	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0	synth with cache (only 1: intros Lef; only 1: intros x; only 1: intros y; only 1: destruct (min_spec x y) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (max_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f y <= f x); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto; only 1: destruct _tmp_tactician0 as (H, E); only 1: rewrite E; only 1: destruct (max_spec (f x) (f y)) as [_tmp_tactician0| _tmp_tactician0]; only 1: destruct _tmp_tactician0 as (H', E'); only 1: auto; only 1: destruct _tmp_tactician0 as (H', E'); only 1: assert (f x <= f y); only 1: apply Lef; only 1: Private_Tac.order; only 1: Private_Tac.order).	0.298152	25
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxDecProperties.max_dec	40	0.0.0.4	synth with cache (only 1: intros; only 1: apply Private_Dec.max_case; only 1: auto with relations; only 1: auto with relations).	0.055287	8
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxDecProperties.min_case	40	0.0.0.0	synth with cache (only 1: intros; only 1: apply Private_Dec.min_case_strong; only 1: auto; only 1: auto).	0.050332	4
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.UsualMinMaxDecProperties.min_dec	40	0.0.0.2	synth with cache (only 1: intros; only 1: apply Private_Dec.min_case; only 1: auto with relations; only 1: auto with relations).	0.051872	6
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.TTLB_to_OTF.eqb_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.EqNat.eq_nat_is_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.EqNat.eq_eq_nat	40	0.0.0.0.0.0.0	synth with cache (only 1: intros _tmp_tactician0; only 1: intropattern subst <- _tmp_tactician0; only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.099519	7
coq-tactician-stdlib.8.11.dev	Coq.Arith.EqNat.eq_nat_eq	40	0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: revert m; only 1: induction n; only 1: intros until m; only 1: destruct m; only 1: simpl; only 1: auto; only 1: simpl; only 1: contradiction; only 1: intros until m; only 1: destruct m; only 1: simpl; only 1: contradiction; only 1: simpl; only 1: auto).	0.157382	14
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.Ring_theory.Power.pow_pos_swap	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NAddOrder.NAddOrderProp.add_pos_l	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Finite_sets_facts.Finite_sets_facts.cardinal_finite	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Image.Image.Im_add	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Image.Image.image_empty	40	5.3.0.0.47.12.0.0.3.4.2.0.0.0.0.0	synth with cache (only 1: intros H; only 1: apply Extensionality_Ensembles; only 1: split; only 1: intros x; only 1: destruct 1; only 1: unfold In in *; only 1: subst; only 1: elim (setcover_inv U (Full_set U) (Empty_set U) (Singleton U x)); only 1: intros H'6; only 1: intros H'7; only 1: intuition; only 1: intuition; only 1: intros x; only 1: intros H1; only 1: red; only 1: inversion_clear H1).	0.166381	92
coq-tactician-stdlib.8.11.dev	Coq.micromega.Tauto.S.CNFAnnot.Abstraction.is_X_inv	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqke_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.GenericMinMax.MinMaxLogicalProperties.min_max_antimono	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqk_equiv	40	1.3.7.0.0.4	synth with cache (only 1: split; only 1: easy; only 1: auto; only 1: intros Eq; only 1: intros P; only 1: eauto).	0.138370	21
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.succ_not_1	40	0.0.0.0	synth with cache (only 1: destruct p; only 1: easy; only 1: easy; only 1: easy).	0.155770	4
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.succ_discr	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.eqke_equiv	40	0.0.0.0	synth with cache (only 1: split; only 1: eauto; only 1: eauto; only 1: eauto).	0.075041	4
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.pred_succ	40	0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0	synth with cache (only 1: induction p; only 1: simpl; only 1: induction p; only 1: simpl; only 1: f_equal; only 1: induction p; only 1: easy; only 1: easy; only 1: simpl; only 1: easy; only 1: simpl; only 1: easy; only 1: simpl; only 1: f_equal; only 1: easy; only 1: easy).	0.185973	18
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.rev_lnorm_rev	40
coq-tactician-stdlib.8.11.dev	Coq.NArith.Ndiv_def.Pdiv_eucl_remainder	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrderedTypeAlt.OrderedType_from_Alt.eq_sym	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.length_zero_iff_nil	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.InA_eqke_eqk	40	3.12.0.20.23.19.0.13.0.1.51.0.0	synth with cache (only 1: unfold eqke; only 1: intuition; only 1: elim H; only 1: left; only 1: destruct H; only 1: easy; only 1: destruct H; only 1: firstorder; only 1: destruct H as [H| H]; only 1: firstorder; only 1: destruct H; only 1: easy; only 1: auto).	0.804663	155
coq-tactician-stdlib.8.11.dev	Coq.Structures.DecidableType.KeyDecidableType.Elt.InA_eqk	40	0.0.2.1	synth with cache (only 1: intros x; only 1: intros; only 1: rewrite <- H; only 1: intuition).	0.113612	7
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrderedType.OrderedTypeFacts.eq_equiv	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Int.MoreInt.eqb_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZBits.ZBitsProp.pow_div_l	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zcompare.Zcompare_Gt_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrderedType.OrderedTypeFacts.lt_strorder	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zeven.Zeven_equiv	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NBits.NBitsProp.pow_div_l	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zcompare.Zcompare_opp	40	0.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: destruct n; only 1: destruct m; only 1: simpl; only 1: trivial; only 1: simpl; only 1: trivial; only 1: simpl; only 1: trivial; only 1: destruct m; only 1: simpl; only 1: trivial; only 1: simpl; only 1: apply Pos.compare_antisym; only 1: simpl; only 1: trivial; only 1: destruct m; only 1: simpl; only 1: trivial; only 1: simpl; only 1: trivial; only 1: simpl; only 1: rewrite <- Pos.compare_antisym; only 1: easy).	0.194142	26
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zeuclid.ZEuclid.div_mod	40
coq-tactician-stdlib.8.11.dev	Coq.NArith.Nnat.N2Nat.id	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Berardi.Berardis_paradox.not_has_fixpoint	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.app_nil_l	40	3	synth with cache (only 1: auto).	0.058305	4
coq-tactician-stdlib.8.11.dev	Coq.Logic.Berardi.Berardis_paradox.classical_proof_irrelevance	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetRBT.MakeRaw.singleton_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivTrunc.ZQuotProp.quot_opp_l	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetRBT.MakeRaw.makeBlack_ok	40	4.9.4.4	synth with cache (only 1: induction s as [| c l IHl y r IHr]; only 1: trivial; only 1: simpl; only 1: intuition_in).	0.142901	25
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NParity.NParityProp.odd_sub	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetRBT.MakeRaw.makeRed_ok	40	0.0.0.0.0	synth with cache (only 1: destruct s; only 1: simpl; only 1: ok; only 1: simpl; only 1: ok).	0.081702	5
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.succ_pred_double	40
coq-tactician-stdlib.8.11.dev	Coq.omega.OmegaLemmas.Zred_factor1	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersLists.OrderedTypeLists.Inf_eq	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Binary.ZBinary.TestOrder.test	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zpow_alt.Piter_mul_acc	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zorder.Ztrichotomy_inf	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Relations.relation_disjunction_morphism	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Relations.predicate_equivalence_pointwise	40	0	synth with cache (only 1: firstorder).	0.027795	1
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Relations.predicate_implication_pointwise	40	1.0.0	synth with cache (only 1: red; only 1: red; only 1: auto).	0.039077	4
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Relations.relation_equivalence_pointwise	40	2.1.0.0	synth with cache (only 1: intros R'; only 1: red; only 1: red; only 1: auto).	0.051339	7
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Relations.subrelation_pointwise	40	0.0.5.0	synth with cache (only 1: intros ?; only 1: red; only 1: reduce; only 1: firstorder).	0.158126	9
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zmisc.iter_nat_of_Z	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.not_in_cons	40
coq-tactician-stdlib.8.11.dev	Coq.Classes.Morphisms_Relations.flip_pointwise_relation	40	8.6.0.0.1	synth with cache (only 1: unfold flip; only 1: intros R'; only 1: reduce; only 1: red; only 1: firstorder  (subst; auto)).	0.057266	20
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.app_nil_end	40	0.0.0.0.0.0.0	synth with cache (only 1: intros until l; only 1: induction l; only 1: simpl; only 1: reflexivity; only 1: simpl; only 1: f_equal; only 1: auto).	0.072366	7
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zpow_def.Zpower_theory	40
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.Ring.BoolTheory	40	0.0.0.0.0.0.0.0.0.11	synth with cache (only 1: split; only 1: destr_bool; only 1: destr_bool; only 1: destr_bool; only 1: reflexivity; only 1: destr_bool; only 1: destr_bool; only 1: destr_bool; only 1: destr_bool; only 1: destr_bool).	0.236739	21
coq-tactician-stdlib.8.11.dev	Coq.micromega.Env.S.jump_add	40
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.Ring.bool_eq_ok	40	0	synth with cache (only 1: destr_bool).	0.070335	1
coq-tactician-stdlib.8.11.dev	Coq.ZArith.auxiliary.Zne_left	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.auxiliary.Zegal_left	40	0.1	synth with cache (only 1: rewrite <- Z.sub_move_0_r; only 1: easy).	0.082588	3
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zmax.Zmax_spec	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetList.MakeRaw.ForNotations.isok_Ok	40	5	synth with cache (only 1: easy).	0.094501	6
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zmin.Zmin_spec	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NDefOps.NdefOpsProp.if_zero_succ	40
coq-tactician-stdlib.8.11.dev	Coq.Sorting.Mergesort.Sort.Permuted_merge	40
coq-tactician-stdlib.8.11.dev	Coq.FSets.FSetBridge.DepOfNodep.mem	40
coq-tactician-stdlib.8.11.dev	Coq.Strings.Ascii.ascii_dec	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.N2Z.inj_iff	40	0.0.4.0.0.0.13.0.1.0.0.1.0.0.1.1.1.0.0.0.0	synth with cache (only 1: destruct n as [| n]; only 1: destruct m; only 1: simpl; only 1: easy'; only 1: simpl; only 1: split; only 1: easy; only 1: congruence; only 1: destruct m as [| m]; only 1: simpl; only 1: easy'; only 1: simpl; only 1: split; only 1: intros H; only 1: destr_eq H; only 1: subst; only 1: easy; only 1: intros H; only 1: f_equal; only 1: destr_eq H; only 1: easy).	0.371400	43
coq-tactician-stdlib.8.11.dev	Coq.ZArith.ZArith_dec.Dcompare_inf	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.N2Z.is_nonneg	40	2.5.1.0.0	synth with cache (only 1: destruct n; only 1: simpl; only 1: easy; only 1: intros Hn; only 1: easy).	0.214626	13
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidPermutation.Permutation.PermutationA_app_head	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.N2Z.inj_0	40	0	synth with cache (only 1: trivial).	0.048461	1
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.N2Z.inj_pos	40	0	synth with cache (only 1: reflexivity).	0.058821	1
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetRBT.MakeRaw.makeBlack_spec	40
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.Ring_polynom.MakeRingPol.rmul_ext_Proper	40	1	synth with cache (only 1: exact (Rmul_ext Reqe)).	0.066383	2
coq-tactician-stdlib.8.11.dev	Coq.Bool.Zerob.zerob_true_intro	40	0.8.11.2.1	synth with cache (only 1: intros x'; only 1: intros Ha; only 1: subst; only 1: simpl; only 1: trivial).	0.103526	27
coq-tactician-stdlib.8.11.dev	Coq.Bool.Zerob.zerob_true_elim	40	0.0.0.0	synth with cache (only 1: intros until n; only 1: destruct n; only 1: trivial with bool; only 1: inversion 1).	0.091489	4
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetAVL.MakeRaw.singleton_spec	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetAVL.MakeRaw.singleton_ok	40	8.10	synth with cache (only 1: red; only 1: intuition).	0.071478	20
coq-tactician-stdlib.8.11.dev	Coq.Sets.Integers.Integers_sect.le_total_order	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.BinInt.Z.pos_sub_spec	40
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.Ring_polynom.MakeRingPol.radd_ext_Proper	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetWeakList.MakeRaw.ForNotations.isok_iff	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetWeakList.MakeRaw.ForNotations.isok_Ok	40	0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: induction l; only 1: intuition; only 1: simpl; only 1: rewrite andb_true_iff; only 1: rewrite negb_true_iff; only 1: intros H; only 1: destruct H; only 1: constructors; only 1: rewrite <- mem_spec; only 1: congruence; only 1: auto; only 1: auto).	0.166748	12
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapList.Raw.Elt.is_empty_2	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetGenTree.Props.gtb_tree_iff	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zcomplements.floor_gt0	40	2.1	synth with cache (only 1: intros n; only 1: easy).	0.038467	5
coq-tactician-stdlib.8.11.dev	Coq.micromega.Ztac.eq_incl	40	0.0.0.0.0	synth with cache (only 1: intros x; only 1: intros m'; only 1: intros EQ; only 1: rewrite EQ; only 1: easy).	0.122730	5
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Wf_Z.Z_of_nat_complete	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Wf_Z.Z_of_nat_complete_inf	40	0.0.1.0.0	synth with cache (only 1: intros H; only 1: exists (Z.to_nat x); only 1: symmetry; only 1: apply Z2Nat.id; only 1: easy).	0.066955	6
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zbool.Zle_cases	40
coq-tactician-stdlib.8.11.dev	Coq.micromega.EnvRing.MakeRingPol.radd_ext_Proper	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetInterface.WRaw2SetsOn.eq_dec	40
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapWeakList.Raw.Elt.mem_1	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.EqualitiesFacts.KeyDecidableType.InA_eqk_eqke	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersEx.PairOrderedType.lt_compat	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.BinInt.Z.pos_sub_discr	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zabs.Zabs_ind	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Zabs.Zabs_intro	40	0.1.0.138.0	synth with cache (only 1: intros; only 1: destruct n; only 1: easy; only 1: easy; only 1: easy).	0.099913	144
coq-tactician-stdlib.8.11.dev	Coq.NArith.BinNat.N.peano_rect_succ	40
coq-tactician-stdlib.8.11.dev	Coq.NArith.BinNat.N.recursion_0	40	0.0	synth with cache (only 1: simpl; only 1: trivial).	0.040433	2
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.FunctExt_BijComp	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Streams.Stream_Properties.Co_Induction_ForAll.ForAll_coind	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.BinInt.Z.Private_BootStrap.add_0_r	40	0.0.2.0.3.12	synth with cache (only 1: induction n; only 1: simpl; only 1: trivial; only 1: simpl; only 1: trivial; only 1: trivial).	0.139730	23
coq-tactician-stdlib.8.11.dev	Coq.Bool.BoolEq.Bool_eq_dec.not_eq_false_beq	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Inverse_Image.Inverse_Image.wf_inverse_rel	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.Sstar_contains_Rstar	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Map.ForAll_map	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.HLevels.hprop_hset	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Zip.Str_nth_zipWith	40	0.0.1.0.0.0.0.0.0.0	synth with cache (only 1: intros until n; only 1: induction n; only 1: reflexivity; only 1: intros _tmp_tactician0; only 1: destruct _tmp_tactician0 as [x xs]; only 1: intros _tmp_tactician2; only 1: destruct _tmp_tactician2 as [y ys]; only 1: unfold Str_nth in *; only 1: simpl in *; only 1: apply IHn).	0.105367	11
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Zip.Str_nth_tl_zipWith	40	0.6.1.0.2.1.2.0.1.1.0.2.1.2.1.0.0.2.1.4.1.2.1.5.1.3.0.0.1.1.0	synth with cache (only 1: intros until n; only 1: induction n; only 1: reflexivity; only 1: intros s; only 1: simpl; only 1: induction n; only 1: simpl; only 1: reflexivity; only 1: simpl; only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: induction n; only 1: simpl; only 1: intros s1; only 1: apply IHn; only 1: induction n; only 1: reflexivity; only 1: simpl; only 1: induction n; only 1: simpl; only 1: intros s1; only 1: apply IHn; only 1: simpl; only 1: intros H; only 1: apply IHn).	0.818846	73
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.recursion_wd	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.pred_succ	40	0.0.0	synth with cache (only 1: induction n; only 1: auto; only 1: auto).	0.069765	3
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.pred_0	40	0	synth with cache (only 1: reflexivity).	0.035103	1
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.one_succ	40	0	synth with cache (only 1: auto).	0.035753	1
coq-tactician-stdlib.8.11.dev	Coq.Logic.ClassicalFacts.prop_ext_em_degen	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.two_succ	40	0	synth with cache (only 1: reflexivity).	0.035839	1
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.add_0_l	40	0.0.0.0.0	synth with cache (only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.059875	5
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.add_succ_l	40	0.0.0.0.0	synth with cache (only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.064147	5
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.sub_0_r	40	0.0.0.0.1	synth with cache (only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.063261	6
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_2_facts.star_monotone	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_nonzero	40
coq-tactician-stdlib.8.11.dev	Coq.Program.Wf.WfExtensionality.fix_sub_eq_ext	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.UIP_refl_unit	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_refl_trans_ind_left	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.rt1n_ind_right	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.UIP_refl_bool	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_refl_trans_ind_right	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rst1n_rst	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.StreamMemo.DependentMemoFunction.dimemo_get_correct	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Product.Swap.wf_swapprod	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_square	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Relations_3_facts.Noetherian_contains_Noetherian	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Powerset_facts.Sets_as_an_algebra.Setminus_Disjoint_noop	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZBits.ZBitsProp.exists_div2	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NBits.NBitsProp.b2n_proper	40
coq-tactician-stdlib.8.11.dev	Coq.Structures.Orders.TTLB_to_OTF.eq_equiv	40
coq-tactician-stdlib.8.11.dev	Coq.ZArith.Znat.Z_N_nat	40
coq-tactician-stdlib.8.11.dev	Coq.Strings.OctalString.Raw.to_N_of_pos	40	5	synth with cache (only 1: trivial).	0.065106	6
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.div_0_l	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.TypeNeqSmallType.Paradox.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.divide_1_r_nonneg	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZGcd.NZGcdProp.divide_refl	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Natural.Abstract.NIso.Isomorphism.iso_nat_iso	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_le_mono_nonpos_l	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.double_above	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZPow.NZPowProp.pow_eq_0_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZDiv.NZDivProp.mod_0_l	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.Fin.to_nat_of_nat	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZMulOrder.NZMulOrderProp.mul_le_mono_nonneg_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZSqrt.NZSqrtProp.sqrt_pred_square	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Prop.imply_to_or	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.in_split	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Prop.imply_to_and	40	17.12.1.0.2	synth with cache (only 1: intros m; only 1: intros H1; only 1: intros H; only 1: intuition; only 1: tauto).	0.107457	37
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.app_assoc_reverse	40	0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros l; only 1: intros m; only 1: intros n; only 1: induction l; only 1: simpl; only 1: f_equal; only 1: simpl; only 1: f_equal; only 1: auto).	0.098474	9
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZParity.NZParityProp.Even_Odd_False	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.app_comm_cons	40	2.0	synth with cache (only 1: intros l; only 1: auto).	0.048020	4
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.InitialRing.Zth	40
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.InitialRing.ZMORPHISM.radd_ext3_Proper	40	0	synth with cache (only 1: exact (Radd_ext Reqe)).	0.042088	1
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.InitialRing.ZMORPHISM.rmul_ext3_Proper	40	1	synth with cache (only 1: exact (Rmul_ext Reqe)).	0.043289	2
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.InitialRing.ZMORPHISM.ropp_ext3_Proper	40	34.0	synth with cache (only 1: intros; only 1: firstorder).	0.067680	36
coq-tactician-stdlib.8.11.dev	Coq.PArith.BinPos.Pos.pred_double_succ	40
coq-tactician-stdlib.8.11.dev	Coq.MSets.MSetList.MakeRaw.ForNotations.isok_iff	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.nzhead_nonzero	40
coq-tactician-stdlib.8.11.dev	Coq.FSets.FMapList.Raw.Elt.mem_1	40
coq-tactician-stdlib.8.11.dev	Coq.PArith.Pnat.Pos2Nat.inj_mul	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.unorm_0	40
coq-tactician-stdlib.8.11.dev	Coq.PArith.Pnat.Pos2Nat.inj_1	40	1.1	synth with cache (only 1: unfold to_nat; only 1: easy).	0.047729	4
coq-tactician-stdlib.8.11.dev	Coq.Sorting.Sorted.defs.Sorted_rect	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.DecimalFacts.unorm_invol	40	0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: induction d; only 1: easy; only 1: easy; only 1: easy; only 1: easy; only 1: easy; only 1: easy; only 1: easy; only 1: easy; only 1: easy; only 1: easy; only 1: easy).	0.124456	12
coq-tactician-stdlib.8.11.dev	Coq.Lists.Streams.Map.Exists_map	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.ExtensionalityFacts.BijComp_FunctExt	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.WeakFan.WeakFanTheorem	40
coq-tactician-stdlib.8.11.dev	Coq.FSets.FSetBridge.DepOfNodep.add	40
coq-tactician-stdlib.8.11.dev	Coq.Wellfounded.Lexicographic_Exponentiation.Wf_Lexicographic_Exponentiation.desc_prefix	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rst1n_trans	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.NatInt.NZLog.NZLog2Prop.log2_unique	40
coq-tactician-stdlib.8.11.dev	Coq.Relations.Operators_Properties.Properties.Equivalences.clos_rst1n_sym	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Eqdep_dec.UIP_refl_nat	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivFloor.ZDivProp.mod_bound_abs	40
coq-tactician-stdlib.8.11.dev	Coq.setoid_ring.BinList.MakeBinList.jump_add	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Hurkens.PropNeqType.paradox	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivTrunc.ZQuotProp.quot_opp_r	40
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZBits.ZBitsProp.testbit_0_r	40
coq-tactician-stdlib.8.11.dev	Coq.Vectors.VectorSpec.nth_order_last	40
coq-tactician-stdlib.8.11.dev	Coq.Strings.HexString.Raw.to_N_of_pos	40	6	synth with cache (only 1: trivial).	0.094346	7
coq-tactician-stdlib.8.11.dev	Coq.Lists.List.Facts.in_dec	40
coq-tactician-stdlib.8.11.dev	Coq.funind.Recdef.SSplus_lt	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.recursion_succ	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidList.Type_with_equality.InA_alt	40
coq-tactician-stdlib.8.11.dev	Coq.Arith.PeanoNat.Nat.mul_0_l	40	0.0.0.0.0	synth with cache (only 1: induction n; only 1: simpl; only 1: auto; only 1: simpl; only 1: auto).	0.074884	5
coq-tactician-stdlib.8.11.dev	Coq.Numbers.Integer.Abstract.ZDivEucl.ZEuclidProp.div_mod_unique	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.SetoidList.Type_with_equality.incl_nil	40	15	synth with cache (only 1: easy).	0.034019	16
coq-tactician-stdlib.8.11.dev	Coq.Structures.OrdersAlt.Update_OT.lt_compat	40
coq-tactician-stdlib.8.11.dev	Coq.Logic.Classical_Pred_Type.Generic.not_ex_all_not	40
coq-tactician-stdlib.8.11.dev	Coq.Lists.ListDec.Dec_in_Type.incl_dec	40
coq-tactician-stdlib.8.11.dev	Coq.Sets.Classical_sets.Ensembles_classical.Inhabited_Setminus	40
