File "./theories/Reals/Ratan.v", line 1028, characters 0-34:
Warning:
Benchmarking error: Anomaly
                    "File "src/ltacrecord.ml", line 424, characters 61-67: Assertion failed."
Please report at http://coq.inria.fr/bugs/.
File "./theories/Sets/Multiset.v", line 142, characters 4-68:
Warning: Benchmarking error: Forked process exited with signal -11
File "./theories/Numbers/DecimalFacts.v", line 73, characters 1-21:
Warning: Benchmarking error: Forked process exited with signal -11
File "./theories/Lists/Streams.v", line 94, characters 0-19:
Warning:
Benchmarking error: Anomaly
                    "Typing failure of the following tactic:
                    synth with cache (only 1: intro x; only 1: coinduction ltac:(EqSt_reflex); only 1: symmetry; only 1: destruct H; only 1: trivial with datatypes; only 1: assumption).
                    Typing error:
                    Recursive definition of EqSt_reflex is ill-formed.
                    In environment
                    A : Type
                    x : Stream
                    EqSt_reflex : forall s2 : Stream, EqSt x s2 -> EqSt s2 x
                    s2 : Stream
                    H : EqSt x s2
                    Invalid recursive call in the argument of "match" in "match
                                                 EqSt_reflex s2 H
                                                 with
                                                 | eqst _ _ _ x => x
                                                 end".
                    Recursive definition is: "fun 
                                                (s2 : Stream) 
                                                (H : EqSt x s2) =>
                                              eqst s2 x
                                                (eq_sym
                                                 match H with
                                                 | eqst _ _ H0 _ => H0
                                                 end)
                                                (let H0 :
                                                 forall s3 : Stream,
                                                 EqSt x s3 ->
                                                 EqSt (tl s3) (tl x) :=
                                                 fun 
                                                 (s3 : Stream)
                                                 (H0 : EqSt x s3) =>
                                                 match EqSt_reflex s3 H0 with
                                                 | eqst _ _ _ x => x
                                                 end in
                                                 H0 s2 H)"."
Please report at http://coq.inria.fr/bugs/.
