File "./theories/FSets/FMapFullAVL.v", line 525, characters 8-51:
Error: Anomaly "in econstr: grounding a non evar-free term"
Please report at http://coq.inria.fr/bugs/.

File "./theories/Reals/Rtrigo1.v", line 740, characters 2-68:
Error: Stack overflow.

File "./theories/Reals/Rtrigo1.v", line 746, characters 2-68:
Error: Stack overflow.

File "./theories/MSets/MSetRBT.v", line 794, characters 1-22:
Error: Anomaly "in retyping: Non-functional construction."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Reals/Rtrigo1.v", line 807, characters 2-227:
Error: Stack overflow.

File "./theories/Numbers/Cyclic/Int63/Uint63.v", line 1484, characters 1-32:
Error: Stack overflow.

File "./theories/Numbers/Cyclic/Int31/Cyclic31.v", line 2252, characters 1-34:
Error: Stack overflow.

File "./theories/Program/Wf.v", line 245, characters 4-50:
Error: Anomaly "in retyping: unbound local variable."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Lists/Streams.v", line 95, characters 0-19:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intro x; only 1: case x; only 1: case x; only 1: intro n; only 1: coinduction ltac:(EqSt_reflex); only 1: destruct H; only 1: auto; only 1: auto with datatypes; only 1: auto).
Typing error:
Recursive definition of EqSt_reflex is ill-formed.
In environment
A : Type
x : Stream
a : A
s : Stream
a0 : A
s0 : Stream
n : A
EqSt_reflex :
Stream ->
forall (a : A) (s0 s2 : Stream), EqSt (Cons a s0) s2 -> EqSt s2 (Cons a s0)
s1 : Stream
a1 : A
s2 : Stream
s3 : Stream
H : EqSt (Cons a1 s2) s3
Invalid recursive call in the argument of "match" in "match
                                                 EqSt_reflex s3 a1 s2 s3 H
                                                 with
                                                 | eqst _ _ x x0 =>
                                                 (fun
                                                 (_ : 
                                                 hd s3 = hd (Cons a1 s2))
                                                 (H : 
                                                 EqSt 
                                                 (tl s3) 
                                                 (tl (Cons a1 s2))) => H) x
                                                 x0
                                                 end".
Recursive definition is: "fun (_ : Stream) (a : A) 
                            (s0 s2 : Stream) (H : EqSt (Cons a s0) s2) =>
                          eqst s2 (Cons a s0)
                            match H with
                            | eqst _ _ x x0 =>
                                (fun (H0 : hd (Cons a s0) = hd s2)
                                   (_ : EqSt (tl (Cons a s0)) (tl s2)) =>
                                 eq_sym H0) x x0
                            end
                            (let H0 :
                               Stream ->
                               forall (a0 : A) (s3 s4 : Stream),
                               EqSt (Cons a0 s3) s4 ->
                               EqSt (tl s4) (tl (Cons a0 s3)) :=
                               fun (s1 : Stream) (a0 : A) 
                                 (s3 s4 : Stream) 
                                 (H0 : EqSt (Cons a0 s3) s4) =>
                               match EqSt_reflex s1 a0 s3 s4 H0 with
                               | eqst _ _ x x0 =>
                                   (fun (_ : hd s4 = hd (Cons a0 s3))
                                      (H1 : EqSt (tl s4) (tl (Cons a0 s3)))
                                    => H1) x x0
                               end in
                             H0 s2 a s0 s2 H)"."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Lists/Streams.v", line 167, characters 0-31:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intros r s; only 1: coinduction ltac:(EqSt_reflex); only 1: auto).
Typing error:
Recursive definition of EqSt_reflex is ill-formed.
In environment
A : Type
P, Inv : Stream -> Prop
InvThenP : forall x : Stream, Inv x -> P x
InvIsStable : forall x : Stream, Inv x -> Inv (tl x)
r : Stream
s : Inv r
EqSt_reflex : ForAll r
Invalid recursive call in the argument of "match" in "match EqSt_reflex with
                                                 | HereAndFurther x x0 =>
                                                 (fun 
                                                 (_ : P r)
                                                 (H : ForAll (tl r)) => H) x
                                                 x0
                                                 end".
Recursive definition is: "HereAndFurther (InvThenP s)
                            (let H : ForAll (tl r) :=
                               match EqSt_reflex with
                               | HereAndFurther x x0 =>
                                   (fun (_ : P r) (H : ForAll (tl r)) => H) x
                                     x0
                               end in
                             H)"."
Please report at http://coq.inria.fr/bugs/.

