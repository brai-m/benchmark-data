File "./theories/Reals/Rtrigo1.v", line 746, characters 2-68:
Error: Stack overflow.

File "./theories/Numbers/Cyclic/Int63/Int63.v", line 1541, characters 1-32:
Error: Stack overflow.

File "./theories/Numbers/Cyclic/Int31/Cyclic31.v", line 2250, characters 1-34:
Error: Stack overflow.

File "./theories/Arith/Compare_dec.v", line 242, characters 1-28:
Error: Anomaly "Evar ?X43754 was not declared."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Lists/Streams.v", line 94, characters 0-19:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intro x; only 1: case x; only 1: case x; only 1: intro z; only 1: coinduction ltac:(EqSt_reflex); only 1: destruct H; only 1: destruct H; only 1: trivial with datatypes; only 1: auto with datatypes; only 1: exact H).
Typing error:
Recursive definition of EqSt_reflex is ill-formed.
In environment
A : Type
x : Stream
z : A
EqSt_reflex :
Stream ->
forall (a : A) (s0 s2 : Stream), EqSt (Cons a s0) s2 -> EqSt s2 (Cons a s0)
s : Stream
a : A
s0 : Stream
s2 : Stream
H : EqSt (Cons a s0) s2
Invalid recursive call in the argument of "match" in "match
                                                 EqSt_reflex s2 a s0 s2 H
                                                 with
                                                 | eqst _ _ _ x0 => x0
                                                 end".
Recursive definition is: "fun (_ : Stream) (a : A) 
                            (s0 s2 : Stream) (H : EqSt (Cons a s0) s2) =>
                          eqst s2 (Cons a s0)
                            match H with
                            | eqst _ _ H0 _ =>
                                let a0 := hd s2 in
                                match
                                  H0 in (_ = y) return (y = hd (Cons a s0))
                                with
                                | eq_refl => eq_refl
                                end
                            end
                            (let H0 :
                               Stream ->
                               forall (a0 : A) (s3 s4 : Stream),
                               EqSt (Cons a0 s3) s4 ->
                               EqSt (tl s4) (tl (Cons a0 s3)) :=
                               fun (s1 : Stream) (a0 : A) 
                                 (s3 s4 : Stream) 
                                 (H0 : EqSt (Cons a0 s3) s4) =>
                               match EqSt_reflex s1 a0 s3 s4 H0 with
                               | eqst _ _ _ x0 => x0
                               end in
                             H0 s2 a s0 s2 H)"."
Please report at http://coq.inria.fr/bugs/.

