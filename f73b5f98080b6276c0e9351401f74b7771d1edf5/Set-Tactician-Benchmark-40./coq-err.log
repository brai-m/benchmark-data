File "./theories/Sets/Finite_sets_facts.v", line 203, characters 4-67:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intros x H'; only 1: apply NNPP; only 1: intro H2; only 1: eapply PeanoNat.Nat.Private_OrderTac.Tac.lt_irrefl; only 1: elim H'; only 1: auto with arith; only 1: PeanoNat.Nat.order_pos).
Typing error:
Illegal application: 
The term "lt_le_S" of type "forall n m : nat, n < m -> S n <= m" cannot be applied to the terms
 "S ?Goal@{x:=0}" : "nat"
 "S ?Goal@{x:=0}" : "nat"
 "PeanoNat.Nat.lt_0_succ ?Goal@{x:=0}" : "0 < S ?Goal@{x:=0}"
The 3rd term has type "0 < S ?Goal@{x:=0}" which should be coercible to "S
                                                 ?Goal@{x:=0} <
                                                 S ?Goal@{x:=0}"."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Lists/Streams.v", line 94, characters 0-19:
Error:
Anomaly
"Typing failure of the following tactic:
synth with cache (only 1: intro x; only 1: case x; only 1: intros Hfst Hsnd; only 1: destruct 1; only 1: case x; only 1: coinduction ltac:(EqSt_reflex); only 1: destruct H; only 1: trivial with datatypes; only 1: assumption; only 1: assumption).
Typing error:
Recursive definition of EqSt_reflex is ill-formed.
In environment
A : Type
x : Stream
Hfst : A
Hsnd : Stream
s2 : Stream
H : EqSt (Cons Hfst Hsnd) s2
H0 : hd (Cons Hfst Hsnd) = hd s2
H1 : EqSt (tl (Cons Hfst Hsnd)) (tl s2)
EqSt_reflex : A -> Stream -> EqSt s2 (Cons Hfst Hsnd)
a : A
s : Stream
Invalid recursive call in the argument of "match" in "match
                                                 EqSt_reflex a s
                                                 with
                                                 | eqst _ _ _ x0 => x0
                                                 end".
Recursive definition is: "fun (a : A) (s : Stream) =>
                          eqst s2 (Cons Hfst Hsnd)
                            (let a0 := hd s2 in
                             match
                               H0 in (_ = y) return (y = hd (Cons Hfst Hsnd))
                             with
                             | eq_refl => eq_refl
                             end)
                            (let H1 :
                               A ->
                               Stream -> EqSt (tl s2) (tl (Cons Hfst Hsnd)) :=
                               fun (a0 : A) (s0 : Stream) =>
                               match EqSt_reflex a0 s0 with
                               | eqst _ _ _ x0 => x0
                               end in
                             H1 a s)"."
Please report at http://coq.inria.fr/bugs/.

File "./theories/Reals/Rtrigo1.v", line 746, characters 2-68:
Error: Stack overflow.

File "./theories/Reals/Rtrigo1.v", line 740, characters 2-68:
Error: Stack overflow.

File "./theories/Numbers/Cyclic/Int63/Int63.v", line 1541, characters 1-32:
Error: Stack overflow.

File "./theories/Numbers/Cyclic/Int31/Cyclic31.v", line 2250, characters 1-34:
Error: Stack overflow.

