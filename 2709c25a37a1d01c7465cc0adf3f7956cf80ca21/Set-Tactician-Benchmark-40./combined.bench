coq-stdlib.dev	Coq.Init.Logic.Conjunction.proj1	40	0.000649	0	1
coq-stdlib.dev	Coq.Init.Logic.Conjunction.proj2	40	0.001694	2	2	0.0	synth with cache (only 1: destruct 1; only 1: trivial).
coq-stdlib.dev	Coq.Init.Logic.Equivalence.iff_refl	40	0.001132	2	1
coq-stdlib.dev	Coq.Init.Logic.Equivalence.iff_sym	40	0.004708	13	5	0.0.0.4	synth with cache (only 1: destruct 1; only 1: split; only 1: auto; only 1: auto).
coq-stdlib.dev	Coq.Init.Logic.Equivalence.iff_trans	40	0.018412	55	20	1.1.0.0.3	synth with cache (only 1: destruct 1; only 1: destruct 1; only 1: split; only 1: auto; only 1: auto).
coq-stdlib.dev	Coq.Init.Logic.and_iff_compat_r	40	0.093283	236	87	0.0.0.0.0.0.0.0.0.0.0.0	synth with cache (only 1: intros ? ? ? [Hl Hr]; only 1: split; only 1: intros [? ?]; only 1: split; only 1: apply Hl; only 1: assumption; only 1: assumption; only 1: intros [? ?]; only 1: split; only 1: apply Hr; only 1: assumption; only 1: assumption).
coq-stdlib.dev	Coq.Init.Logic.and_iff_compat_l	40	0.136951	600	169	2.0.0.0.2.0.1.0.0.5	synth with cache (only 1: destruct 1; only 1: split; only 1: destruct 1; only 1: split; only 1: trivial; only 1: auto; only 1: destruct 1; only 1: split; only 1: trivial; only 1: auto).
coq-stdlib.dev	Coq.Init.Specif.sigT_eta	40	0.013879	2	2	0.0	synth with cache (only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.sig_eta	40	0.014187	2	2	0.0	synth with cache (only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.sigT2_eta	40	0.017305	2	2	0.0	synth with cache (only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.sig2_eta	40	0.016720	2	2	0.0	synth with cache (only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Logic.or_iff_compat_l	40	0.270600	1316	149
coq-stdlib.dev	Coq.Init.Logic.imp_iff_compat_l	40	0.231006	852	95	9.9.2.0	synth with cache (only 1: intros ? ? ? [Hl Hr]; only 1: split; only 1: auto; only 1: auto).
coq-stdlib.dev	Coq.Init.Logic.not_iff_compat	40	0.010068	6	4	1.1.0.0	synth with cache (only 1: intros A B [H1 H2]; only 1: split; only 1: auto; only 1: auto).
coq-stdlib.dev	Coq.Init.Logic.or_iff_compat_r	40	0.551748	1192	302	0.1.0.0.1.0.0.1.0.0.1.0.0.0	synth with cache (only 1: intros ? ? ? [Hl Hr]; only 1: split; only 1: intros [?| ?]; only 1: left; only 1: apply Hl; only 1: assumption; only 1: right; only 1: assumption; only 1: intros [?| ?]; only 1: left; only 1: apply Hr; only 1: assumption; only 1: right; only 1: assumption).
coq-stdlib.dev	Coq.Init.Specif.exists_to_inhabited_sig	40	0.374174	623	69	0.0.2.11.5	synth with cache (only 1: intro; only 1: destruct H; only 1: split; only 1: exists x; only 1: trivial).
coq-stdlib.dev	Coq.Init.Logic.neg_false	40	0.280995	752	132	1.1.11.0.1.0	synth with cache (only 1: split; only 1: split; only 1: auto; only 1: destruct 1; only 1: intros [? ?]; only 1: auto).
coq-stdlib.dev	Coq.Init.Logic.imp_iff_compat_r	40	0.840617	2273	408	9.9.0.1.4	synth with cache (only 1: intros H ?; only 1: destruct 1; only 1: split; only 1: auto; only 1: auto).
coq-stdlib.dev	Coq.Init.Logic.and_comm	40	0.133319	71	46	0.0.0.0.0.0.0.0.2	synth with cache (only 1: split; only 1: intros [? ?]; only 1: split; only 1: trivial; only 1: trivial; only 1: intros [? ?]; only 1: split; only 1: trivial; only 1: trivial).
coq-stdlib.dev	Coq.Logic.ExtensionalityFacts.diagonal_projs_same_behavior	40	1.480125	2073	315	0.12.6.2	synth with cache (only 1: intro m; only 1: intro n; only 1: induction n; only 1: trivial).
coq-stdlib.dev	Coq.Logic.StrictProp.Spr1_inj	40	2.363817	4765	288	4.13.11.27	synth with cache (only 1: destruct a, b; only 1: simpl in *; only 1: destruct e; only 1: reflexivity).
coq-stdlib.dev	Coq.Classes.Morphisms_Relations.relation_conjunction_morphism	40	1.053636	305	136	6.2	synth with cache (only 1: intros x x' Hx y y' Hy Hr; only 1: firstorder).
coq-stdlib.dev	Coq.Classes.Morphisms_Relations.relation_disjunction_morphism	40	0.075956	1	1	0	synth with cache (only 1: firstorder).
coq-stdlib.dev	Coq.Classes.Morphisms_Relations.predicate_equivalence_pointwise	40	0.009715	1	1	0	synth with cache (only 1: firstorder).
coq-stdlib.dev	Coq.Classes.Morphisms_Relations.predicate_implication_pointwise	40	0.011019	3	2	1.0	synth with cache (only 1: do 2 red; only 1: auto).
coq-stdlib.dev	Coq.Classes.Morphisms_Relations.relation_equivalence_pointwise	40	0.013501	4	2	1.1	synth with cache (only 1: do 2 red; only 1: auto).
coq-stdlib.dev	Coq.Classes.Morphisms_Relations.subrelation_pointwise	40	0.033169	7	4	1.1.1.0	synth with cache (only 1: intro; only 1: intro; only 1: reduce; only 1: firstorder).
coq-stdlib.dev	Coq.Classes.Morphisms_Relations.flip_pointwise_relation	40	0.034566	7	6	0.0.0.0.0.1	synth with cache (only 1: unfold flip, respectful; only 1: split; only 1: reduce; only 1: firstorder; only 1: reduce; only 1: firstorder).
coq-stdlib.dev	Coq.Init.Specif.inhabited_sig_to_exists	40	6.741523	47203	949	0.0.0.87.48	synth with cache (only 1: intro H1; only 1: elim H1; only 1: intros [x y]; only 1: exists x; only 1: assumption).
coq-stdlib.dev	Coq.Init.Specif.ProdSigT.sigT_prod_sigT	40	0.011657	3	2	1.0	synth with cache (only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.ProdSigT.prod_sigT_prod	40	1.277676	10125	135
coq-stdlib.dev	Coq.Init.Specif.sigT.eq_existT_uncurried	40	0.029000	5	4	0.1.0.0	synth with cache (only 1: destruct pq as [p q]; only 1: destruct q; only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.sigT.eq_sigT_uncurried	40	0.051459	7	6	0.1.0.0.0.0	synth with cache (only 1: destruct u as [u1 u2], v as [v1 v2]; only 1: simpl in *; only 1: destruct pq as [p q]; only 1: destruct q; only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.sigT.eq_existT_curried	40	0.024878	4	3	0.1.0	synth with cache (only 1: destruct q; only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.sigT.eq_existT_curried_map	40	0.135216	41	11	0.5.2	synth with cache (only 1: destruct q; only 1: destruct p; only 1: reflexivity).
coq-stdlib.dev	Coq.Init.Specif.sigT.eq_existT_curried_trans	40	1.782019	1728	153	0.28.0	synth with cache (only 1: destruct p, q; only 1: subst; only 1: reflexivity).
